[{"categories":"Code","date":1592096400,"kind":"page","lang":"zh-hans","objectID":"/2020/05-go-error-handling/","permalink":"https://xuanwo.io/2020/05-go-error-handling/","publishdate":"2020-06-14T01:00:00Z","relpermalink":"/2020/05-go-error-handling/","summary":"在开发 storage 库的过程中，我设计并实现了一套 Golang 错误处理的规范。原始的提案和规范可以参考 Proposal: Error Handling 与 Spec: Error Handling，本文是两者汇总后重新梳理的产物。 TL;DR 区分 预期 与 非预期 错误 定义所有预期错误，返回所有的非预期错误 总是返回自定义错误类型以携带与错误上下文有关的信息，该类型必须实现 xerrors.Wrapper 接口 使用 errors.Is 来判断错误，使用 errors.As 来获取错误上下文 定义 错误：不管是错误，故障，异常，失效抑或其他近义词汇，只要程序运行不符合预期，下文统称为 错误 包: 所有有效的 golang package 实现者：负责实现一个 包 的开发者 调用者：负责调用一个 包 的开发者 目标 一个好的错误处理机制应该是这样的： 实现者不需要做额外的工作，只需要专注于处理包自身的错误 调用者能够知道发生了什么错误 调用者能够决定如何处理这个错误 调用者能够了解为什么会发生这个错误 设计 从一个包的角度来看，能够将错误分为两类：预期 与 非预期 。 预期错误：实现者预期可能会出现并能处理的错误 比如在解析 Protocol 时，返回 ErrUnsupportedProtocol 表示该 Protocol 尚未支持 所有的预期错误都必须提前声明 预期错误属于当前包，只有在当前包中才能返回，不允许直接返回其他包定义的预期错误 非预期错误：实现者不知道为何会出现或者无法处理的错误 比如调用其他包返回的错误 所有的非","tags":["golang"],"title":"(我的) Golang 错误处理最佳实践","url":"/2020/05-go-error-handling/"},{"categories":"Code","date":1590973200,"kind":"page","lang":"zh-hans","objectID":"/2020/04-go-mime-intro/","permalink":"https://xuanwo.io/2020/04-go-mime-intro/","publishdate":"2020-06-01T01:00:00Z","relpermalink":"/2020/04-go-mime-intro/","summary":"上周花了一天时间写了一个 MIME 检测 的库，作用是能够根据后缀名来检测对应的 Media Type 类型，比如说输入 pdf 能够返回 application/pdf。本文介绍一下这个库以及开发过程中的踩坑记录。 背景 服务器端检测文件 Media Type （之前经常被叫做 MIME types）的方法通常有三种：第一是看请求中携带的 content-type，第二是读取文件开头的 Magic Number，第三则是看请求中携带的文件名。 其中只有第一种根据 content-type 判断是在 RFC7273 中标准化过的行为，剩下的两种都是约定俗成：提供/使用这种 Media Type 的软件/服务自行规定 Magic Number 和后缀名。 以常见的 PDF 为例，它的 Media Type 模板中会有这样的内容： Magic number(s): All PDF files start with the characters \u0026quot;%PDF-\u0026quot; followed by the PDF version number, e.g., \u0026quot;%PDF-1.7\u0026quot; or \u0026quot;%PDF-2.0\u0026quot;. These characters are in US-ASCII encoding. File extension(s): .pdf 这些是在 PDF 相关的 RFC 8188: The application/pdf Media Type 中规定的，考虑的比较周到，不管是 Magic Number 还是文件后缀名都给出了明确的说明。 而根据 BCP 13，任何人和组织都能够注册 Media Type，因此文件后缀名撞车也是常有的事情，尤其是在 vnd. 前缀下的 Media Type，我也数不清有多少 Media Type 注册了 json 和 xml。还有很多 Media Type 没有注册 Magic Number，其中有大部分是纯文本类型。 所以 Meida Type 与文件后缀名和 Magic Number 之间并没有明确的一一映射，大家只能自行归纳和整理，这也是为什么每个操作系统和语","tags":["golang"],"title":"go-mime 介绍以及踩坑记录","url":"/2020/04-go-mime-intro/"},{"categories":"Code","date":1586739600,"kind":"page","lang":"en-us","objectID":"/2020/04/13/get-started-with-hcl2/","permalink":"https://xuanwo.io/2020/04/13/get-started-with-hcl2/","publishdate":"2020-04-13T01:00:00Z","relpermalink":"/2020/04/13/get-started-with-hcl2/","summary":"HCL 2 is the most promising configuration language I have ever met, but the lack of document makes it hard to use, especially for developers who want to build applications using HCL 2 as config format. This article will show how to use and fully appreciate the benefits of HCL 2.\n In the following content, HCL means HCL v2, please don\u0026rsquo;t confuse with HCL v1\n Prerequisites To fully understand the following content, you may need the following prerequisites:\n Basic golang development experience Familiar with other configuration languages: YAML, JSON and so on  Introduction  HCL is a toolkit for creating structured configuration languages that are both human- and machine-friendly, for use with command-line tools. Although intended to be generally useful, it is primarily targeted towards devops tools, servers, etc.\n HCL has been widely used in all hashicorp products: terraform, vault, consul, nomad, vagrant and packer. Users can configure them like following:\nio_mode = \u0026#34;async\u0026#34; service \u0026#34;http\u0026#34; \u0026#34;web_proxy\u0026#34; { listen_addr = \u0026#34;127.0.0.1:8080\u0026#34; process \u0026#34;main\u0026#34; { command = [\u0026#34;/usr/local/bin/awesome-app\u0026#34;, \u0026#34;server\u0026#34;] } process \u0026#34;mgmt\u0026#34; { command = [\u0026#34;/usr/local/bin/awesome-app\u0026#34;, \u0026#34;mgmt\u0026#34;] } } instead of\n{ \u0026#34;io_mode\u0026#34;: \u0026#34;async\u0026#34;, \u0026#34;service\u0026#34;: { \u0026#34;http\u0026#34;: { \u0026#34;web_proxy\u0026#34;: { \u0026#34;listen_addr\u0026#34;: \u0026#34;127.0.0.1:8080\u0026#34;, \u0026#34;process\u0026#34;: { \u0026#34;main\u0026#34;: { \u0026#34;command\u0026#34;: [\u0026#34;/usr/local/bin/awesome-app\u0026#34;, \u0026#34;server\u0026#34;] }, \u0026#34;mgmt\u0026#34;: { \u0026#34;command\u0026#34;: [\u0026#34;/usr/local/bin/awesome-app\u0026#34;, \u0026#34;mgmt\u0026#34;] } } } } } } or\nid_mode:\u0026#34;async\u0026#34;service:http:web_proxy:listen_addr:\u0026#34;127.0.0.1:8080\u0026#34;process:- main:command:- \u0026#34;/usr/local/bin/awesome-app\u0026#34;- \u0026#34;server\u0026#34;- mgmt:command:- \u0026#34;/usr/local/bin/awesome-app\u0026#34;- \u0026#34;mgmt\u0026#34;HCL v2 combines HCL 1.0 and HIL, so that we can interpolate values directly:\n# Arithmetic with literals and application-provided variables sum = 1 + addend# String interpolation and templates message = \u0026#34;Hello, ${name}!\u0026#34;# Application-provided functions shouty_message = upper(message) HCL is both user and developer-friendly, not registered or missing block will be warned, so the developer doesn\u0026rsquo;t need to guess the reason why config parse failed:\nTestParse: config_test.go:45: test.hcl:1,1-1: Missing required argument; The argument \u0026#34;name\u0026#34; is required, but no definition was found., and 1 other diagnostic(s) Syntax To get started quickly, we will not cover every syntax in HCL Native Syntax Specification. Instead, we focused on the most used subset of structural language.\nAttributes and Blocks HCL is built around two constructs: attributes and blocks.\nAn attribute means to assign a value to a name.\nio_mode = \u0026#34;async\u0026#34; debug = false max_size = 1024 * 1024 ratio = 0.7 placehold = null command = [\u0026#34;/usr/local/bin/awesome-app\u0026#34;, \u0026#34;server\u0026#34;] rules = { mainland: \u0026#34;mainland\u0026#34;, default: \u0026#34;oversea\u0026#34; } The identifier before the equals sign is the attribute name, and the expression after the equals sign is the attribute's value.\nA block creates a child body annotated by a type and optional labels, and block\u0026rsquo;s content consists of a collection of attributes and blocks.\nservice \u0026#34;http\u0026#34; \u0026#34;web_proxy\u0026#34; { listen_addr = \u0026#34;127.0.0.1:8080\u0026#34; process { command = [\u0026#34;/usr/local/bin/awesome-app\u0026#34;, \u0026#34;server\u0026#34;] } } service here defines a type with two required labels: every service following should have two labels. A particular block type may have any number of required labels, or it may require none as with the nested process block type.\nA block\u0026rsquo;s body content is delimited by { and }. Within the block body, further attributes and blocks may be nested, creating a hierarchy of blocks and their associated attributes.","tags":["golang","config","hcl"],"title":"Get Started with HCL2","url":"/2020/04/13/get-started-with-hcl2/"},{"categories":"Code","date":1586048400,"kind":"page","lang":"en-us","objectID":"/2020/04/05/my-solution-for-dns-poisoning-by-atomdns/","permalink":"https://xuanwo.io/2020/04/05/my-solution-for-dns-poisoning-by-atomdns/","publishdate":"2020-04-05T01:00:00Z","relpermalink":"/2020/04/05/my-solution-for-dns-poisoning-by-atomdns/","summary":"I used to be a big fan of coredns: I use it on my laptop, in our team\u0026rsquo;s internal infrastructure and maintain the package for archlinuxcn. Until one day, I want to solve the DNS Pollution problem by coredns. But\u0026hellip;\nCoreDNS is not for DNS Pollution It\u0026rsquo;s obvious that I\u0026rsquo;m not the only fan of coredns, there are mainly two solutions via coredns:\n Generate Corefile: as https://minidump.info/blog/2019/07/coredns-no-dns-poisoning/ does Write coredns plugin: like coredns-chinadns  Why not generate corefile? First of all, it\u0026rsquo;s ugly and not suitable for updates automatically. We have to generate the whole Corefile every time domain list updated and make it hard to apply custom updates. For example, I need to forward some internal domains to a DNS server in a VPN. I need to add them in corefile build scripts or build another system to build corefile.\nThen, coredns forward except is not designed for large domains input. forward will read all zone in a slice, and check them one by one:\n// Read all domains func parseBlock(c *caddy.Controller, f *Forward) error { switch c.Val() { case \u0026#34;except\u0026#34;: ignore := c.RemainingArgs() if len(ignore) == 0 { return c.ArgErr() } for i := 0; i \u0026lt; len(ignore); i++ { ignore[i] = plugin.Host(ignore[i]).Normalize() } f.ignored = ignore ... } // Check one by one func (f *Forward) isAllowedDomain(name string) bool { if dns.Name(name) == dns.Name(f.from) { return true } for _, ignore := range f.ignored { if plugin.Name(ignore).Matches(name) { return false } } return true } We can use the builtin zone support for better performance:\n. { log cache forward . 8.8.8.8 } abc.com def.com { log cache forward . 114.114.114.114 } But we still need to maintain a huge corefile.\nWhy not write a plugin? So, why not write a plugin to read domains from a file and forward it to different upstreams? Yes, I tried, and I found coredns\u0026rsquo;s plugin system is a mess.\ncoredns is chain based, all dns query will be split via zones, so we can\u0026rsquo;t filter and forward them by domains. To handle all domains, we have to design a plugin under root:\n. { filter xxxxx } Then, we need to design a config that matches something and forward to somewhere, maybe like the following:\n. { filter { condition domain_in_file xxxxxxxxxx action forward xxxxxxx } filter { condition domain_not_in_file xxxxxxxxxx action forward xxxxxx } } Looks perfect for now, let\u0026rsquo;s implement it. Ooooops, we need forward here, why not use the builtin forward? Sorry, we can\u0026rsquo;t. Plugin in coredns doesn\u0026rsquo;t been designed for run standalone or embedded, we can\u0026rsquo;t call other plugins or pass the query to other plugins conveniently. As I described in RFC embeddable plugin, many plugins have to implement the same feature.\nSo, don\u0026rsquo;t dig deeper, let\u0026rsquo;s jump out of the chaos.\nSo, what am I need? After talking so much, what am I need?\n Forward DNS query to upstreams depends on conditions Human-readable config Simple deployment, no extra build needed No so bad performance  Although there are other good DNS servers like overture and smartdns, let\u0026rsquo;s build a DNS server for ourselves.","tags":["golang","dns"],"title":"My Solution for DNS Poisoning by AtomDNS","url":"/2020/04/05/my-solution-for-dns-poisoning-by-atomdns/"},{"categories":"Code","date":1583197200,"kind":"page","lang":"zh-hans","objectID":"/2020/03/03/object-storage/","permalink":"https://xuanwo.io/2020/03/03/object-storage/","publishdate":"2020-03-03T01:00:00Z","relpermalink":"/2020/03/03/object-storage/","summary":"最近一直在做面向应用的 Golang 抽象存储层，目前已经对接了十个存储后端，其中有八个是对象存储服务，可以说是对接了大部分公有云对象存储服务了。在对接的过程中有很多感慨，这次整理起来盘点一下。 截止到 v0.7.1，storage 对接了如下对象存储服务： azblob: Azure Blob storage cos: Tencent Cloud Object Storage gcs: Google Cloud Storage kodo: qiniu kodo oss: Aliyun Object Storage qingstor: QingStor Object Storage s3: Amazon S3 uss: UPYUN Storage Service 每个服务会简单介绍一下，然后聊聊对应服务的 go SDK对接体验，并不涉及到性能/稳定性等方面的测试，也不是严肃的产品选型方案，请诸君明鉴。SDK 方面会统一以调用一次 Write 为例展开，看看 SDK 的设计风格和相应的错误处理体验。 azblob 如今的云计算市场上，Azure 算是比较特别的，很多服务都是自成一格，没有采取跟随 AWS 的策略：跟 AWS 把块存储，文件存储，对象存储分为三个不同的服务不同，Azure 先构建好一个 Stream Layer，然后在上面支持各种存储形态，包括 Blob，Files，Queue 和 Table，共同组成了 Azure Storage 服务。 相关 Paper: Erasure Coding in Windows azure storage 我们这次要聊的就是 Azure Blob Storage，下面简写为 azblob。 azblob 会涉及到三种资源：Account，Container 和 Blob，关系如 Azure 官方文档给出的图： Container 对应 s3 的 Bucket，Blob 对应","tags":["golang","storage","object-storage"],"title":"公有云对象存储服务体验吐嘈","url":"/2020/03/03/object-storage/"},{"categories":"Daily","date":1582678800,"kind":"page","lang":"zh-hans","objectID":"/2020/02/26/apiu/","permalink":"https://xuanwo.io/2020/02/26/apiu/","publishdate":"2020-02-26T01:00:00Z","relpermalink":"/2020/02/26/apiu/","summary":"小撇，又唤作小 Piu，因为我近来常看《甄嬛传》，又称做 Piu 贵人，Piu 妃。性别母，生于 19 年 9 月，尚未成年，时常被唤作小母狗，不以为意，甚至更加亲近，我总会说因为她是狗。 女朋友思狗成疾，总是想养一只小边牧，在换房子后便去燕郊狗市抱了一只，两人空手去程两小时，返程带着她和一车子物件。在路上定名为小撇，姓随女友，乳名 Piu。很安静，一路上没有拉屎撒尿，没有发出一点声音，进京时已经在小箱子中睡着。到家后怯懦不敢行，满地板乱嗅，养在狗笼中，经常屎尿齐飞。后来换了开放式的狗栅栏，给它置办了狗窝，狗厕所，但是它总是想跳出来。有一天惹火了两人，将它关在狗栅栏中，谁知它在挣扎数次后，从上方跳了出来，两人喜不自胜。后来逐步撤走狗栅栏，让小 Piu 自由活动，满屋子都是它小脚爪敲击地面的声音。 小 Piu 兴奋时会在房间内转圈奔跑，双耳直立，尾巴高翘及背，唤作“旋风狗”，冲过来踹我们一脚并反弹开，如是反复。小 Piu 害怕的时候会一个 Piu 缩到角落，双耳紧贴头皮，尾巴下垂，常发出“嘤嘤嘤”的声音。小 Piu 睡觉时会依偎在床侧，双手前伸，双脚后探，呈伸长状。大了之后能自行跳上床，并喜欢睡在我的头顶，整个 Piu 趴在枕头上侧，温热柔软的肚子贴着我的头皮，","tags":null,"title":"小 Piu 本纪","url":"/2020/02/26/apiu/"},{"categories":"Daily","date":1577926800,"kind":"page","lang":"zh-hans","objectID":"/2020/01/02/2019-review/","permalink":"https://xuanwo.io/2020/01/02/2019-review/","publishdate":"2020-01-02T01:00:00Z","relpermalink":"/2020/01/02/2019-review/","summary":"虽然年度总结每年都在我的 Todo List 上面，但是我从来没有真正的写过年度总结。去年写过好多草稿，最后都删掉了，原因是写的过于具体会像流水帐，写的过于抽象又容易矫情。今年好不容易鼓起勇气再次尝试，希望能对得起过去的 2019。 Living 今年最大的变化就是有了女朋友，运气太好以至于难以相信灵魂伴侣能如此轻易的找到。努力的追了大半年，终于在年底的时候在一起了。我们官宣的文案是：“从横版过关变成塔防了。”跟她在一起的这段时间很累，但是非常开心非常充实。一起看了好多电影，一起看了好多美剧，一起深夜加班，一起凌晨漫步。饥荒玩的最久的世界已经满365 天了，过上了穿熊皮背心，拿步行手杖，提触手尖刺，喝肉汤吃大肉的幸福生活。晚上会打开 Just Dance 一起手舞足蹈，为每一次 Perfect 欢呼。最近一起养了一条狗子，名字叫阿Piu。 虽然她每天都叼着我的拖鞋到处跑，拉屎奇丑无比，还会尿在新买的地毯上，但是我们很爱她。 有了女朋友对我来说意味着崭新人生阶段的开始，要接受另外一个人进入自己的生活，个人的独处和社交时间减少，双方的情绪也不可避免的互相影响，做任何决定都是双人份的压力和负担，要学会感知和体会他人的情感，肩上的责任也变得更重。这些对我来说都是全新的","tags":null,"title":"2019 年度总结","url":"/2020/01/02/2019-review/"},{"categories":"Code","date":1577667600,"kind":"page","lang":"zh-hans","objectID":"/2019/12/30/storage-intro/","permalink":"https://xuanwo.io/2019/12/30/storage-intro/","publishdate":"2019-12-30T01:00:00Z","relpermalink":"/2019/12/30/storage-intro/","summary":"storage 是一个面向应用的 Golang 统一存储层，其目标是生产级别就绪，高性能，无供应商锁定。目前支持 Azure Blob storage，本地文件系统，Google Cloud Storage，阿里云对象存储，QingStor 对象存储，Amazon S3 等多种存储后端。这个项目从 09/30 开始至今，做了刚刚好三个月，选在今天发布 v0.5.0，一方面是想总结一下过去三个月的开发经历，展望一下黯淡残酷的未来，另一方面是实在按捺不住想跟大家分享一下的心情。本文首先会介绍 storage 这个项目的诞生，然后介绍项目与社区林林总总各种存储项目的不同，之后再介绍未来的开发计划，最后谈谈自己的一些小体会。 Showtime 在介绍 storage 的历史和设计之前，先看看 storage 用起来是什么样子吧。 首先初始化一个服务： srv, store, err := coreutils.Open(\u0026#34;qingstor://hmac:test_access_key:test_secret_key@https:qingstor.com:443/test_bucket_name\u0026#34;) if err != nil { log.Fatalf(\u0026#34;service init failed: %v\u0026#34;, err) } srv 是这个存储服务的 Servicer，负责管理 Namespace；store 是这个存储服务的 Storager，负责实际的存储交互。coreutils 是 storage 库提供的工具包，支持通过统一的配置字符串来创建存储服务。 然后使用这个服务来列取一个目录并发送到通道： ch := make(chan *types.Object, 1) defer close(ch) err := store.ListDir(\u0026#34;prefix\u0026#34;, pairs.WithFileFunc(func(*types.Object){ ch \u0026lt;- o })) if err != nil { log.Fatalf(\u0026#34;listdir: %v\u0026#34;, err) } pairs 是 storage 库提供的参数包，提供了能用在各个 API 接口的强类型参数，风格统一为","tags":["golang","storage"],"title":"面向应用的 Golang 抽象存储层介绍","url":"/2019/12/30/storage-intro/"},{"categories":"Code","date":1576198800,"kind":"page","lang":"zh-hans","objectID":"/2019/12/13/go-locale/","permalink":"https://xuanwo.io/2019/12/13/go-locale/","publishdate":"2019-12-13T01:00:00Z","relpermalink":"/2019/12/13/go-locale/","summary":"在上一篇文章 在 Golang 中如何做国际化？ 中我提到了 “Go 目前没有一个好的检测运行环境语言的库”，go-locale 就是为了解决这个问题而诞生的。 一些事实 现实的情况是，我们没有一个标准的方法可以获取到当前代码运行环境的语言情况。 对于大部分 Linux 发行版而言，我们可以检查 LANG 或者 LANGUAGE 环境变量，但是不同发行版有不同的习惯，而每个人还有自己的配置，比如我在 Archlinux 上就只有 LANG=en_US.UTF-8 ，其他的语言相关环境变量都没有。macOS 上更加复杂，传统上我们将它看作类 Unix 操作系统，沿用环境变量或者直接调用 locale 来检查，但是这也是不一定的。Windows 更不必说了，环境变量这一套不好使，需要检查注册表或者调用 Win32 API。 所以想要解决这些问题，我们需要为不同的平台实现不同的语言检测逻辑，但是现在这些任务可以交给 go-locale 来做了。 介绍 go-locale 的目标是跨平台的语言检测库，它会使用各个平台的不同方式来尽力探测出当前使用的语言，目前已经支持了 Linux，macOS 和 Windows 三大主流平台。 import ( \u0026#34;github.com/Xuanwo/go-locale\u0026#34; ) func main() { tag, err := locale.Detect() if err != nil { log.Fatal(err) } // Have fun with language.Tag! } 内部实现 go-locale 使用条件编译机制，对外暴露一个统一的 Detect ，内部按照平台不同实现不一样的 detect 方法，在 detect 内会尝试该平台下已知可用的多种不同方式，所有方式都检测不","tags":["golang","i18n"],"title":"go-locale 介绍","url":"/2019/12/13/go-locale/"},{"categories":"Code","date":1576026000,"kind":"page","lang":"zh-hans","objectID":"/2019/12/11/golang-i18n/","permalink":"https://xuanwo.io/2019/12/11/golang-i18n/","publishdate":"2019-12-11T01:00:00Z","relpermalink":"/2019/12/11/golang-i18n/","summary":"国际化是一个大问题，具体到我现在从事的开发工作而言，大体上会分为以下几个步骤： 获取待翻译字符串 翻译字符串 应用已翻译字符串 使用已翻译字符串 目前并不存在 Golang 的国际化最佳实践，大家都需要自己去摸索，而本文将会结合我在 qsctl 中的实践介绍 Golang 中如何做国际化，希望对读者们有所助益，少走一些弯路。首先我会介绍每个步骤需要完成的事情，然后介绍常见的 i18n 框架是如何做的，最后介绍我在 qsctl 中的做法。 步骤介绍 获取待翻译字符串 翻译的第一步是获取待翻译字符串，社区比较常见的有两种做法。 第一种是事先定义好需要翻译的字符串，通过配置文件或者 DB 等方式存储；第二种是通过某种方式从源码中获取。 这种方式的弊端很明显：开发流程不顺畅——想要加入一个字符串，需要先修改配置文件，更好一点的方法是通过某种方式从源码中获取，将翻译和开发解耦。 翻译字符串 第二步是翻译字符串。这个部分在开发上需要做的工作并不多，只需要保证以一个确定的格式存储并读取正确即可，比如 YAML，JSON 或者 PO 文件等。 通常可以使用一些 SaaS 化的服务来辅助这一工作：crowdin，onesky，localizejs，phrase，transifex，smartling 等都是可选择的项","tags":["golang","qsctl","i18n"],"title":"在 Golang 中如何做国际化？","url":"/2019/12/11/golang-i18n/"},{"categories":"Code","date":1574816400,"kind":"page","lang":"zh-hans","objectID":"/2019/11/27/iana-language-subtag-registry-for-human/","permalink":"https://xuanwo.io/2019/11/27/iana-language-subtag-registry-for-human/","publishdate":"2019-11-27T01:00:00Z","relpermalink":"/2019/11/27/iana-language-subtag-registry-for-human/","summary":"研究 Language Tag 的时候发现 IANA 发布的 Language Subtag Registry 是用 Record Jar 格式发布的，虽然读起来比较容易，但是用于代码中执行自动化操作很麻烦，所以我做了一些工作将 Record Jar 转换为 JSON 格式。 背景介绍 Language Subtag Registry BCP 47 是用于区分语言的当前最佳实践，包含的 RFC 有 RFC 5646 和 RFC 4647，几乎所有语言和操作系统都遵循了这一规范。BCP 47 除了规范 Language Tag 的定义，格式及其使用之外，还规定了所有有效的 Subtag 如何存储和检索，即IANA Language Subtag Registry。 Record Jar Record Jar 最早由 Eric S. Raymond 在他的著作 The Art of Unix Programming 中描述，之后被规范化并提出了草案 draft-phillips-record-jar-02。BCP 47 就是使用了这个格式来存储 Language Subtag。 IANA Language Subtag Registry For Human Record Jar 看起来大概是这样： Type: language Subtag: ia Description: Interlingua (International Auxiliary Language Association) Added: 2005-10-16 %% Type: language Subtag: cu Description: Church Slavic Description: Church Slavonic Description: Old Bulgarian Description: Old Church Slavonic Description: Old Slavonic Added: 2005-10-16 %% 作为前缀表示注释，Key 和 Value 通过 : 来分割，任意的 Key 都有可能出现多次。为了维护可读性，还会支持 Folding，即通过一些特定的格式来展示多行文本。 这是一个非常简单的文本格式，很好读，但是不好用。如果想提取这些 Subtag 来做一些事情的话，就需要先解析 Record Jar，然后再映射到对应的数据结构中。我在另外一个项目写完了这部分的代码之后认为这些工作其实没有必要","tags":["golang"],"title":"更好用的 IANA Language Subtag Registry 数据","url":"/2019/11/27/iana-language-subtag-registry-for-human/"},{"categories":"Code","date":1573347600,"kind":"page","lang":"zh-hans","objectID":"/2019/11/10/go-template-meta-coding-in-qsctl2/","permalink":"https://xuanwo.io/2019/11/10/go-template-meta-coding-in-qsctl2/","publishdate":"2019-11-10T01:00:00Z","relpermalink":"/2019/11/10/go-template-meta-coding-in-qsctl2/","summary":"有一段时间没有写博客了，最近主要在做的是事情是重新设计并跟小伙伴 Lance 一起了实现 QingStor 对象存储的命令行工具 qsctl。经过一段时间的开发，qsctl 终于发布了首个 beta 版本，我也终于有时间能够跟大家聊一聊~~（吹嘘）~~一下这个产品。在这周五我们公司的 Think Friday 分享中，我分享了《数据驱动编程及其在 qsctl 中的实践》，本文是这次分享修改了标题并补充了部分内容后的事后总结。 大家好，我是漩涡，我是 QingStor 存储研发部的研发工程师（aka QingStor 首席 Go Template 研发工程师，逃）。我对自己的定位是效率研发工程师，我的工作职责是提升我们团队，我们的研发同事，还有调用我们服务的开发者和使用我们服务的用户的工作效率。今天的分享主要就是介绍影响我们用户工作效率的关键工具——qsctl 的重构实践。 本次分享主要分为下面六个部分：首先为不熟悉 QingStor 对象存储周边产品生态的同学介绍 qsctl 是什么，然后介绍 qsctl 在实际的运用和维护中面临的困境。接下来介绍 qsctl 2 研发初期定下的目标，然后分享 qsctl 2 是如何运用 Go 模板元编程的。在最后会介绍实践中的一些经验和最后的实际应用。 qsctl 是什么 在介绍 qsctl 是什么之前，我们需要先了解 QingStor 对象存储是什么。按照官方口径，QingStor™ 对象存储为用户提供可无限","tags":["storage","qingstor","qsctl","golang"],"title":"Go 模板元编程及其在 qsctl 中的实践","url":"/2019/11/10/go-template-meta-coding-in-qsctl2/"},{"categories":"Daily","date":1568854800,"kind":"page","lang":"zh-hans","objectID":"/2019/09/19/archlinux-cups-connect/","permalink":"https://xuanwo.io/2019/09/19/archlinux-cups-connect/","publishdate":"2019-09-19T01:00:00Z","relpermalink":"/2019/09/19/archlinux-cups-connect/","summary":"一直觉得折腾打印机很麻烦，所以每次都是让朋友 F 帮我打印各种材料。但是现在朋友 F 已经离职了，所以只能自己想办法搞了。本文会首先介绍操作系统与打印机通讯的原理，然后讲解如何在 Archlinux 连接并使用打印机，最后介绍常见的故障排除手段。 打印系统 假脱机(spool) 在信息学中，假脱机（外部设备联机并行操作，SPOOL,Simultaneous Peripheral Operations On-line）是一种数据缓冲，指传输数据的过程中，将数据存放在临时工作区中。其它程序可以在之后的任意时间点对其存取。通常英语动词 spool 可以指储存设备的行为，具体表现为物理意义上的缠或卷，就比如说磁带机。最常见的假脱机的应用是打印缓存，即把打印任务加入到队列。 UNIX 和 Linux 系统会为每一个打印机创建一个任务队列，交由一个假脱机程序来管理。其他程序将打印任务提交给这个假脱机程序，然后它就会进行一系列的过滤操作最后发送到打印机上。最初大家都是用的 BSD 打印子系统，其中包含一个守护进程 lpd 和客户端命令 lpr。这个系统由 IETF 实现标准化，成为 RFC 1179 中所述的行式打印机守护程序协议。随着打印技术的不断发展，大家也在不断的对打印系统做改进，比如 LPRng 和 CUPS，可以支持在同一个页面上使用不同字体，支持打印图","tags":["Archlinux"],"title":"Archlinux 连接并使用打印机","url":"/2019/09/19/archlinux-cups-connect/"},{"categories":"Code","date":1567126800,"kind":"page","lang":"zh-hans","objectID":"/2019/08/30/jenkins-pipeline-intro/","permalink":"https://xuanwo.io/2019/08/30/jenkins-pipeline-intro/","publishdate":"2019-08-30T01:00:00Z","relpermalink":"/2019/08/30/jenkins-pipeline-intro/","summary":"前一段时间推动整个 Team 都转向了 Go Modules，最近一段时间的工作主要是在推动自动化构建与测试。我们最后选定的方案是 Jenkins + Multibranch Pipelines，本文将会简单介绍一下 Jenkins Pipeline 以及常用的技巧。 Pipeline 是什么 Jenkins Pipeline 实际上是基于 Groovy 实现的 CI/CD 领域特定语言（DSL），主要分为两类，一类叫做 Declarative Pipeline，一类叫做 Scripted Pipeline。 Declarative Pipeline 体验上更接近于我们熟知的 travis CI 的 travis.yml，通过声明自己要做的事情来规范流程，形如： pipeline { agent any stages { stage(\u0026#39;Build\u0026#39;) { steps { // } } stage(\u0026#39;Test\u0026#39;) { steps { // } } stage(\u0026#39;Deploy\u0026#39;) { steps { // } } } } 而 Scripted Pipeline 则是旧版本中 Jenkins 支持的 Pipeline 模式，主要是写一些 groovy 的代码来制定流程： node { stage(\u0026#39;Build\u0026#39;) { // } stage(\u0026#39;Test\u0026#39;) { // } stage(\u0026#39;Deploy\u0026#39;) { // } } 一般情况下声明式的流水线已经可以满足我们的需要，只有在复杂的情况下才会需要脚本式流水线的参与。 过去大家经常在 Jenkins 的界面上直接写脚本来实现自动化，但是现在更鼓励大家通过在项目中增加 Jenkinsfile 的方式把流水线固定下来，实现 Pipeline As Code，Jenkins 的 Pipeline 插件将会自动发现并执行它。 语法 Declarative Pipeline 最外层有个 pipeline 表明它是一个声明式流水线，下面会有 4 个主要的部分： agent，post，stages，steps，我会逐一介绍一下。 Agent agent 主要用于描述整个 Pipeline 或者指定的 Stage 由什么规","tags":["Jenkins","Groovy"],"title":"Jenkins Pipeline 介绍","url":"/2019/08/30/jenkins-pipeline-intro/"},{"categories":"Code","date":1566435600,"kind":"page","lang":"zh-hans","objectID":"/2019/08/22/go-modules-migrate/","permalink":"https://xuanwo.io/2019/08/22/go-modules-migrate/","publishdate":"2019-08-22T01:00:00Z","relpermalink":"/2019/08/22/go-modules-migrate/","summary":"自从上次 Go Modules 分享以来，我们 Team 的所有 Golang 项目在逐步的切换到 Go Modules，但是在实际执行的操作中遇到了很多问题。本文首先分享我们实际的迁移方案，然后分享我们遇到的问题及其解决方案，最后会谈谈现在还存在的一些问题。 迁移方案 现状 所有地址和项目均为虚构，并未实际使用，仅用于说明 公司内部的 gitlab 地址是 git.enterprise.dev，team 内部现在同时进行着 alpha, beta, gamma, delta 等多个项目，他们分散在 gitlab 的不同组织下。然后 alpha 作为最早的项目，它还包括了 common-go这样一个被所有项目都引用的基础库，此外还有大量的 fork 自第三方且内部进行了定制化的开源项目。项目之前的命名均采用 alpha-io， alpha-common 这样的形式。 之前没有统一过 Team 内部的项目依赖管理工具，因此 Team 内的项目同时存在着自己写的脚本，glide, dep 等多种依赖管理工具。由于依赖管理工具的混乱，也导致了构建步骤的混乱。很多项目的 Makefile 中会修改 GOPATH 为 \u0026lt;project_path\u0026gt;/build，并在构建打包的时候把整个 build 都复制到远程的 Builder 上进行构建。整个构建流程的结果无法复现，不同人打包的结果可能完全是不一致的。 方案 首先我们确定了项目统一的命名规则： 所有项目都放在 git.team.dev 下","tags":["Golang"],"title":"Go Modules 迁移实战经验","url":"/2019/08/22/go-modules-migrate/"},{"categories":"Code","date":1565053200,"kind":"page","lang":"zh-hans","objectID":"/2019/08/06/oci-intro/","permalink":"https://xuanwo.io/2019/08/06/oci-intro/","publishdate":"2019-08-06T01:00:00Z","relpermalink":"/2019/08/06/oci-intro/","summary":"研究工程效率提升必然逃不开容器化，容器化能够屏蔽不同项目的细节，大幅度降低构建持续集成系统的难度，只需要专注于提供平台服务即可，这对我们 Team 来说尤为重要：项目历史包袱重，开发周期长，依赖众多，还正在经历主力开发语言从 Python 到 Golang 到 Rust 的转变。而正式发布于 2017 年的开放容器标准（OCI）的出现使得整个容器社区都在朝着标准化的方向发展，为社区注入了新的动力，很多依托于新标准的项目涌现了出来。在这样的背景下，我在例会之后进行了分享，介绍开放容器标准以及社区向着标准靠拢的努力，然后介绍一些基于标准开发的工具，最后做一些个人的展望。\n","tags":["Container","Docker","Kubernetes","OCI","runC","CNCF"],"title":"开放容器标准(OCI) 内部分享","url":"/2019/08/06/oci-intro/"},{"categories":"Code","date":1562547600,"kind":"page","lang":"zh-hans","objectID":"/2019/07/08/intro-beancollect/","permalink":"https://xuanwo.io/2019/07/08/intro-beancollect/","publishdate":"2019-07-08T01:00:00Z","relpermalink":"/2019/07/08/intro-beancollect/","summary":"每一个 beancount 的使用者最终都会写一个自己的账单导入工具，我当然也不例外。\n","tags":["beancount","golang"],"title":"beancollect —— beancount 账单导入工具","url":"/2019/07/08/intro-beancollect/"},{"categories":"Code","date":1561597200,"kind":"page","lang":"zh-hans","objectID":"/2019/06/27/develop-with-object-storage/","permalink":"https://xuanwo.io/2019/06/27/develop-with-object-storage/","publishdate":"2019-06-27T01:00:00Z","relpermalink":"/2019/06/27/develop-with-object-storage/","summary":"在工作中接触到过很多不了解对象存储的开发者在对接上遇到了很多问题，这篇文章旨在从核心概念出发介绍 QingStor 对象存储，然后介绍 API 和 SDK 及其注意事项，最后总结一下遇到的常见问题，希望能解决大多数人的困惑。本文主要介绍的是 QingStor 对象存储，但是其他的对象存储概念应当相似，同样可以参考。\n","tags":["storage","qingstor"],"title":"QingStor 对象存储对接指北","url":"/2019/06/27/develop-with-object-storage/"},{"categories":"Daily","date":1560387600,"kind":"page","lang":"zh-hans","objectID":"/2019/06/13/switch-to-systemd-networkd/","permalink":"https://xuanwo.io/2019/06/13/switch-to-systemd-networkd/","publishdate":"2019-06-13T01:00:00Z","relpermalink":"/2019/06/13/switch-to-systemd-networkd/","summary":"晚上的时候临时起意决定把网络管理器从 netctl 切换到 systemd-networkd，切换的过程意外的顺畅。本文记录了一下切换的过程并简单介绍一下 systemd-networkd + iwd 的组合如何使用。\n","tags":["systemd","archlinux"],"title":"从 netctl 切换到 systemd-networkd","url":"/2019/06/13/switch-to-systemd-networkd/"},{"categories":"Code","date":1558918800,"kind":"page","lang":"zh-hans","objectID":"/2019/05/27/go-modules/","permalink":"https://xuanwo.io/2019/05/27/go-modules/","publishdate":"2019-05-27T01:00:00Z","relpermalink":"/2019/05/27/go-modules/","summary":"最近在日常工作之外，我开始负责 Team 内部的工程效率提升。瞄准的第一个目标便是推动 Go Modules 在 Team 内部的普及，一方面是想淘汰祖传的依赖管理脚本，减少浪费在处理依赖问题上的时间，另一方面是为了实现 CI/CD 和可重现构建。这安利是否成功，除了要看个人的奋斗，还要看历史的行程。为了使得大家相信迁移到 Modules 好处多多，我在周一的例会后进行了一次分享，本文就是分享后的整理而成的。\n","tags":["golang"],"title":"Go Modules 内部分享","url":"/2019/05/27/go-modules/"},{"categories":"Code","date":1558746000,"kind":"page","lang":"zh-hans","objectID":"/2019/05/25/go-panic/","permalink":"https://xuanwo.io/2019/05/25/go-panic/","publishdate":"2019-05-25T01:00:00Z","relpermalink":"/2019/05/25/go-panic/","summary":"为了满足分布式系统测试的需求，我们经常需要在代码中埋下断点，以便于通过修改编译参数或者注册特定 Hook 的方式来强迫程序走特定的逻辑。这篇文章主要分享了我在实现 BreakPoint 时发现的 Golang Panic \u0026amp;\u0026amp; Recover 的一个好玩行为及其背后的原因。\n","tags":["golang"],"title":"Golang Panic 行为探秘","url":"/2019/05/25/go-panic/"},{"categories":"Daily","date":1557709200,"kind":"page","lang":"zh-hans","objectID":"/2019/05/13/rollover-2nd/","permalink":"https://xuanwo.io/2019/05/13/rollover-2nd/","publishdate":"2019-05-13T01:00:00Z","relpermalink":"/2019/05/13/rollover-2nd/","summary":" 这文档里面都说过的事情，哪能算翻车！\n","tags":["tmux","rime","archlinux","nginx"],"title":"翻车实况第 2 期","url":"/2019/05/13/rollover-2nd/"},{"categories":"Code","date":1553907600,"kind":"page","lang":"zh-hans","objectID":"/2019/03/30/google-calendar/","permalink":"https://xuanwo.io/2019/03/30/google-calendar/","publishdate":"2019-03-30T01:00:00Z","relpermalink":"/2019/03/30/google-calendar/","summary":"前段时间终于下定决定入了 G Suite，花了点时间进行数据迁移，但是在操作日历的时候错误的把朋友们的生日提醒（每年重复）导入到了我的行程当中。为了将这些提醒删掉，我开始了一次 Google 日历的奇妙探险，找到了批量处理的方法，甚至还发现了一个 BUG。\n","tags":["Google","Chinese","JavaScript"],"title":"在 Google 日历度过的欢乐时光","url":"/2019/03/30/google-calendar/"},{"categories":"Code","date":1553774400,"kind":"page","lang":"zh-hans","objectID":"/2019/03/28/jetbrains-ide-global-menu/","permalink":"https://xuanwo.io/2019/03/28/jetbrains-ide-global-menu/","publishdate":"2019-03-28T12:00:00Z","relpermalink":"/2019/03/28/jetbrains-ide-global-menu/","summary":"最近在想办法提升自己的开发体验，其中有一步就是去掉了不常用和已经使用快捷键代替的按钮和菜单。但是菜单栏没有办法隐藏，导致观感上不是很好。适逢 Jetbrains IDEA 推出了 2019.1 版本，趁着体验新版本功能的时候研究并解决了这个问题。\n","tags":["IDE","Linux","Archlinux"],"title":"开启 Jetbrains IDE 的全局菜单","url":"/2019/03/28/jetbrains-ide-global-menu/"},{"categories":"Travel","date":1553515200,"kind":"page","lang":"zh-hans","objectID":"/2019/03/25/holy-land-cruise/","permalink":"https://xuanwo.io/2019/03/25/holy-land-cruise/","publishdate":"2019-03-25T12:00:00Z","relpermalink":"/2019/03/25/holy-land-cruise/","summary":"一个假御宅进行伪圣地巡礼的一天\n","tags":["Japan","Tokyo"],"title":"东京——圣地巡礼","url":"/2019/03/25/holy-land-cruise/"},{"categories":"Travel","date":1553083200,"kind":"page","lang":"zh-hans","objectID":"/2019/03/20/akihabara/","permalink":"https://xuanwo.io/2019/03/20/akihabara/","publishdate":"2019-03-20T12:00:00Z","relpermalink":"/2019/03/20/akihabara/","summary":"终于来到了本肥宅的主场！\n","tags":["Japan","Tokyo"],"title":"秋叶原——再见，我去二次元了","url":"/2019/03/20/akihabara/"},{"categories":"Travel","date":1552910400,"kind":"page","lang":"zh-hans","objectID":"/2019/03/18/the-way-to-mount-fuji/","permalink":"https://xuanwo.io/2019/03/18/the-way-to-mount-fuji/","publishdate":"2019-03-18T12:00:00Z","relpermalink":"/2019/03/18/the-way-to-mount-fuji/","summary":" 人为什么要去爬山？因为山在那里！\n为什么到山脚就停？因为来过，吃过，拍过。\n","tags":["Japan","Tokyo"],"title":"日访富士圣山，夜探歌舞伎町","url":"/2019/03/18/the-way-to-mount-fuji/"},{"categories":"Travel","date":1552572000,"kind":"page","lang":"zh-hans","objectID":"/2019/03/14/one-day-at-nagoya/","permalink":"https://xuanwo.io/2019/03/14/one-day-at-nagoya/","publishdate":"2019-03-14T14:00:00Z","relpermalink":"/2019/03/14/one-day-at-nagoya/","summary":" 这来都来了，总得看一下嘛~\n","tags":["Japan","Nagoya"],"title":"名古屋——匆匆一瞥自风流","url":"/2019/03/14/one-day-at-nagoya/"},{"categories":"Code","date":1552190400,"kind":"page","lang":"zh-hans","objectID":"/2019/03/10/request-id-in-grpc/","permalink":"https://xuanwo.io/2019/03/10/request-id-in-grpc/","publishdate":"2019-03-10T04:00:00Z","relpermalink":"/2019/03/10/request-id-in-grpc/","summary":"分布式追踪是 Anybox 项目中的重要一环，其中在每个请求的入口处设置一个 Request ID 是分布式追踪的第一步。这篇文章主要介绍如何利用 gRPC 的 Metadata 与 Interceptor 功能来实现 Request ID 在不同服务间的生成与传递。\n","tags":["Golang","Python","gRPC","Anybox"],"title":"通过 gRPC 传递 Request ID","url":"/2019/03/10/request-id-in-grpc/"},{"categories":"Daily","date":1550556000,"kind":"page","lang":"zh-hans","objectID":"/2019/02/19/rollover-1st/","permalink":"https://xuanwo.io/2019/02/19/rollover-1st/","publishdate":"2019-02-19T06:00:00Z","relpermalink":"/2019/02/19/rollover-1st/","summary":" 今天翻车了吗？翻了！\n","tags":["Archlinux","Lenovo"],"title":"翻车实况第 1 期","url":"/2019/02/19/rollover-1st/"},{"categories":"Travel","date":1550296800,"kind":"page","lang":"zh-hans","objectID":"/2019/02/16/second-day-at-osaka/","permalink":"https://xuanwo.io/2019/02/16/second-day-at-osaka/","publishdate":"2019-02-16T06:00:00Z","relpermalink":"/2019/02/16/second-day-at-osaka/","summary":" 出去玩七天，这游记能写半年啊- -，我都想放弃治疗了，但是坑都开了，还是得填完。。。\n","tags":["Japan","Osaka"],"title":"大阪——风起雨落夜将至","url":"/2019/02/16/second-day-at-osaka/"},{"categories":"Travel","date":1548482400,"kind":"page","lang":"zh-hans","objectID":"/2019/01/26/first-day-at-osaka/","permalink":"https://xuanwo.io/2019/01/26/first-day-at-osaka/","publishdate":"2019-01-26T06:00:00Z","relpermalink":"/2019/01/26/first-day-at-osaka/","summary":" 真的猛士，敢于直面惨淡的人生，敢于正视淋漓的鲜血，敢于表演丢人的剧本。\n","tags":["Japan","Osaka","Tokyo"],"title":"大阪——波澜不惊的日常","url":"/2019/01/26/first-day-at-osaka/"},{"categories":"Travel","date":1547467200,"kind":"page","lang":"zh-hans","objectID":"/2019/01/14/first-day-at-tokyo/","permalink":"https://xuanwo.io/2019/01/14/first-day-at-tokyo/","publishdate":"2019-01-14T12:00:00Z","relpermalink":"/2019/01/14/first-day-at-tokyo/","summary":" 多图流水帐预警\n","tags":["Japan","Tokyo"],"title":"东京——手忙脚乱的序章","url":"/2019/01/14/first-day-at-tokyo/"},{"categories":"Daily","date":1546664400,"kind":"page","lang":"zh-hans","objectID":"/2019/01/05/share-with-luck-2nd/","permalink":"https://xuanwo.io/2019/01/05/share-with-luck-2nd/","publishdate":"2019-01-05T05:00:00Z","relpermalink":"/2019/01/05/share-with-luck-2nd/","summary":"万万没有想到我也有一周双更的时候（，素材攒的太多了，赶紧分享一下~\n","tags":["Linux","Mac","Archlinux","Database"],"title":"随缘分享第 2 期","url":"/2019/01/05/share-with-luck-2nd/"},{"categories":"Code","date":1546603200,"kind":"page","lang":"zh-hans","objectID":"/2019/01/04/record-for-wifi-disconnect/","permalink":"https://xuanwo.io/2019/01/04/record-for-wifi-disconnect/","publishdate":"2019-01-04T12:00:00Z","relpermalink":"/2019/01/04/record-for-wifi-disconnect/","summary":"今天下午的时候我的 WiFi 出现了一次时长大约为两秒的断开链接，当时正在抢回家的车票，面对突如其来的 ERR_ADDRESS_UNREACHABLE 感到很是愤怒，还在公司的群里问了句刚才 Office 的网络是不是闪断了一下。但是网络组的同事表示监控无异常，较真的我当时就不信了，要不是网络出问题，好端端的电脑怎么会自己断开链接呢？其实结果还真的差不离。。。\n","tags":["Linux","Network"],"title":"记一次 WiFi 断开链接","url":"/2019/01/04/record-for-wifi-disconnect/"},{"categories":"Travel","date":1545876000,"kind":"page","lang":"zh-hans","objectID":"/2018/12/27/pit-stepping-record-for-japan/","permalink":"https://xuanwo.io/2018/12/27/pit-stepping-record-for-japan/","publishdate":"2018-12-27T02:00:00Z","relpermalink":"/2018/12/27/pit-stepping-record-for-japan/","summary":"日本游记持续难产中，先写篇文章记录一下自己这一趟日本之旅踩过的坑~\n","tags":["Japan"],"title":"日本旅游不完全踩坑记录","url":"/2018/12/27/pit-stepping-record-for-japan/"},{"categories":"Daily","date":1544853900,"kind":"page","lang":"zh-hans","objectID":"/2018/12/15/share-with-luck-1st/","permalink":"https://xuanwo.io/2018/12/15/share-with-luck-1st/","publishdate":"2018-12-15T06:05:00Z","relpermalink":"/2018/12/15/share-with-luck-1st/","summary":"每周分享实在做不到，但是随缘分享还是可以的，内容大体上会跟之前的动态有些交叉~\n","tags":["Workflowy","Enpass"],"title":"随缘分享第 1 期","url":"/2018/12/15/share-with-luck-1st/"},{"categories":"Daily","date":1543827900,"kind":"page","lang":"zh-hans","objectID":"/2018/12/03/bump-to-version-2.0/","permalink":"https://xuanwo.io/2018/12/03/bump-to-version-2.0/","publishdate":"2018-12-03T09:05:00Z","relpermalink":"/2018/12/03/bump-to-version-2.0/","summary":"Xuanwo\u0026rsquo;s Blog 升级至 2.0 啦\n","tags":null,"title":"博客升级至 v2.0","url":"/2018/12/03/bump-to-version-2.0/"},{"categories":"Anime","date":1543824300,"kind":"page","lang":"zh-hans","objectID":"/2018/12/03/hello-katou-megumi/","permalink":"https://xuanwo.io/2018/12/03/hello-katou-megumi/","publishdate":"2018-12-03T08:05:00Z","relpermalink":"/2018/12/03/hello-katou-megumi/","summary":"死宅真恶心 警告\n","tags":["路人女主的养成方法"],"title":"你好，加藤惠","url":"/2018/12/03/hello-katou-megumi/"},{"categories":"Daily","date":1543737900,"kind":"page","lang":"zh-hans","objectID":"/2018/12/02/goodbye-xuanwo-org/","permalink":"https://xuanwo.io/2018/12/02/goodbye-xuanwo-org/","publishdate":"2018-12-02T08:05:00Z","relpermalink":"/2018/12/02/goodbye-xuanwo-org/","summary":"一句话新闻：启用新域名 xuanwo.io。\n","tags":["Blog"],"title":"再见，xuanwo.org","url":"/2018/12/02/goodbye-xuanwo-org/"},{"categories":"Code","date":1542287100,"kind":"page","lang":"zh-hans","objectID":"/2018/11/15/record-for-btrfs-conversion/","permalink":"https://xuanwo.io/2018/11/15/record-for-btrfs-conversion/","publishdate":"2018-11-15T13:05:00Z","relpermalink":"/2018/11/15/record-for-btrfs-conversion/","summary":"在 archcn 群里听 fc 教授 安利了有一段时间了，终于在一个心情不是非常美好的晚上决定上一波 btrfs ，这篇文章主要分享这次转换中遇到的一些有趣的故事~\n","tags":["Archlinux","Btrfs"],"title":"记一次 btrfs 的在线转换","url":"/2018/11/15/record-for-btrfs-conversion/"},{"categories":"Code","date":1540902000,"kind":"page","lang":"zh-hans","objectID":"/2018/10/30/tips-of-systemd/","permalink":"https://xuanwo.io/2018/10/30/tips-of-systemd/","publishdate":"2018-10-30T12:20:00Z","relpermalink":"/2018/10/30/tips-of-systemd/","summary":" 我就是累死，写脚本写到吐，我也绝对不换 底裤D！\n底裤D 真香！\n","tags":["Archlinux","Systemd"],"title":"Systemd 的一些小技巧","url":"/2018/10/30/tips-of-systemd/"},{"categories":"Code","date":1539610500,"kind":"page","lang":"zh-hans","objectID":"/2018/10/15/revocer-lost-blog-comments/","permalink":"https://xuanwo.io/2018/10/15/revocer-lost-blog-comments/","publishdate":"2018-10-15T13:35:00Z","relpermalink":"/2018/10/15/revocer-lost-blog-comments/","summary":"最近发现自己博客的评论少了不少，于是找了一下原因并使用工具做了修复，这篇文章主要就是讲 Hugo 如何正确的配置 Disqus 以及如何使用 Disqus 提供的迁移工具来修复已经出问题的数据。\n","tags":["Blog","Hugo"],"title":"恢复博客遗失的评论","url":"/2018/10/15/revocer-lost-blog-comments/"},{"categories":"Game","date":1538580900,"kind":"page","lang":"zh-hans","objectID":"/2018/10/03/ingress-beijing-central-axis/","permalink":"https://xuanwo.io/2018/10/03/ingress-beijing-central-axis/","publishdate":"2018-10-03T15:35:00Z","relpermalink":"/2018/10/03/ingress-beijing-central-axis/","summary":" Ingress 是一款基于地理位置的大型多人侵入式虚拟现实游戏，由 Niantic Labs 开发。\n 作为一位入坑多年，最近几个月才刚刚喜获人权的咸鱼玩家，这个十一长假不想平庸的度过，于是决定在 10 月 3 号的时候一日速刷北京中轴线。因为在适逢十一假期，再加上各种大家都懂的原因，这次任务的难度可以说是噩梦级别。这篇文章就是要跟大家分享一下我成功通关喜悦并且为更多想要一日速刷北京中轴线的同学提供一些小小的帮助。\n","tags":["Game","Ingress","Beijing"],"title":"Ingress 北京中轴线噩梦难度一日速刷攻略","url":"/2018/10/03/ingress-beijing-central-axis/"},{"categories":"Code","date":1536138000,"kind":"page","lang":"zh-hans","objectID":"/2018/09/05/qscamel-intro/","permalink":"https://xuanwo.io/2018/09/05/qscamel-intro/","publishdate":"2018-09-05T09:00:00Z","relpermalink":"/2018/09/05/qscamel-intro/","summary":"qscamel 是一个用于在不同的端点 (Endpoint) 中高效迁移数据的工具。\n","tags":["Golang","QingStor","QingCloud"],"title":"qscamel —— 数据迁移工具","url":"/2018/09/05/qscamel-intro/"},{"categories":"Code","date":1532275200,"kind":"page","lang":"zh-hans","objectID":"/2018/07/22/tiresias-v0.3/","permalink":"https://xuanwo.io/2018/07/22/tiresias-v0.3/","publishdate":"2018-07-22T16:00:00Z","relpermalink":"/2018/07/22/tiresias-v0.3/","summary":"经过一段时间的摸鱼，Tiresias 发布了 v0.3 。新版本重新实现了 sync 的逻辑并且修复了部分 BUG，完整的 changelog 可以参考: https://github.com/Xuanwo/tiresias/blob/master/CHANGELOG.md 。这篇文章主要介绍一下新的 sync 逻辑是如何实现的并介绍一下新增的功能。\n Tiresias 是一个服务器信息管理工具，其目标是自动化服务器信息管理，取代手工维护的 Hosts 和 SSH Config\n","tags":["Golang"],"title":"Tiresias v0.3","url":"/2018/07/22/tiresias-v0.3/"},{"categories":"Code","date":1529085600,"kind":"page","lang":"zh-hans","objectID":"/2018/06/15/bug-caused-by-misreading/","permalink":"https://xuanwo.io/2018/06/15/bug-caused-by-misreading/","publishdate":"2018-06-15T18:00:00Z","relpermalink":"/2018/06/15/bug-caused-by-misreading/","summary":"之前听说过开发人员读错 Intel 的文档导致出现了严重 BUG，但是只是当成玩笑看待，但是等到这种事情发生在自己身上，还影响到了项目在用户生产环境的上线进度的时候，就不是那么好笑了。\n 本文取材自真实事件的复盘，项目相关信息已经去敏。\n","tags":["Golang"],"title":"文档误读导致的 BUG","url":"/2018/06/15/bug-caused-by-misreading/"},{"categories":"Code","date":1526961600,"kind":"page","lang":"zh-hans","objectID":"/2018/05/22/tiresias-intro/","permalink":"https://xuanwo.io/2018/05/22/tiresias-intro/","publishdate":"2018-05-22T04:00:00Z","relpermalink":"/2018/05/22/tiresias-intro/","summary":"大概从大二的时候开始就有这种困惑：不同的服务器所在的云服务商，数据中心，网段，用户名和私钥各不相同，他们的信息要如何管理？最开始是把所有的服务器信息都存放在了密码管理工具当中，后来知道了使用 assh 来生成 ssh_config，最后是 @Aspire 提供的一个思路：使用脚本生成 hosts 文件。于是我顺着 Aspire 的思路开发了一个工具：Tiresias，它可以读取事先写好的 YAML 配置文件并生成 ssh_config 和 hosts 文件。今天这篇文章就主要介绍一下我造的又一个轮子。\n","tags":["Golang","SSH"],"title":"Tiresias —— 服务器信息管理工具","url":"/2018/05/22/tiresias-intro/"},{"categories":"Daily","date":1526470200,"kind":"page","lang":"zh-hans","objectID":"/2018/05/16/thinkpad-x1-carbon-6th/","permalink":"https://xuanwo.io/2018/05/16/thinkpad-x1-carbon-6th/","publishdate":"2018-05-16T11:30:00Z","relpermalink":"/2018/05/16/thinkpad-x1-carbon-6th/","summary":"经过了漫长的等待之后，我的新玩具终于到手了。这篇文章主要晒一些照片，并分享一下我这第一次海淘的经历。\n 多图预警\n","tags":["Hardware","Linux","ThinkPad","ArchLinux"],"title":"ThinkPad X1 Carbon 2018 开箱手记","url":"/2018/05/16/thinkpad-x1-carbon-6th/"},{"categories":"Code","date":1525181400,"kind":"page","lang":"zh-hans","objectID":"/2018/05/01/xuanzang-intro/","permalink":"https://xuanwo.io/2018/05/01/xuanzang-intro/","publishdate":"2018-05-01T13:30:00Z","relpermalink":"/2018/05/01/xuanzang-intro/","summary":"Xuanzang, 中文名：玄奘，是一个支持中文分词的开源全文搜索引擎。其目标是做一个开箱即用，不需要复杂的部署和配置，可以方便的嵌入静态网站的全文搜索引擎。\n","tags":["Golang","Blog"],"title":"Xuanzang —— 一款开箱即用的全文搜索引擎","url":"/2018/05/01/xuanzang-intro/"},{"categories":"Code","date":1524295800,"kind":"page","lang":"zh-hans","objectID":"/2018/04/21/add-jandan-pic-support-for-rsshub/","permalink":"https://xuanwo.io/2018/04/21/add-jandan-pic-support-for-rsshub/","publishdate":"2018-04-21T07:30:00Z","relpermalink":"/2018/04/21/add-jandan-pic-support-for-rsshub/","summary":"RSSHub 是 @DIYgod 开发的一个项目，其目标是：“使用 RSS 连接全世界”，实现的方式是抓取某个网页或者 API 后解析数据并生成符合标准的 RSS Feed。这个项目十分有意思，可以通过 RSS 去订阅 B 站的番剧或者网易云音乐的歌单，比如我最近正在追的一部动漫：DARLING in the FRANXX。我最近为这个项目增加了煎蛋无聊图的支持，这篇文章主要就是讲一讲如何抓取并解析煎蛋无聊图。\n","tags":["Node.js"],"title":"为 RSSHub 增加煎蛋无聊图支持","url":"/2018/04/21/add-jandan-pic-support-for-rsshub/"},{"categories":"Code","date":1523804820,"kind":"page","lang":"zh-hans","objectID":"/2018/04/15/reference-and-copy-in-python/","permalink":"https://xuanwo.io/2018/04/15/reference-and-copy-in-python/","publishdate":"2018-04-15T15:07:00Z","relpermalink":"/2018/04/15/reference-and-copy-in-python/","summary":"用户反馈使用 qsctl 同步时文件内容不正确，调查后发现是对 Python 字典的错误使用导致了这个问题。这篇文章就来详细的介绍一下 Python 中的引用与拷贝。\n","tags":["Python"],"title":"Python 中的引用与拷贝","url":"/2018/04/15/reference-and-copy-in-python/"},{"categories":"Code","date":1523203620,"kind":"page","lang":"zh-hans","objectID":"/2018/04/08/hugo-rss-output-all-content/","permalink":"https://xuanwo.io/2018/04/08/hugo-rss-output-all-content/","publishdate":"2018-04-08T16:07:00Z","relpermalink":"/2018/04/08/hugo-rss-output-all-content/","summary":"在折腾 Feedly 的时候偶然发现自己的博客输出的 RSS 里面只有摘要，想要看完整的内容需要跳转。这可不符合我的初衷，于是花了一些时间配置了一下相关的内容。接下来简要的介绍一下如何配置 Hugo 的模板以生成输出全文的 RSS Feed。\n","tags":["Hugo","Blog"],"title":"Hugo RSS 配置输出全文","url":"/2018/04/08/hugo-rss-output-all-content/"},{"categories":"Code","date":1522577220,"kind":"page","lang":"zh-hans","objectID":"/2018/04/01/python-os-walk/","permalink":"https://xuanwo.io/2018/04/01/python-os-walk/","publishdate":"2018-04-01T10:07:00Z","relpermalink":"/2018/04/01/python-os-walk/","summary":"用户反馈使用在 windows 下使用 qsctl 上传文件的时候会中断并抛出 UnicodeDecodeError 异常，经过一番调查之后发现居然是 os.walk 的坑。\n","tags":["Python"],"title":"Python os walk 的坑","url":"/2018/04/01/python-os-walk/"},{"categories":"Code","date":1515924420,"kind":"page","lang":"zh-hans","objectID":"/2018/01/14/automation-based-on-aws-lambda/","permalink":"https://xuanwo.io/2018/01/14/automation-based-on-aws-lambda/","publishdate":"2018-01-14T10:07:00Z","relpermalink":"/2018/01/14/automation-based-on-aws-lambda/","summary":"在上一篇文章中我们介绍了 Integrmat 这个自动化平台，但是在实际的应用当中，它还是有一些不太符合我们项目需求的地方。基于 AWS Lambda 实现的自动化工具就是我们找到的替代方案，接下来我会将阐述一下项目的需求，然后根据对项目的需求分析为什么 Integrmat 不适合以及基于 AWS Lambda 实现的好处在哪里。之后会介绍一下 AWS Lambda 是什么以及如何实现我们的自动化工具，并分享一些在实现自动化工具中遇到的一些坑。\n","tags":["Share","Software","Automation"],"title":"基于 AWS Lambda 实现自动化","url":"/2018/01/14/automation-based-on-aws-lambda/"},{"categories":"Code","date":1512295620,"kind":"page","lang":"zh-hans","objectID":"/2017/12/03/integromat-intro/","permalink":"https://xuanwo.io/2017/12/03/integromat-intro/","publishdate":"2017-12-03T10:07:00Z","relpermalink":"/2017/12/03/integromat-intro/","summary":"今天想跟大家分享一个类似于 IFTTT 的自动化平台： Integromat。与 IFTTT 最大的区别是它允许用户通过操作每一次请求的输入和输出来构建一个完整的链条，比如上图的这个例子就是实现了这样的一个功能：当完成 Todoist 中带有指定属性的任务时，将这个任务移动到 Done 列表，并将其放到 Done 列表的顶端。\n接下来我会先简单地介绍一下 Integromat，然后讲解一下 Integromat 涉及到的一些元素，最后讲讲如何定制并调试自己的场景。\n","tags":["Share","Software","Automation"],"title":"Integromat -- 最强大的自动化平台","url":"/2017/12/03/integromat-intro/"},{"categories":"Code","date":1511690820,"kind":"page","lang":"zh-hans","objectID":"/2017/11/26/enpass-intro/","permalink":"https://xuanwo.io/2017/11/26/enpass-intro/","publishdate":"2017-11-26T10:07:00Z","relpermalink":"/2017/11/26/enpass-intro/","summary":"不想把自己的密码保存在 LastPass 的服务器上？羡慕 Mac 上好用的 1Password 但是自己的平台上却没有？不喜欢 Linux 密码管理工具过时的界面？ 如果你也曾经为这些问题苦恼过的话，那 Enpass 就有可能是你的最佳之选。\n","tags":["Share","Software","Security"],"title":"Enpass —— 超赞的密码管理工具","url":"/2017/11/26/enpass-intro/"},{"categories":"Code","date":1497541440,"kind":"page","lang":"zh-hans","objectID":"/2017/06/15/upload-to-qingstor-from-browser/","permalink":"https://xuanwo.io/2017/06/15/upload-to-qingstor-from-browser/","publishdate":"2017-06-15T15:44:00Z","relpermalink":"/2017/06/15/upload-to-qingstor-from-browser/","summary":"从浏览器端向 QingStor 对象存储上传是很多开发者的需求，虽然 QingStor 提供了相关的接口和 SDK，但是仍有很多开发者表示不知道怎么样去调用。本文的目的是系统的展示一下如何从浏览器端上传一个文件到对象存储，从而解决大多数开发者们的需求。\n","tags":["Node.js","HTML","Web","JavaScript","QingStor"],"title":"从浏览器端向 QingStor 对象存储上传文件","url":"/2017/06/15/upload-to-qingstor-from-browser/"},{"categories":"Code","date":1485043200,"kind":"page","lang":"zh-hans","objectID":"/2017/01/22/encoding-in-python/","permalink":"https://xuanwo.io/2017/01/22/encoding-in-python/","publishdate":"2017-01-22T00:00:00Z","relpermalink":"/2017/01/22/encoding-in-python/","summary":"这篇文章目标是解决一个非常简单的问题：如何编写一个跨平台，跨版本且字符串行为一致的 Python 命令行应用。\n","tags":["Python"],"title":"聊一聊 Python 的字符串","url":"/2017/01/22/encoding-in-python/"},{"categories":"Code","date":1479772800,"kind":"page","lang":"zh-hans","objectID":"/2016/11/22/garbled-page/","permalink":"https://xuanwo.io/2016/11/22/garbled-page/","publishdate":"2016-11-22T00:00:00Z","relpermalink":"/2016/11/22/garbled-page/","summary":"这是来自segmentfault的一个问题：node.js中抓取utf-8编码的网页为什么也是乱码，解答完这个问题之后，决定探讨一下网页乱码这个问题。\n","tags":["Web"],"title":"有趣的网页乱码问题","url":"/2016/11/22/garbled-page/"},{"categories":"Code","date":1478908800,"kind":"page","lang":"zh-hans","objectID":"/2016/11/12/httpbin-intro/","permalink":"https://xuanwo.io/2016/11/12/httpbin-intro/","publishdate":"2016-11-12T00:00:00Z","relpermalink":"/2016/11/12/httpbin-intro/","summary":"在所有需要做HTTP请求的开发过程中，总有一个这样的痛点：我发出去的请求到底是什么样子的？特别是在一些需要签名和认证的场合，服务器只会冷冰冰的返回一个40x错误，你无从得知错误的具体详情。本文旨在介绍httpbin，看看它是如何解决这个痛点的。\n","tags":["Web"],"title":"httpbin 介绍","url":"/2016/11/12/httpbin-intro/"},{"categories":"Code","date":1477180800,"kind":"page","lang":"zh-hans","objectID":"/2016/10/23/goodbye-hexo/","permalink":"https://xuanwo.io/2016/10/23/goodbye-hexo/","publishdate":"2016-10-23T00:00:00Z","relpermalink":"/2016/10/23/goodbye-hexo/","summary":"其实我现在的心情比较复杂。 Hexo 我从大一的暑假就开始用，大二的时候加入了 Hexo 的团队，一直到现在，关于 Hexo 的文章都是我博客点击率最高的文章。 但是由于我实在是精力有限，没有时间去维护Hexo的相关项目，因此只能与Hexo说再见了，希望能有更多人可以加入Hexo的开发团队，希望Hexo能够发展的更好。 下面简单地分享一下自己在Hexo团队中做的工作和学到的东西。\n","tags":["Software","Hexo"],"title":"再见， Hexo","url":"/2016/10/23/goodbye-hexo/"},{"categories":"Code","date":1473731913,"kind":"page","lang":"zh-hans","objectID":"/2016/09/13/dynamic-page-data-spider/","permalink":"https://xuanwo.io/2016/09/13/dynamic-page-data-spider/","publishdate":"2016-09-13T01:58:33Z","relpermalink":"/2016/09/13/dynamic-page-data-spider/","summary":"之前做了一些数据抓取的工作，期间也踩了一些坑，所以有了这篇文章。\n","tags":["QingCloud","Work"],"title":"动态网页数据抓取踩坑分享","url":"/2016/09/13/dynamic-page-data-spider/"},{"categories":"Code","date":1471888405,"kind":"page","lang":"zh-hans","objectID":"/2016/08/22/nodebb-plugin-html5videoplayer/","permalink":"https://xuanwo.io/2016/08/22/nodebb-plugin-html5videoplayer/","publishdate":"2016-08-22T17:53:25Z","relpermalink":"/2016/08/22/nodebb-plugin-html5videoplayer/","summary":"nodebb-plugin-html5videoplayer 是一个简单的 NodeBB 插件，可以让 NodeBB 支持在线视频观看。Fork 自 @ogerly 开发的 nodebb-plugin-videoplayer， 在他的基础上做了一些微不足道的贡献，括弧笑。\n","tags":["Node.js","NodeBB","JavaScript"],"title":"nodebb-plugin-html5videoplayer 发布","url":"/2016/08/22/nodebb-plugin-html5videoplayer/"},{"categories":"Code","date":1467936000,"kind":"page","lang":"zh-hans","objectID":"/2016/07/08/nodebb-upgrade/","permalink":"https://xuanwo.io/2016/07/08/nodebb-upgrade/","publishdate":"2016-07-08T00:00:00Z","relpermalink":"/2016/07/08/nodebb-upgrade/","summary":"青云用户社区使用了开源的 NodeBB 论坛，部署之初使用0.7版本，因为没有跟随官方进度进行更新，导致论坛版本长期停滞。一方面无法享受到官方的BUG Fix，另一方面也无法使用很多业务需求的插件。思量再三后决定对社区进行升级迁移，不在原论坛直接升级，而是部署一套新的环境，将原有的数据全部导出。\n","tags":["Node.js","JavaScript"],"title":"NodeBB 升级迁移总结","url":"/2016/07/08/nodebb-upgrade/"},{"categories":"Code","date":1467158400,"kind":"page","lang":"zh-hans","objectID":"/2016/06/29/new-blog-new-life/","permalink":"https://xuanwo.io/2016/06/29/new-blog-new-life/","publishdate":"2016-06-29T00:00:00Z","relpermalink":"/2016/06/29/new-blog-new-life/","summary":"曾经看过我的博客的同学大概都会发现，我的博客再一次大变样了~ 这一次的更新其实酝酿了很久，早在刚开始用Hexo的时候就想着要有一个自己的主题。但是那个时候觉得这是一件很难的事情，要懂HTML，CSS，JavaScript，还要懂Swig，Ejs等模板语言，还要懂Hexo的内部原理，于是就一直搁置了。在独立实现了一个完整的项目之后，我认为自己已经有这样的能力了，于是决定正式开始。 在我看来的话，Hexo的使用者大概分为三个层次：第一种用别人的主题，第二种模仿现有的主题，第三种自己独立开发。我原来是第一种，在Next的基础上做了很多改动，这一次进入到了第二个层次。我找了一套自我感觉还不错的模板，然后套用它的CSS设定和页面结构，就成了我现在的主题。 利用两天学习和工作的闲暇时间，我大体上完成了这个主题。做得比较糙，很多细节还有待优化，但是我已经急不可耐地想要正式上线了，笑。在未来的话，我希望能把一些配置都能整理出来，优化一下代码，然后开源这个主题，希望大家能够喜欢~ 庆祝的话已经说的差不多了，下面来讲一讲如何开发一个Hexo主题。\n","tags":["Hexo","Blog","HTML","JavaScript","Node.js"],"title":"新博客上线\u0026Hexo主题开发入门","url":"/2016/06/29/new-blog-new-life/"},{"categories":"Code","date":1466035200,"kind":"page","lang":"zh-hans","objectID":"/2016/06/16/jade_ims/","permalink":"https://xuanwo.io/2016/06/16/jade_ims/","publishdate":"2016-06-16T00:00:00Z","relpermalink":"/2016/06/16/jade_ims/","summary":"这个项目从我们这个学期开了系统分析与设计这门课之后就开始了，首次创建这个项目是在3月26号，实际上真正的开发时间集中在6月上旬。差不多用两个星期的闲暇时间时间完成了这个简单的进销存系统。这个系统基于Flask框架，使用SQLite3数据库，前端则是使用Bootstrap框架，实现了包括客户，库存，销售，进货等管理子系统。说是管理，其实也就是简单的增加和删除而已。 前人经常说，不要重复造轮子。既然有类似于Odoo这样强大的ERP系统珠玉在前，我为什么要再自己造一个功能简单，甚至根本不会有人用的轮子呢？从前我确实是这么想的，但是稍微有一点工作经验之后发现再造轮子的原因有两条：\n 作为一个处在知识积累阶段的学生而言，再造轮子很有必要。不造一次轮子，你就永远不会明白轮子内部的真实构造。很多技术虽然看起来简单，但是想要有一个完善且健壮的实现却有很多坑需要踩。踩这些坑的过程，也正是一个技术人员成长最快的过程。 别人的轮子终究是别人的。你不知道这个轮子最大能承受多少压力，你也不知道这个轮子在什么样的情况下会爆胎。当一个轮子装上企业呼呼向前的列车，再要想把它替换下来是一件很难且成本很高的事情。  接下来，讲讲造这个轮子的一些经历吧~\n","tags":["Python","Flask","Information","HTML","JavaScript"],"title":"马可波罗珠宝进销存系统开发手记","url":"/2016/06/16/jade_ims/"},{"categories":"Code","date":1464912000,"kind":"page","lang":"zh-hans","objectID":"/2016/06/03/owncloud-on-qingcloud/","permalink":"https://xuanwo.io/2016/06/03/owncloud-on-qingcloud/","publishdate":"2016-06-03T00:00:00Z","relpermalink":"/2016/06/03/owncloud-on-qingcloud/","summary":"因为实在不满意百度云的一些缺陷，我们最终决定部署一套团队内部使用的云存储平台，用于团队协作及资料长期存储。希望能够达到如下目标：\n 数据安全性高 权限控制能力强 分享功能更强，可以设置密码和过期时间等 允许匿名第三方上传数据 没有文件上传大小限制 支持多平台同步功能  综合考量各开源项目之后，我最终选定基于QingCloud部署一套开源存储项目OwnCloud。\n","tags":["QingCloud","Software","Work"],"title":"在QingCloud上部署弹性扩容的OwnCloud","url":"/2016/06/03/owncloud-on-qingcloud/"},{"categories":"Code","date":1464555420,"kind":"page","lang":"zh-hans","objectID":"/2016/05/29/learn-from-qingchat/","permalink":"https://xuanwo.io/2016/05/29/learn-from-qingchat/","publishdate":"2016-05-29T20:57:00Z","relpermalink":"/2016/05/29/learn-from-qingchat/","summary":"之前的一段时间一直在从事Qingchat的相关开发工作，这个项目是一个基于Mojo-Weixin提供的Rest API开发的一个微信机器人，承担了十余个群，上千人的微信直播活动。秉承着ACM训练出来的“暴力加乱搞”风格，我花了大概一个星期的课余时间，搞出了一个可用的版本。期间也迭代了很多次，既欣慰于Coding的力量，也苦恼于当初设计的不完善带来的种种问题。在这个项目即将大规模重构的前夕，我总结一下开发Qingchat的过程中的经验教训，希望自己能成为一个更好更聪明的Coder。\n","tags":["Python","qingchat","QingCloud"],"title":"我从Qingchat中学到的教训","url":"/2016/05/29/learn-from-qingchat/"},{"categories":"Code","date":1462752000,"kind":"page","lang":"zh-hans","objectID":"/2016/05/09/msp430g2553-bellring/","permalink":"https://xuanwo.io/2016/05/09/msp430g2553-bellring/","publishdate":"2016-05-09T00:00:00Z","relpermalink":"/2016/05/09/msp430g2553-bellring/","summary":"我萌萌哒的妹纸是一个代码苦手，完全无法理解 C 语言，所以每一次到单片机上机需要交作业的时候都是愁眉苦脸的样子。而我又总是因为自己确实不懂单片机里面的种种奇怪定义（中断，串口，P1.x 之类），所以也一直没有什么好办法去帮她。这一次的作业对编码能力要求较高，但是涉及到的硬件比较少，于是决定以此为契机，开始我的嵌入式开发之旅。\n","tags":["C"],"title":"基于MSP430G2553的打铃系统开发手记","url":"/2016/05/09/msp430g2553-bellring/"},{"categories":"Code","date":1460505600,"kind":"page","lang":"zh-hans","objectID":"/2016/04/13/gitlab-install-intro/","permalink":"https://xuanwo.io/2016/04/13/gitlab-install-intro/","publishdate":"2016-04-13T00:00:00Z","relpermalink":"/2016/04/13/gitlab-install-intro/","summary":"起因 在跟网络中心的老师沟通成立镜像站的相关事宜的时候，意外地接下来搭建一套校内的 Git 服务的任务。 @怡红公子 曾经搭建过一套类似的服务，但由于服务器端没有开启 VT 虚拟化导致不能安装 64 位的操作系统，再加上 Gitlab 不提供 32 位的安装包，所以长期以来怡红公子一直都是自行编译并配置 Gitlab 。考虑到后续维护的方便，我们决定趁着这个机会使用另一台支持安装 64 位操作系统的服务器，一劳永逸地解决这个问题。 我们的服务器环境是 CentOS 7.2 64bit ，以下所有操作均以此为基准。\n","tags":["CUGBLUG","Gitlab"],"title":"Gitlab部署和汉化以及简单运维","url":"/2016/04/13/gitlab-install-intro/"},{"categories":"Code","date":1459728000,"kind":"page","lang":"zh-hans","objectID":"/2016/04/04/docopt-intro/","permalink":"https://xuanwo.io/2016/04/04/docopt-intro/","publishdate":"2016-04-04T00:00:00Z","relpermalink":"/2016/04/04/docopt-intro/","summary":"Qingchat 使用的命令行参数解释器是 docopt，用下来感觉非常棒，所以决定介绍一下这个库。（奉劝各位看官，珍爱生命，远离argparse。）\n","tags":["Python","qingchat"],"title":"docopt——好用的Python命令行参数解释器","url":"/2016/04/04/docopt-intro/"},{"categories":"Code","date":1459468800,"kind":"page","lang":"zh-hans","objectID":"/2016/04/01/qingchat-intro/","permalink":"https://xuanwo.io/2016/04/01/qingchat-intro/","publishdate":"2016-04-01T00:00:00Z","relpermalink":"/2016/04/01/qingchat-intro/","summary":"在我之前写过的一篇文章中，我曾经探索过类似的问题：微信群重复人员识别。当初我就提出过能否自动获取相关数据，但因为种种原因的限制不了了之了。后来发现了Mojo-Weixin这个库之后，我决定在这个的基础上实现一个微信多群直播的工具——Qingchat。（尽管在刚刚实现完不久，微信就更新了转发到多个群的功能，Sad。）探索的成果如下： Qingchat，目前仅支持 python3 ，欢迎各位看官提 issues ，交 code ，或者拍砖。 接下来我会先介绍一下 Qingchat 的原理，然后介绍 Qingchat 的使用，最后展望一下 Qingchat 未来的发展方向。\n","tags":null,"title":"微信多群直播的新探索——Qingchat","url":"/2016/04/01/qingchat-intro/"},{"categories":"Code","date":1457740800,"kind":"page","lang":"zh-hans","objectID":"/2016/03/12/neovim-slow-upgrade/","permalink":"https://xuanwo.io/2016/03/12/neovim-slow-upgrade/","publishdate":"2016-03-12T00:00:00Z","relpermalink":"/2016/03/12/neovim-slow-upgrade/","summary":"一直都非常羡慕那些能把vim用得非常溜的人，但是自己总是不情愿去学，总是觉得vim的操作方式非常反人类，难度曲线太陡，不适合我。真正让我下定决心去学的，是因为系统切换到Ubuntu Gnome之后发现，Sublime Text 3 不能原生支持中文输入。同时我也发现，如果我不上来就折腾spf13这样的东西的话，其实vim非常好懂。于是，Neovim的慢速升级攻略就这样诞生了。\n","tags":["vim","Software"],"title":"Neovim慢速升级攻略","url":"/2016/03/12/neovim-slow-upgrade/"},{"categories":"Code","date":1456617600,"kind":"page","lang":"zh-hans","objectID":"/2016/02/28/wechat-remove/","permalink":"https://xuanwo.io/2016/02/28/wechat-remove/","publishdate":"2016-02-28T00:00:00Z","relpermalink":"/2016/02/28/wechat-remove/","summary":"由于微信的限制，人数超过一百以后，只有邀请才能加入。所以，如果想要组织大型的在线活动，就只有建立很多个分群。然而分群的问题在于，会有很多人重复加群，挤占了本来就缺乏的空间。所以需要找到一个可行的办法，清除两个群中的重复人员。\n","tags":["Software"],"title":"微信群重复人员识别","url":"/2016/02/28/wechat-remove/"},{"categories":"Code","date":1456444800,"kind":"page","lang":"zh-hans","objectID":"/2016/02/26/debug-for-hexo-1775/","permalink":"https://xuanwo.io/2016/02/26/debug-for-hexo-1775/","publishdate":"2016-02-26T00:00:00Z","relpermalink":"/2016/02/26/debug-for-hexo-1775/","summary":"起因 hexojs/hexo #1775 BUG非常明显，在使用hexo 3.1.1搭建一个位于子目录下的博客，然后会发现home以及categories的链接全都忽略了子目录的设定。\n","tags":["Hexo","Software","Node.js"],"title":"记一次debug的经历及反思","url":"/2016/02/26/debug-for-hexo-1775/"},{"categories":"Code","date":1455735542,"kind":"page","lang":"zh-hans","objectID":"/2016/02/17/ipv6-in-cugb/","permalink":"https://xuanwo.io/2016/02/17/ipv6-in-cugb/","publishdate":"2016-02-17T18:59:02Z","relpermalink":"/2016/02/17/ipv6-in-cugb/","summary":"主旨只有两条：开源，节流\n","tags":["Software","CUGB"],"title":"北地网费新政策下的生存攻略","url":"/2016/02/17/ipv6-in-cugb/"},{"categories":"Code","date":1455567346,"kind":"page","lang":"zh-hans","objectID":"/2016/02/15/chocolatey-intro/","permalink":"https://xuanwo.io/2016/02/15/chocolatey-intro/","publishdate":"2016-02-15T20:15:46Z","relpermalink":"/2016/02/15/chocolatey-intro/","summary":"Chocolatey是一个基于Nuget的Windows包管理工具，截止到我更新此文章的时候，一共有3.7k多个独立包。本文旨在介绍Chocolatey这一工具的安装和用法，希望能有更多人享受到该工具的便利之处。\n","tags":["Software","Windows"],"title":"Chocolatey——Windows下的包管理工具","url":"/2016/02/15/chocolatey-intro/"},{"categories":"Code","date":1454627572,"kind":"page","lang":"zh-hans","objectID":"/2016/02/04/unlock-your-smart-tv/","permalink":"https://xuanwo.io/2016/02/04/unlock-your-smart-tv/","publishdate":"2016-02-04T23:12:52Z","relpermalink":"/2016/02/04/unlock-your-smart-tv/","summary":"现在很多人都买了智能电视，但是出于种种你懂得原因，厂商通常都不允许用户自行安装自己想要的APP，比如腾讯视频，优酷视频之类的。本教程旨在突破这些限制，彻底解放智能电视的全部潜力。\n","tags":["Software"],"title":"解放你的智能电视","url":"/2016/02/04/unlock-your-smart-tv/"},{"categories":"Daily","date":1452647931,"kind":"page","lang":"zh-hans","objectID":"/2016/01/13/how-to-differ-invalid-link/","permalink":"https://xuanwo.io/2016/01/13/how-to-differ-invalid-link/","publishdate":"2016-01-13T01:18:51Z","relpermalink":"/2016/01/13/how-to-differ-invalid-link/","summary":"前两天我的朋友圈被微信公开课活动的链接+截图刷屏，随后一大帮“业内人士”站出来说这个是盗号连接，只要点开，微信钱包和支付宝就会被盗。作为半个业内人士，我不能忍了，决定跟大家谈一谈如何识别真假链接。\n","tags":["Software"],"title":"如何识别真假链接？","url":"/2016/01/13/how-to-differ-invalid-link/"},{"categories":"Code","date":1451835092,"kind":"page","lang":"zh-hans","objectID":"/2016/01/03/vs-oracle-11g/","permalink":"https://xuanwo.io/2016/01/03/vs-oracle-11g/","publishdate":"2016-01-03T15:31:32Z","relpermalink":"/2016/01/03/vs-oracle-11g/","summary":"开发环境 宿主机：Win10 + VS2015 + ODP.Net for VS2015 虚拟机：Win7 + Oracle 11g + 桥接\n","tags":["Database","Oracle","VB"],"title":"VS2015连接Oracle数据库","url":"/2016/01/03/vs-oracle-11g/"},{"categories":"Code","date":1450887320,"kind":"page","lang":"zh-hans","objectID":"/2015/12/23/best-pdf-read-solution/","permalink":"https://xuanwo.io/2015/12/23/best-pdf-read-solution/","publishdate":"2015-12-23T16:15:20Z","relpermalink":"/2015/12/23/best-pdf-read-solution/","summary":"最近因为学习需要，要大量阅读纯文字的PDF文档。然后我惊讶地发现市场上居然没有哪家提供一套完整可用的跨平台PDF阅读解决方案，于是我在尝试了市面几乎所有叫得上名字的各类阅读器之后，形成了一套自己的跨平台PDF阅读解决方案。本文记录了这套方案的详细内容，希望会有所益处。\n","tags":["Software","Read","Windows","Android"],"title":"最佳跨平台PDF阅读解决方案","url":"/2015/12/23/best-pdf-read-solution/"},{"categories":"Code","date":1450442989,"kind":"page","lang":"zh-hans","objectID":"/2015/12/18/online-video-download-solution/","permalink":"https://xuanwo.io/2015/12/18/online-video-download-solution/","publishdate":"2015-12-18T12:49:49Z","relpermalink":"/2015/12/18/online-video-download-solution/","summary":"因为学习需要，产生了一个这样的需求：要从Youtube上批量下载视频。自然，出于方便使用的角度来看，音画不能分离，最好带有对应的字幕。一番搜罗之后，我找到了基于Python的开源产品： youtube-dl\n 值得一提的是，youtube-dl不仅仅能下载youtube上的视频，它支持的视频链接种类多达700+种，几乎囊括了所有在线视频网站，列表参见此处。让我不由得感慨开源的力量。除此以外，某些不存在的网址需要自备梯子，不再赘述。\n","tags":["Software","Video"],"title":"在线视频下载完整解决方案","url":"/2015/12/18/online-video-download-solution/"},{"categories":"Daily","date":1448588073,"kind":"page","lang":"zh-hans","objectID":"/2015/11/27/surf-with-poweroff/","permalink":"https://xuanwo.io/2015/11/27/surf-with-poweroff/","publishdate":"2015-11-27T01:34:33Z","relpermalink":"/2015/11/27/surf-with-poweroff/","summary":"介绍 前两天我对我们宿舍的路由器进行了小小的改造，使得我们在断电之后也能照常上网。原理非常简单：就是使用充电宝来给路由器供电——因为我们墙上的网口是不会断电的，所以只要解决了路由器没有电的问题，就可以解决断网问题。路由器要求的输入电压为5V，电流为0.3A，恰好跟我们常用的充电宝是一致的，淘宝买一根USB转DV线成功解决问题。\n","tags":["Hardware"],"title":"断电也能上网！——路由器改造记","url":"/2015/11/27/surf-with-poweroff/"},{"categories":"Code","date":1447511358,"kind":"page","lang":"zh-hans","objectID":"/2015/11/14/pandoc/","permalink":"https://xuanwo.io/2015/11/14/pandoc/","publishdate":"2015-11-14T14:29:18Z","relpermalink":"/2015/11/14/pandoc/","summary":"介绍 Pandoc是一个用haskell编写的文本转换工具，小巧迅速且支持格式广泛，堪称文本转换应用的瑞士军刀。\n","tags":["Software"],"title":"文本转换神器——Pandoc","url":"/2015/11/14/pandoc/"},{"categories":"Code","date":1446564246,"kind":"page","lang":"zh-hans","objectID":"/2015/11/03/python-packages/","permalink":"https://xuanwo.io/2015/11/03/python-packages/","publishdate":"2015-11-03T15:24:06Z","relpermalink":"/2015/11/03/python-packages/","summary":"用Python写过不少的脚本，现在要把脚本打包成模块并进行发布，然后才明白脚本Boy到正规的码农差距有多大= =。 踩了很多天的坑之后，自己学习到了Python的包分发机制，以及如何利用Pypi向全世界分发自己的模块。现在简单地做一些整理。\n","tags":["Python"],"title":"Python包分发详解","url":"/2015/11/03/python-packages/"},{"categories":"Code","date":1446248843,"kind":"page","lang":"zh-hans","objectID":"/2015/10/30/python-json/","permalink":"https://xuanwo.io/2015/10/30/python-json/","publishdate":"2015-10-30T23:47:23Z","relpermalink":"/2015/10/30/python-json/","summary":"JSON介绍 JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。\n引用自json.org\n","tags":["Software","Python","JSON"],"title":"在Python中使用JSON","url":"/2015/10/30/python-json/"},{"categories":"Code","date":1446136007,"kind":"page","lang":"zh-hans","objectID":"/2015/10/29/regex/","permalink":"https://xuanwo.io/2015/10/29/regex/","publishdate":"2015-10-29T16:26:47Z","relpermalink":"/2015/10/29/regex/","summary":"一直都知道正则表达式的强大，但是总是觉得正则很难学不会，所以一直不得要领。这次因为工作原因，不得不用到正则，于是顺手将它学了起来。入门之后才发现，花费一点时间学习一下正则非常值得，可以成千上百倍地提升你的工作效率。特别是当你经常和批量数据以及规则文本打交道的时候，你会发现完全离不开正则。闲话到此为止，下面进入正题。\n","tags":["Software"],"title":"正则表达式参考手册","url":"/2015/10/29/regex/"},{"categories":"Code","date":1446030896,"kind":"page","lang":"zh-hans","objectID":"/2015/10/28/hashsum/","permalink":"https://xuanwo.io/2015/10/28/hashsum/","publishdate":"2015-10-28T11:14:56Z","relpermalink":"/2015/10/28/hashsum/","summary":"前一阵子的Xcodeghost事件给所有人都好好的上了一课——校验的重要性。无论何时，一定要校验！一定要校验！！一定要校验！！！重要的事情重复三遍总是没错的。如果真的无法做到这一点，最起码这些一定要注意：\n 系统镜像 底层开发工具   选择官方认证的软件源，地址尽可能地使用HTTPS而非HTTP以避免缓存影响\n","tags":["Software"],"title":"Hash以及Hash校验工具介绍","url":"/2015/10/28/hashsum/"},{"categories":"Code","date":1445562189,"kind":"page","lang":"zh-hans","objectID":"/2015/10/23/pyquery-intro/","permalink":"https://xuanwo.io/2015/10/23/pyquery-intro/","publishdate":"2015-10-23T01:03:09Z","relpermalink":"/2015/10/23/pyquery-intro/","summary":"pyQuery介绍 pyquery 可以让你用jquery语法来对xml进行查询。这个API和jquery十分类似。如果利用lxml，pyquery对xml和html的操作将更加快速。\n","tags":["Software","Python","HTML"],"title":"使用pyQuery解析HTML","url":"/2015/10/23/pyquery-intro/"},{"categories":"Code","date":1445505897,"kind":"page","lang":"zh-hans","objectID":"/2015/10/22/vagrant-intro/","permalink":"https://xuanwo.io/2015/10/22/vagrant-intro/","publishdate":"2015-10-22T09:24:57Z","relpermalink":"/2015/10/22/vagrant-intro/","summary":"说到虚拟开发环境，人人都觉得好，但是在实际应用中，人们还是在一台电脑上配置所有用到的环境。究其原因，还是因为搭建虚拟开发环境的过程不比在实体机上配置更简单。但是，Vagrant出现了。Vagrant抹平了不同的虚拟化软件的差异，以统一的命令取而代之；抛弃了传统的系统镜像分发安装方式，以直接封装好的虚拟磁盘代替。除此以外，还提供了各种已经封装好的环境下载，搭建一个虚拟开发环境的便利程度有了大幅提高。\n","tags":["Software"],"title":"Vagrant——构建虚拟开发环境的新思路","url":"/2015/10/22/vagrant-intro/"},{"categories":"Code","date":1444668805,"kind":"page","lang":"zh-hans","objectID":"/2015/10/12/7ghost-google/","permalink":"https://xuanwo.io/2015/10/12/7ghost-google/","publishdate":"2015-10-12T16:53:25Z","relpermalink":"/2015/10/12/7ghost-google/","summary":"尽管自己已经搭建好了Shadowsocks等翻墙工具，但是总有一些时刻需要临时地使用Google查看一些网页，这个时候一个可用的谷歌镜像就显得很重要。本文旨在使用低成本方案来搭建一个可用的谷歌镜像服务，用以部分解决这个问题。\n","tags":["Google","CloudFlare","FuckWall","PHP"],"title":"低成本搭建谷歌镜像","url":"/2015/10/12/7ghost-google/"},{"categories":"Daily","date":1444302496,"kind":"page","lang":"zh-hans","objectID":"/2015/10/08/my-staff/","permalink":"https://xuanwo.io/2015/10/08/my-staff/","publishdate":"2015-10-08T11:08:16Z","relpermalink":"/2015/10/08/my-staff/","summary":"此文用以记录自己用过\u0026amp;在用的各类工具及软件，欢迎推荐\n","tags":["Software","Hardware"],"title":"我的五样","url":"/2015/10/08/my-staff/"},{"categories":"Code","date":1443607978,"kind":"page","lang":"zh-hans","objectID":"/2015/09/30/wechat-mp-data-spider/","permalink":"https://xuanwo.io/2015/09/30/wechat-mp-data-spider/","publishdate":"2015-09-30T10:12:58Z","relpermalink":"/2015/09/30/wechat-mp-data-spider/","summary":"有一个需求是将微信公众平台的数据导出到Excel以进行后续的数据分析。在关注人数等数据上，微信已经提供了Excel导出的接口，但是在图文分析上，尽管有很详细的数据提供，却没有提供一个好的导出接口。所以我需要寻求一个简单的方案来抓取微信公众平台的图文分析数据。\n分析 图文分析页面是JS加载的，通过后台提交返回数据，然后使用JS渲染生成页面。对着页面分析了一会儿，没有发现比较简单的请求构造方式，但是发现微信给出的数据形式非常有规律，可以采用正则来获取我想要的信息。\n","tags":["QingCloud","Work"],"title":"微信公众平台数据抓取解决方案","url":"/2015/09/30/wechat-mp-data-spider/"},{"categories":"Code","date":1443081853,"kind":"page","lang":"zh-hans","objectID":"/2015/09/24/multi-page-data-spider/","permalink":"https://xuanwo.io/2015/09/24/multi-page-data-spider/","publishdate":"2015-09-24T08:04:13Z","relpermalink":"/2015/09/24/multi-page-data-spider/","summary":"最近完成的一个工作是要抓取某公司的合作伙伴信息，跟上一次的区别在于，这个公司调用了Salesforce之类的第三方CRM服务。合作伙伴的详细信息是需要点开对应的连接之后才可以获得。\n","tags":["QingCloud","Work"],"title":"多页批量规则数据抓取解决方案","url":"/2015/09/24/multi-page-data-spider/"},{"categories":"Code","date":1442912842,"kind":"page","lang":"zh-hans","objectID":"/2015/09/22/single-page-data-spider/","permalink":"https://xuanwo.io/2015/09/22/single-page-data-spider/","publishdate":"2015-09-22T09:07:22Z","relpermalink":"/2015/09/22/single-page-data-spider/","summary":"加入青云后接的第一个活儿是抓取某公司的经销商的全部信息。该公司通过一个动态页面来展示经销商信息，使用后台的POST提交请求数据，并使用JS在页面下方加载请求的经销商信息，而且网址不会发生变化。\n分析 接到活儿时候还在上课，电脑不在身边，就用手机先看了看页面。每一条数据都不出意外地非常有规律。观察辣个公司的页面源代码，看得头晕脑胀（只有一个萌萌的员工写的一句别删我让我傻乐了一会儿），无收获。没有办法使用BeautifulSoup，也不会用py来模拟用户的操作，我只好另辟蹊径了。\n","tags":["QingCloud","Work"],"title":"单页批量规则数据抓取解决方案","url":"/2015/09/22/single-page-data-spider/"},{"categories":"Code","date":1441104860,"kind":"page","lang":"zh-hans","objectID":"/2015/09/01/translated-five-best-bt-client-in-ubuntu/","permalink":"https://xuanwo.io/2015/09/01/translated-five-best-bt-client-in-ubuntu/","publishdate":"2015-09-01T10:54:20Z","relpermalink":"/2015/09/01/translated-five-best-bt-client-in-ubuntu/","summary":"本文是我加入LCTT后翻译的第一篇文章，感谢LCTT项目组伙伴们的支持，感谢组长wxy的仔细校对，也欢迎大家加入LCTT项目，共同翻译优质的Linux文章~\n在寻找 Ubuntu 中最好的 BT 客户端吗？事实上，Linux 桌面平台中有许多 BT 客户端，但是它们中的哪些才是最好的 Ubuntu 客户端呢？\n","tags":["Linux"],"title":"译-Ubuntu下五个最好的BT客户端","url":"/2015/09/01/translated-five-best-bt-client-in-ubuntu/"},{"categories":"Code","date":1439777377,"kind":"page","lang":"zh-hans","objectID":"/2015/08/17/bestcoder-16-revenge-of-nim-ii/","permalink":"https://xuanwo.io/2015/08/17/bestcoder-16-revenge-of-nim-ii/","publishdate":"2015-08-17T02:09:37Z","relpermalink":"/2015/08/17/bestcoder-16-revenge-of-nim-ii/","summary":"题目 源地址：\nhttp://acm.hdu.edu.cn/showproblem.php?pid=5088\n理解 给你N堆石子，你可以除去其中的某些堆（也可以不除），问你能否使得后手必胜。 这是一道看起来像博弈的数学题，因为我们都知道如果想使得后手必胜，就只需要使得每一堆石子数的异或和为0即可。也就是说，我们只需要找出其中的某一些，他们的异或和为0，然后剩下的全都除去。如果能找到，输出Yes；找不到，说明不存在，输出No。\n","tags":null,"title":"Bestcoder Round 16 C Revenge of Nim II","url":"/2015/08/17/bestcoder-16-revenge-of-nim-ii/"},{"categories":"Code","date":1439697866,"kind":"page","lang":"zh-hans","objectID":"/2015/08/16/uva-1594-ducci-sequence/","permalink":"https://xuanwo.io/2015/08/16/uva-1594-ducci-sequence/","publishdate":"2015-08-16T04:04:26Z","relpermalink":"/2015/08/16/uva-1594-ducci-sequence/","summary":"题目 源地址：\nhttps://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=4469\n理解 题意分析 题意十分简单，给定一个序列的变换，每一次都把当前位置上的数变为当前位置与下一个位置差的绝对值。然后问你这个序列最后是变成一个循环还是全都变为0。\n暴力做法 一开始看题目的时候感觉很难下手，不知道应该怎样去判断这个序列能否构成一个循环。但是注意到另外一个条件——题目中给出了最大的循环次数，1000次。再加上n的值比较小，也就是说，我完全可以暴力模拟一千次，如果还是没有全为0的串的话，这个串一定是一个循环的串。基于这种想法，我可以得到一个非常简单的暴力算法。\nFloyd判圈算法 概述 这道题已经AC了，但是问题并没有结束。回到我最一开始的想法——我该如何判断一个序列是否构成了循环呢？这样，我们就引出了一个算法：Floyd判圈算法。是的，这个Floyd就是那个最短路算法的发明者。 这个算法可以在有限状态机，迭代函数或者链表上判断是否存在环，并求出该环的起点和长度的算法。\n","tags":null,"title":"UVa 1594 Ducci Sequence","url":"/2015/08/16/uva-1594-ducci-sequence/"},{"categories":"Code","date":1439343082,"kind":"page","lang":"zh-hans","objectID":"/2015/08/12/opensourcebook/","permalink":"https://xuanwo.io/2015/08/12/opensourcebook/","publishdate":"2015-08-12T01:31:22Z","relpermalink":"/2015/08/12/opensourcebook/","summary":"作为一只ACMer，一个非常现实的需求就是我们需要准备自己的模板。在我的想象当中，我们的模板应当有如下的这些特性：\n 可以生成PDF格式，保证在多个平台下的一致性 编辑起来比较简单，我的队友无需学习LaTeX即可开始编辑 共同协作比较方便，我和队友无需将代码互相复制粘贴 代码必须要支持高亮！（很重要！） 代码编辑容易，因为我们的模板白手起家，经常会需要修改。  这些需求，单个实现都比较容易，但是如果想要找到一个全部符合并且简单易行的方案，就有些困难了。在@larrycai推出的中文开源电子书项目的启发下，我想到了使用 Markdown + Github + Travis CI 的一套工具链来构建了我的开源电子书的方法。 下面我来简单地介绍一下。\n","tags":["Github","CI","Read","Markdown"],"title":"Markdown + Travis CI 构建自己的开源电子书","url":"/2015/08/12/opensourcebook/"},{"categories":"Code","date":1439083851,"kind":"page","lang":"zh-hans","objectID":"/2015/08/09/vmware-mac-os-x-intro/","permalink":"https://xuanwo.io/2015/08/09/vmware-mac-os-x-intro/","publishdate":"2015-08-09T01:30:51Z","relpermalink":"/2015/08/09/vmware-mac-os-x-intro/","summary":"最近在电脑上配置了VMware，想要搭建一个Mac OS X的虚拟机以供体验。不过网上的资料过于老旧，版本更新不及时，导致我在配置的过程中遇到了无数的坑，折腾了一个晚上才配置成功。事后我总结了相关的经验和实践完成了这份教程，希望能够对大家有所益处~\n Update: 因为要用到Vagrant，所以又捣鼓了一番在VirtualBox上安装Mac OS X，同样踩了不少坑，相关的总结如下。\n","tags":["Mac"],"title":"史上最详细的虚拟机安装Mac OS X图文教程","url":"/2015/08/09/vmware-mac-os-x-intro/"},{"categories":"Code","date":1438358315,"kind":"page","lang":"zh-hans","objectID":"/2015/07/31/dp-lis/","permalink":"https://xuanwo.io/2015/07/31/dp-lis/","publishdate":"2015-07-31T15:58:35Z","relpermalink":"/2015/07/31/dp-lis/","summary":"介绍 最长上升子序列问题，也就是Longest increasing subsequence，缩写为LIS。是指在一个序列中求长度最长的一个上升子序列的问题，是动态规划中一个相当经典问题。在这里我们可以看到，这个上升实质上就是一个对\u0026lt;进行定义的过程，所以我们求解的其实是一类问题，也就是在给定序列中求解长度最长的符合某一性质的子序列的问题。在下面总结的过程中，我还是以递增为例进行阐述。\n","tags":["C"],"title":"动态规划——最长上升子序列问题","url":"/2015/07/31/dp-lis/"},{"categories":"Code","date":1438120112,"kind":"page","lang":"zh-hans","objectID":"/2015/07/28/listary/","permalink":"https://xuanwo.io/2015/07/28/listary/","publishdate":"2015-07-28T21:48:32Z","relpermalink":"/2015/07/28/listary/","summary":"今天想为大家介绍的是我使用了两年的神器——Listary，作为一款Windows文件浏览增强工具，它为Windows自带的资源管理器添加了很多实用的功能，包括智能命令、最近文档以及收藏功能。与此同时，它还能与很多第三方应用集成，包括鼎鼎大名的Total Commander，还有WinRAR，7zip，FileZilla等等。 值得一提的是，Listary由国人Channing开发，默认添加了简体中文支持，是不可多得的精品，典型的墙内开花墙外香的典范。可能是由于国人还并不是非常重视效率这个方面，感觉使用Listary的主要人群还是集中在国外，从Listary的论坛上也能看得出来。所以我完成了这样一篇文章，希望我也能为这样的精品应用在国内的推广做出些贡献。 恩？说我是水军？唔，谁说我不是呢？ 官网上的广告语Keep files at your fingertips被我翻译成了让文件在指尖流动，不知道Channing会怎么想~\n","tags":["Software","Windows"],"title":"Listary——让文件在指尖流动","url":"/2015/07/28/listary/"},{"categories":"Code","date":1437077381,"kind":"page","lang":"zh-hans","objectID":"/2015/07/16/cugb-2015-acm-final/","permalink":"https://xuanwo.io/2015/07/16/cugb-2015-acm-final/","publishdate":"2015-07-16T20:09:41Z","relpermalink":"/2015/07/16/cugb-2015-acm-final/","summary":"简介 本次结课赛中，我共出了三题，分别是个人赛中的B，E以及组队赛中的C。根据队长的指示，题目的难度并不高，基本上都是以字符串的处理为主（然后被大一AK了= =，心塞塞）。下面我针对各个题目，给出一份题解，希望现场赛没有做出来的童鞋可以继续思考。\n","tags":null,"title":"2015年中国地质大学(北京)14级ACM程序设计结课赛","url":"/2015/07/16/cugb-2015-acm-final/"},{"categories":"Code","date":1436216738,"kind":"page","lang":"zh-hans","objectID":"/2015/07/06/socket-vm/","permalink":"https://xuanwo.io/2015/07/06/socket-vm/","publishdate":"2015-07-06T21:05:38Z","relpermalink":"/2015/07/06/socket-vm/","summary":"基于Socket.io有很多特别强大的应用，socket.io官方提供的一个虚拟计算机Demo就非常赞。通过将使用Qemu虚拟取出来的PC界面转发至Socket.io的端口，然后对Canvas不断地进行绘制，形成了近似与远程操控的体验。我们Together项目用到了这个库，但由于这个库发布于很久之前，再加上相关文档过少，导致部署起来极为困难。所以我完成了这篇文章，希望能让后来人少走一些弯路。\n","tags":["Together"],"title":"基于Socket.io的虚拟计算机","url":"/2015/07/06/socket-vm/"},{"categories":"Code","date":1435864135,"kind":"page","lang":"zh-hans","objectID":"/2015/07/02/teambition-work/","permalink":"https://xuanwo.io/2015/07/02/teambition-work/","publishdate":"2015-07-02T19:08:55Z","relpermalink":"/2015/07/02/teambition-work/","summary":"Together团队组建完成后，一个现实的问题在于：我们怎么样进行协作。经过一番筛选之后，我选中了Teambition，一个简约但是够用的团队协作平台。我们团队围绕着我们的需求，基于Teambition建立了我们自己的协作平台。\n","tags":["Together"],"title":"Teambition团队协作实践","url":"/2015/07/02/teambition-work/"},{"categories":"Code","date":1435744171,"kind":"page","lang":"zh-hans","objectID":"/2015/07/01/screen-ssh/","permalink":"https://xuanwo.io/2015/07/01/screen-ssh/","publishdate":"2015-07-01T09:49:31Z","relpermalink":"/2015/07/01/screen-ssh/","summary":"在实现Together项目的过程中，有一个需求是需要下载一个500M左右系统镜像包，由于文件源在国内，国外的下载速度简直感人。在经历多次因为SSH超时导致下载意外终止后，我终于决定要解决掉这个问题。\n","tags":["Linux","SSH","VPS"],"title":"使用Screen管理会话","url":"/2015/07/01/screen-ssh/"},{"categories":"Code","date":1435662527,"kind":"page","lang":"zh-hans","objectID":"/2015/06/30/together-project/","permalink":"https://xuanwo.io/2015/06/30/together-project/","publishdate":"2015-06-30T11:08:47Z","relpermalink":"/2015/06/30/together-project/","summary":"本项目仍然处在设计阶段，一切变动以最终成果为准\n团队介绍 团队分工  丁皓（组长），负责网站后端建设及维护（兼产品经理？） 满全勇，负责网站着陆页设计\u0026amp;文案 何壁伟，负责网站内容页设计 马可，担任网站首席体验师  协同工具  分工：Teambition 交流：QQ，简聊 分享：印象笔记 ","tags":["Together"],"title":"Together网站项目设计","url":"/2015/06/30/together-project/"},{"categories":"Code","date":1434733138,"kind":"page","lang":"zh-hans","objectID":"/2015/06/19/information-manage-review/","permalink":"https://xuanwo.io/2015/06/19/information-manage-review/","publishdate":"2015-06-19T16:58:58Z","relpermalink":"/2015/06/19/information-manage-review/","summary":"概述 信息资源的分类，方法和类别 分类 信息资源的类型可以根据多种标准来划分。\n 以开发程度为依据，信息资源可划分为潜在的信息资源与现实的信息资源两大类型。 ","tags":["Information"],"title":"信息资源管理复习","url":"/2015/06/19/information-manage-review/"},{"categories":"Code","date":1434119609,"kind":"page","lang":"zh-hans","objectID":"/2015/06/12/database-review/","permalink":"https://xuanwo.io/2015/06/12/database-review/","publishdate":"2015-06-12T14:33:29Z","relpermalink":"/2015/06/12/database-review/","summary":"绪论 数据库系统概述 数据（Data）： 描述事物的符号记录称为数据。 记录： 计算机中表示和存储数据的一种格式或一种方法。 数据库（DataBase，简称DB）： 数据库是长期存储在计算机内、有组织的、可共享的大量数据的集合。 特点：\n 数据按一定的数据模型组织、描述和存储 可为各种用户共享 冗余度较小 数据独立性较高 易扩展 ","tags":["Database"],"title":"数据库系统概论复习","url":"/2015/06/12/database-review/"},{"categories":"Code","date":1427329363,"kind":"page","lang":"zh-hans","objectID":"/2015/03/26/hexo-intor/","permalink":"https://xuanwo.io/2015/03/26/hexo-intor/","publishdate":"2015-03-26T00:22:43Z","relpermalink":"/2015/03/26/hexo-intor/","summary":"从2014年的八月份开始接触Hexo，一直用到现在，已经有半年的时间了。这期间，Hexo从2.X一路升级到了3.0，很多地方都发生了改变。不仅如此，很多原来使用Hexo的博主们写下了的教程并没有及时更新，导致后来人一头雾水，挫折感十足。因此，本文致力于提供一份足够简单，长期维护的基于Github Pages的Hexo博客搭建图文教程，希望能有所帮助。 当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过提交PR，发布issues或者在下方评论区评论等形式参与到本文档的编辑中来。浏览时，使用Ctrl+F搜索关键词。（是不是会有似曾相识的感觉，= =）\n","tags":["Software","Hexo","Github-Pages","Blog"],"title":"史上最详细的Hexo博客搭建图文教程","url":"/2015/03/26/hexo-intor/"},{"categories":"Code","date":1426700639,"kind":"page","lang":"zh-hans","objectID":"/2015/03/18/number-theory-quick-pow/","permalink":"https://xuanwo.io/2015/03/18/number-theory-quick-pow/","publishdate":"2015-03-18T17:43:59Z","relpermalink":"/2015/03/18/number-theory-quick-pow/","summary":"原始代码 int Pow(int A, int n) { if (n == 0) return 1; int rslt = 1; for (int i = 0; i \u0026lt; n; ++i) { rslt *= A; } return rslt; } ","tags":null,"title":"数论——快速幂","url":"/2015/03/18/number-theory-quick-pow/"},{"categories":"Code","date":1426698961,"kind":"page","lang":"zh-hans","objectID":"/2015/03/18/number-theory-sieve-method-to-find-primes/","permalink":"https://xuanwo.io/2015/03/18/number-theory-sieve-method-to-find-primes/","publishdate":"2015-03-18T17:16:01Z","relpermalink":"/2015/03/18/number-theory-sieve-method-to-find-primes/","summary":"暴力瞎搞求素数 首先，我们需要个判断是否为素数的算法：\nbool IsPrime(unsigned n) //此处n是一个大于2的整数 { for (unsigned i = 2; i \u0026lt; n / 2 + 1; ++i) { if (n % i == 0) { return false; } } return true; } ","tags":null,"title":"数论——筛法求素数","url":"/2015/03/18/number-theory-sieve-method-to-find-primes/"},{"categories":"Code","date":1426069951,"kind":"page","lang":"zh-hans","objectID":"/2015/03/11/number-theory-gcd/","permalink":"https://xuanwo.io/2015/03/11/number-theory-gcd/","publishdate":"2015-03-11T10:32:31Z","relpermalink":"/2015/03/11/number-theory-gcd/","summary":"欧几里得算法 介绍 欧几里得算法，又名辗转相除法，是求最大公约数的算法。两个整数的最大公约数是能够同时整除它们的最大的正整数。辗转相除法基于如下原理：两个整数的最大公约数等于其中较小的数和两数的差的最大公约数。例如，252和105的最大公约数是21（252 = 21 × 12；105 = 21 × 5）；因为252 − 105 = 147，所以147和105的最大公约数也是21。在这个过程中，较大的数缩小了，所以继续进行同样的计算可以不断缩小这两个数直至其中一个变成零。这时，所剩下的还没有变成零的数就是两数的最大公约数。 参考辗转相除法的演示动画：两条线段分别表示252和105，其中每一段表示21。动画演示了循环从大数中减去小数，直到其中一段的长度为0，此时剩下的一条线段的长度就是252和105的最大公约数。\n","tags":null,"title":"数论——欧几里得算法","url":"/2015/03/11/number-theory-gcd/"},{"categories":"Daily","date":1424299833,"kind":"page","lang":"zh-hans","objectID":"/2015/02/18/event-qingcould-plan/","permalink":"https://xuanwo.io/2015/02/18/event-qingcould-plan/","publishdate":"2015-02-18T22:50:33Z","relpermalink":"/2015/02/18/event-qingcould-plan/","summary":"青云是啥？ 想做中国的AWS：IaaS提供商QingCloud按“秒”计费实现弹性特征，瞄准中国的DevOps开发市场 国内创业公司QingCloud的魄力：做一个世界级的IaaS服务 青云B轮获2000万美元VC的背后逻辑：用技术超越巨头 个人认为对其的了解有助与我们信息管理专业的发展，所以尝试着联系了一下青云的有关人士。后来发现青云那边的人非常nice，非常热心，非常爽快的同意了我们的请求，所以开学后不久我们就可以出发啦。 青云在哪？ 地址：北京市朝阳区北苑路甲13号北辰新纪元大厦2号楼1503 公交路线：地铁13号线 → 地铁2号线 → 地铁5号线全程约1小时 五道口 3站 乘坐 地铁13号线(西直门方向), 在 西直门站 下车 420米 站内换乘 地铁2号线(内环) 4站 乘坐 地铁2号线(内环), 在 雍和宫站 下车 160米 站内换乘 地铁5号线(天通苑北方向) 6站 乘坐 地铁5号线(天通苑北方向), 在 北苑路北站 下车(A2西北口出) 350米 步行至 北辰新纪元2 去看什么？ 公司参观 员工分享个人经历 CEO分享关于云计算的理解 啥时候去？ 2015年3月19日14点 有啥收获？ 这个根据看到了什么而定，不过涨姿势肯定是有的~ 我想看看真正的服务器长啥样= =","tags":["Event"],"title":"青云参观计划","url":"/2015/02/18/event-qingcould-plan/"},{"categories":"Code","date":1423609885,"kind":"page","lang":"zh-hans","objectID":"/2015/02/10/cf-71a/","permalink":"https://xuanwo.io/2015/02/10/cf-71a/","publishdate":"2015-02-10T23:11:25Z","relpermalink":"/2015/02/10/cf-71a/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/71/A\n理解 刷水题，保持手指灵活性= =\n","tags":null,"title":"Codeforces Beta Round 65 A Way Too Long Words (Div. 2)","url":"/2015/02/10/cf-71a/"},{"categories":"Code","date":1423606044,"kind":"page","lang":"zh-hans","objectID":"/2015/02/10/cf-158a/","permalink":"https://xuanwo.io/2015/02/10/cf-158a/","publishdate":"2015-02-10T22:07:24Z","relpermalink":"/2015/02/10/cf-158a/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/158/A\n理解 水题\n","tags":null,"title":"VK Cup 2012 Qualification Round 1 A Next Round","url":"/2015/02/10/cf-158a/"},{"categories":"Code","date":1423320016,"kind":"page","lang":"zh-hans","objectID":"/2015/02/07/generate-a-ssh-key/","permalink":"https://xuanwo.io/2015/02/07/generate-a-ssh-key/","publishdate":"2015-02-07T14:40:16Z","relpermalink":"/2015/02/07/generate-a-ssh-key/","summary":"原文本来放在Hexo常见问题解决方案之中，但是由于步骤较多，理解起来比较困难，因此将本文独立出来单独成篇，以便于进行操作。\n","tags":["Hexo","Github-Pages","Blog"],"title":"使用Github SSH Key以免去Hexo部署时输入密码","url":"/2015/02/07/generate-a-ssh-key/"},{"categories":"Code","date":1423317651,"kind":"page","lang":"zh-hans","objectID":"/2015/02/07/travis-ci-hexo-autodeploy/","permalink":"https://xuanwo.io/2015/02/07/travis-ci-hexo-autodeploy/","publishdate":"2015-02-07T14:00:51Z","relpermalink":"/2015/02/07/travis-ci-hexo-autodeploy/","summary":"前两天了解到了一个有趣的概念叫持续集成：\n 持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。 然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？\n 在这样的指导思想下，我完成了上一篇文章：VPS搭配Github Webhook实现Hexo自动发布，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。\n好处  方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行hexo d -g的麻烦，更不必说文章增多之后渲染时间还会增长。 稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用Travis CI，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。 快捷：即使是出差在外，只要能编辑Markdown，就可以撰写博客，使得Hexo拥有类似于WP一致的体验~ 协作：博客的构建完全交由Travis CI进行，所以完全可以通过Hexo+git构建一个多人协作的博客平台。实际上，Hexo的官网正是这样构建的。 ","tags":["Hexo","Github-Pages","Blog"],"title":"使用Travis CI自动部署Hexo","url":"/2015/02/07/travis-ci-hexo-autodeploy/"},{"categories":"Code","date":1423178550,"kind":"page","lang":"zh-hans","objectID":"/2015/02/05/vps-hexo-autodeploy/","permalink":"https://xuanwo.io/2015/02/05/vps-hexo-autodeploy/","publishdate":"2015-02-05T23:22:30Z","relpermalink":"/2015/02/05/vps-hexo-autodeploy/","summary":"自从买了VPS之后，我的人生就多了一个需要思考的问题——我的VPS还能用来干嘛？然后想到Github有一个Webhook的功能，可以在每一次提交之后发送一个POST到指定的URL。那么，只要找一个办法获取这个POST，再执行指定的命令，可以实现Hexo的自动发布功能了。从此以后，不管在哪里，我只要修改我的md文件，push之后我的服务器就能自动进行编译并且部署了。\n","tags":["Blog","Github-Pages","VPS","Hexo"],"title":"VPS搭配Github Webhook实现Hexo自动发布","url":"/2015/02/05/vps-hexo-autodeploy/"},{"categories":"Code","date":1420593127,"kind":"page","lang":"zh-hans","objectID":"/2015/01/07/chaoxing-download/","permalink":"https://xuanwo.io/2015/01/07/chaoxing-download/","publishdate":"2015-01-07T01:12:07Z","relpermalink":"/2015/01/07/chaoxing-download/","summary":"我妹纸最近开始通过看超星学术视频来复习预习课程了，所以我必须搞到对应课程的所有视频（不管是收费还是免费），而且我妹纸还是一个有强迫症的萌妹纸，所有的视频都必须按照顺序拍的好好的，要不然她就会不舒服。 根据以上描述，我需要解决以下需求：\n 破解超星学术视频的加密链接，找到真实的下载链接。 重命名下载下来的视频文件。  还是跟以往一样，直接把最终的解决方案放出来，要是对具体的实现感兴趣的可以接着往下面看。\n","tags":["Software","C"],"title":"超星学术视频下载处理一条龙","url":"/2015/01/07/chaoxing-download/"},{"categories":"Code","date":1417020028,"kind":"page","lang":"zh-hans","objectID":"/2014/11/26/contest-cugb-cf7/","permalink":"https://xuanwo.io/2014/11/26/contest-cugb-cf7/","publishdate":"2014-11-26T16:40:28Z","relpermalink":"/2014/11/26/contest-cugb-cf7/","summary":"比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=63852#overview 比赛总结 这场比赛做的很渣，第一题卡了很久，还WA了两发。第二题一个裸的最短路模板题还折腾了半天。第三题是一个比较简单的数论题，用到了GCD。然后D和E都没有敲出来，其实D是一个要用到一点技巧的裸Nim。而E题。。。正面解法思绪繁杂，没有捋出来，而从结果入手开开脑洞倒是可以有点思路= =。 分题讲解 A题（暴力） 从前后分别入手求出和，然后对应进行判断即可。 http://xuanwo.io/2014/11/26/CF-18C/ B题（最短路） 模板题，注意路径的输出。 http://xuanwo.io/2014/11/26/CF-20C/ C题（数论） 用到了GCD，只要找出原来的最简比例就可以了。 http://xuanwo.io/2014/11/26/CF-16C/ D题（Nim博弈） 用到了很多异或的性质，位运算果然是一门大学问。 http://xuanwo.io/2014/11/26/CF-15C/ E题（DP，构造） 这个题= =，还没有办法证明。 http://xuanwo.io/2014/11/23/CF-15E/ 更新日志 2014年11月26日 完成题解。","tags":null,"title":"CF拉练第七场","url":"/2014/11/26/contest-cugb-cf7/"},{"categories":"Code","date":1417011900,"kind":"page","lang":"zh-hans","objectID":"/2014/11/26/cf-15c/","permalink":"https://xuanwo.io/2014/11/26/cf-15c/","publishdate":"2014-11-26T14:25:00Z","relpermalink":"/2014/11/26/cf-15c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/15/C\n理解 有n个矿场，第i个矿场有mi辆矿车，第一辆矿车有xi颗石头，第二辆xi+1颗，如此递推，直到第mi辆有mi+xi-1颗。然后有两个人轮流取石头（金矿？），他们可以选择任意一个矿场任意一辆矿车取走任意非0数量的石头，直到第一个不能再取的人认输。 实际上，这就是一个裸的Nim博弈问题，只要直接运用结论就能完成解答。但是问题在于，数据太多，导致每一个全都异或起来的话耗时太长。所以需要采用一些手段处理一下。我们需要用到两个结论：第一，从1异或到n的答案存在着这样一个特性：n%4==1时，答案为1；n%4==2时，答案为x+1；n%4==3时，答案为0；n%4==4时，答案为x。第二，从x异或到y的值等于nim(x-1)^nim(y)。 经过上述的处理，最后的结果就出来了~\n","tags":null,"title":"Codeforces Beta Round 15 C Industrial Nim","url":"/2014/11/26/cf-15c/"},{"categories":"Code","date":1417010651,"kind":"page","lang":"zh-hans","objectID":"/2014/11/26/cf-16c/","permalink":"https://xuanwo.io/2014/11/26/cf-16c/","publishdate":"2014-11-26T14:04:11Z","relpermalink":"/2014/11/26/cf-16c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/16/C\n理解 一道关于分辨率转化的问题。要求将一个大分辨率按照指定的宽高比进行转化，如果宽高比不符，则进行切割。首先，我们来求一个x和y的最大公约数d，然后分别令x=x/d，y=y/d，这样就得到了x和y之间最简的比例形式。然后a和b分别去除以x和y，得到的两个背书中去掉小数部分较小的那个，就是切割之后的倍数比。最后得到的结果就是符合要求的结果。\n","tags":null,"title":"Codeforces Beta Round 16 C Monitor (Div. 2 Only)","url":"/2014/11/26/cf-16c/"},{"categories":"Code","date":1417010358,"kind":"page","lang":"zh-hans","objectID":"/2014/11/26/cf-20c/","permalink":"https://xuanwo.io/2014/11/26/cf-20c/","publishdate":"2014-11-26T13:59:18Z","relpermalink":"/2014/11/26/cf-20c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/20/C\n理解 实际上题目不难，但是我们都捣鼓了很久。原因是我们根本就没有掌握这种算法，导致连一个输出路径都搞得这么蛋疼。使用邻接表来存储每一个节点，每一个节点都自带一个指针指向下一个节点（可以自己使用数组模拟），最后的结果倒过来输出即可。\n","tags":null,"title":"Codeforces Alpha Round 20 C Dijkstra? (Codeforces format)","url":"/2014/11/26/cf-20c/"},{"categories":"Code","date":1417007789,"kind":"page","lang":"zh-hans","objectID":"/2014/11/26/cf-18c/","permalink":"https://xuanwo.io/2014/11/26/cf-18c/","publishdate":"2014-11-26T13:16:29Z","relpermalink":"/2014/11/26/cf-18c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/18/C\n理解 题意很简单，把一个给定的数列分成两份，要求两份数字之和相等。直接暴力乱搞，预处理的时候用两个数组分别保存前后缀的数字之和，然后只要遍历一遍，就能得到最后的结果。\n","tags":null,"title":"Codeforces Beta Round 18 C Stripe (Div.2 Only)","url":"/2014/11/26/cf-18c/"},{"categories":"Code","date":1416912048,"kind":"page","lang":"zh-hans","objectID":"/2014/11/25/uva-272-tex-quotes/","permalink":"https://xuanwo.io/2014/11/25/uva-272-tex-quotes/","publishdate":"2014-11-25T10:40:48Z","relpermalink":"/2014/11/25/uva-272-tex-quotes/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=829\u0026amp;page=show_problem\u0026amp;problem=208\n理解 同样的，题目很简单。只需要考虑当前处理的是前面的还是后面的那个引号。\n","tags":null,"title":"UVa 272 TEX Quotes","url":"/2014/11/25/uva-272-tex-quotes/"},{"categories":"Code","date":1416911641,"kind":"page","lang":"zh-hans","objectID":"/2014/11/25/uva-10082-wertyu/","permalink":"https://xuanwo.io/2014/11/25/uva-10082-wertyu/","publishdate":"2014-11-25T10:34:01Z","relpermalink":"/2014/11/25/uva-10082-wertyu/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=829\u0026amp;page=show_problem\u0026amp;problem=1023\n理解 很简单的一道题，不过想了很久。我觉得需要注意的地方大概有三处：\n 不用自己手写所有情况的判断，使用一个字符串数组可以高效地解决问题。 可以采用一边读入一边处理的方法，不需要开一个数组来保存所有的数，更何况那样做还要处理空格和回车的问题。 读题的时候忽略了两处地方，多行以及没有QAZ这些字符，导致最后处理的时候出现了问题。 注意到这些，这道题就可以轻松A了。 ","tags":null,"title":"UVa 10082 WERTYU","url":"/2014/11/25/uva-10082-wertyu/"},{"categories":"Code","date":1416750617,"kind":"page","lang":"zh-hans","objectID":"/2014/11/23/cf-15e/","permalink":"https://xuanwo.io/2014/11/23/cf-15e/","publishdate":"2014-11-23T13:50:17Z","relpermalink":"/2014/11/23/cf-15e/","summary":"题目 源地址：\nhttp://codeforces.com/contest/15/problem/E\n理解 数学渣，这道题无从下手= =。为了方便能自己看出一些东西来，我打了前两项的表去CF提交，幸运地得到了n=6的解，结果是1354。这个结果印证了昨晚比赛时候我的一些想法，因为10=(2^2+1)*2，74=(6^2+1)*2，1354=(26^2+1)*2。也就是说，最后的结果一定是某一个数的平方加上一再乘二的结果。这样，这个问题就转化成了，如何找到那个数。我们可以看到，这个数组成的数列是2 6 26。考虑到最后的取模，这个数一定是指数级别的，要不然增长速度太慢了，作为一个未来的码农，想到的第一个数列就是2 4 8。乍一看感觉跟2 6 26扯不上关系，不过再观察一下，2 6 26向前递减之后可以得到另外一个衍生数列，也就是2 4 20。第一个反应就是20=4*5，但是对不上啊，4怎么处理？小脑一动，对啊，4=4*1。1和5跟原数列有什么关系呢？可以看到，1=4-3，5=8-3。 写到这里，脑子里面已经是一团浆糊了，我来列成表格梳理一下。\na c b 2 4 2 4 4 6 8 20 26 这样可以看出，a=pow(2,i)，c就等于c*(a-3)，明显，b=b+c。于是我就得到了最后的公式。 以上，是通过偷鸡往后再推了一项得到的题解，在实际的比赛中，一方面题目不会再给你下一项（CF倒是可以用这种方法骗答案），另一方面，真的比赛中思路也不会这么清晰。所以还是要学习正规的组合数学+DP的做法，在我学会之前，还是先挖一个坑吧= =。\n","tags":null,"title":"Codeforces Beta Round 15 E Triangles","url":"/2014/11/23/cf-15e/"},{"categories":"Code","date":1416679169,"kind":"page","lang":"zh-hans","objectID":"/2014/11/22/cf-6b/","permalink":"https://xuanwo.io/2014/11/22/cf-6b/","publishdate":"2014-11-22T17:59:29Z","relpermalink":"/2014/11/22/cf-6b/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/6/B\n理解 总统的办公室里面坐着他的副手，然后每个人都会有一张办公桌（长短不一，但每个人都有自己的颜色）。然后告诉你每个人的办公桌都是长方形，给定一个描述办公室布局的图，要你求出这个办公室里面总统的副手有几个。 一开始我想得太多，觉得应该用DFS来暴力搜索，只要判断总统办公桌的四周即可。后来发现这种方法是不可行，决定采用STL里面的pair+set来做。思路很简单，既然已经告诉我办公桌都是长方形的，那么，我只要找到总统办公桌所占的区域，然后直接遍历这块区域外围的一圈即可。\n","tags":null,"title":"Codeforces Beta Round 6 B President's Office (Div.2 Only)","url":"/2014/11/22/cf-6b/"},{"categories":"Code","date":1416610575,"kind":"page","lang":"zh-hans","objectID":"/2014/11/21/contest-cugb-cf6/","permalink":"https://xuanwo.io/2014/11/21/contest-cugb-cf6/","publishdate":"2014-11-21T22:56:15Z","relpermalink":"/2014/11/21/contest-cugb-cf6/","summary":"比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=63720#overview 比赛总结 做的好渣= =，跟SB一样卡B题的字符串卡半天。以后出问题了一定要仔细检查循环的初始值的问题。然后D题的脑洞大开也是神奇，后来学长提到了左偏树，有空一定要补一补。。 分题讲解 A题（暴力） 没啥好说的，暴力乱搞。 http://xuanwo.io/2014/11/21/CF-12A/ B题（暴力，排序） 写得很挫- -，暴力乱搞过了，应该是数据弱。。 http://xuanwo.io/2014/11/21/CF-12C/ C题（贪心） 想清楚区间与区间之间的关系，并不是很难。 http://xuanwo.io/2014/11/21/CF-14B/ D题（脑洞DP） 这个DP也是神了，其实并没有怎么用到DP的思想，关键在于结论是怎样得出的。 http://xuanwo.io/2014/11/21/CF-13C/ E题（树状数组） 一碰到数据结构就A不了，只会暴力乱搞和开脑洞，太弱了。 http://xuanwo.io/2014/11/21/CF-12D/ 更新日志 2014年11月21日 完成题解。","tags":null,"title":"CF拉练第六场","url":"/2014/11/21/contest-cugb-cf6/"},{"categories":"Code","date":1416609322,"kind":"page","lang":"zh-hans","objectID":"/2014/11/21/cf-12d/","permalink":"https://xuanwo.io/2014/11/21/cf-12d/","publishdate":"2014-11-21T22:35:22Z","relpermalink":"/2014/11/21/cf-12d/","summary":"题目 源地址：\nhttp://codeforces.com/contest/12/problem/D\n理解 一个很神奇的题目= =。 给你N个女人的Beauty，Intelect，Richness值。在i女人和j女人之间如果有Bi\u0026lt;Bj\u0026amp;\u0026amp;Ii\u0026lt;Ij\u0026amp;\u0026amp;Ri\u0026lt;Rj,那么i女人就会去自杀！。！问总共有多少个女人会自杀= =。（这心理是有多阴暗。。。。） 实际上感觉就是一个三维的排序，不过有些细节需要处理。 首先开一个结构体来保存b，i，r以及id号。然后对每一个女人的beauty值排序，然后将b值离散化，作为这个树状数组的下标。然后再对i值进行排序，这样，每次只要getmax(lady[j].id+1)，就能得到当前最大的女的r值。\n","tags":null,"title":"Codeforces Beta Round 12 D Ball (Div.2 Only)","url":"/2014/11/21/cf-12d/"},{"categories":"Code","date":1416607619,"kind":"page","lang":"zh-hans","objectID":"/2014/11/21/cf-13c/","permalink":"https://xuanwo.io/2014/11/21/cf-13c/","publishdate":"2014-11-21T22:06:59Z","relpermalink":"/2014/11/21/cf-13c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/13/C\n理解 给定一个序列，然后对于每一个数，你都可以进行自增或者自减操作。要求求出使得这个序列变为非减序列的最少操作次数。 我一开始的想法比较朴素，我想，只要找到一个比较的标准，比这个标准大我就\u0026ndash;，比这个标准小我就++，这样就能得到这个非减序列的最少次操作。然后我就开始寻找这样的标准，后来发现，这是一个不可能的任务。因为给定的序列什么可能都有，我没有办法来衡量每一个数对于整体值的重要程度，然后也没有办法来计算操作的次数。 没有思路之后就开始开脑洞了。很显然，我可以得到这样一个结论，对于一个序列中的某一个数而言，步数最少的，肯定是变成左边或者右边的那个数。如果再考虑到对于整体数列的影响（因为这是一个循环的过程，整个数列都有整体上移或者下移的趋势），这个数可能的取值，肯定是这个数列中已经存在的数。不难猜想，如果这个数变成的最后结果不是这个数列中的数，说明这个解一定不是最优解。（因为要么就多操作了，要么就少操作了。 这么说好像有点难懂，我来举一个栗子吧，就是数列4 1 9。很显然，我们一眼就能看出，最优解的状态应该是4 4 9，也就是这个1恰好变成了4。试想，如果1变成了3，状态变为 4 3 9，不合题意；如果1变成了5，状态变为4 5 9，符合题意，但是操作数多了1。那么问题来了，我变成3 3 9，难道不好吗？确实是这样，符合题意，而且结果最优。但是我们可以继续想，3 3 9可以，2 2 9可以吗？再继续，1 1 9可以吗？0 0 9可以吗？然后我们就能看出，位于4 4 9到1 1 9之间的数列都是可以的，超过了就不行了。这里的4和1，都是原来数列里面的数。我想，这或许并不是能不能问题，而是算法设计方便的问题。如果取原来数列的数，我们直接进行判断即可；如果不是，我们依然是要取原来数列里的数，判断是否在区间内。 根据上面的讨论，我们不妨得出这样的结论：对任何数进行的操作，最后的结果都是把它们变成原数列中的某个数。 解决了理论上的问题之后，下面进入实际的编码过程。直接开二维数组暴力搞的话，这个问题的时间复杂度过高，不可行。所以我们需要对原数组来一次sort，保证b数组是递增的。然后我们可以看到，dp的过程中，只会用到前后两个数，因此我们可以使用滚动数组来降低空间复杂度。这样，这个问题就得到解了。\n","tags":null,"title":"Codeforces Beta Round 13 C Sequence","url":"/2014/11/21/cf-13c/"},{"categories":"Code","date":1416606983,"kind":"page","lang":"zh-hans","objectID":"/2014/11/21/cf-14b/","permalink":"https://xuanwo.io/2014/11/21/cf-14b/","publishdate":"2014-11-21T21:56:23Z","relpermalink":"/2014/11/21/cf-14b/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/14/B\n理解 一个摄影师要拍摄运动员比赛的照片，然后给定摄影师的坐标，以及每一位运动员的活动范围。要求计算出摄影是需要活动的最小步数。 首先我们需要对输入的数据进行一次处理，也就是必须保证左端比右段小。处理完毕之后，两端分别进行sort，这样就得到了运动员活动范围的起点和终点的有序列。显然，只有当最大的起点比最小的终点还小的时候，摄影师才有可能同时看到。然后，如果当前摄影师的坐标比最大的起点小，他只要移动到最大起点即可；如果当前摄影师的坐标比最小的终点大，他就需要移动到最小终点。 这样，我们就得到了摄影师需要移动的距离。\n","tags":null,"title":"Codeforces Beta Round 14 B Young Photographer (Div. 2)","url":"/2014/11/21/cf-14b/"},{"categories":"Code","date":1416606847,"kind":"page","lang":"zh-hans","objectID":"/2014/11/21/cf-12c/","permalink":"https://xuanwo.io/2014/11/21/cf-12c/","publishdate":"2014-11-21T21:54:07Z","relpermalink":"/2014/11/21/cf-12c/","summary":"题目 源地址：\nhttp://codeforces.com/contest/12/problem/C\n理解 题意并不复杂：给定一些标价牌，然后再给定一些水果的名字，每种水果对应一个标价牌。要求输出水果总价的最大值和最小值。 第一眼感觉很简单，贪心乱搞。标价牌排序之后，如果求最小值就从前往后选；如果求最大值，就从后往前选。这个思路没有太大的问题，然后问题来了，我怎么样才能够得到一个去除重复项，并且能计算出每种水果数量的数据结构呢？ 然后我就开始SB了，因为循环的时候字符串写得搓，debug半天，都不符合我的预期。等到队友们基本都过了，我才勉强A题。\n","tags":null,"title":"Codeforces Beta Round 12 C Fruits (Div.2 Only)","url":"/2014/11/21/cf-12c/"},{"categories":"Code","date":1416606264,"kind":"page","lang":"zh-hans","objectID":"/2014/11/21/cf-12a/","permalink":"https://xuanwo.io/2014/11/21/cf-12a/","publishdate":"2014-11-21T21:44:24Z","relpermalink":"/2014/11/21/cf-12a/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/12/A\n理解 问题很简单，要求判断是不是一个中心对称的图形。 直接暴力搞，判断了六次。\n","tags":null,"title":"Codeforces Beta Round 12 A Super Agent (Div.2 Only)","url":"/2014/11/21/cf-12a/"},{"categories":"Code","date":1416412758,"kind":"page","lang":"zh-hans","objectID":"/2014/11/19/contest-cugb-cf4/","permalink":"https://xuanwo.io/2014/11/19/contest-cugb-cf4/","publishdate":"2014-11-19T15:59:18Z","relpermalink":"/2014/11/19/contest-cugb-cf4/","summary":"比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=62931#overview 比赛总结 这场比赛开的时候，我还在南京= =，并没有好好做，过了水题之后就没有继续往下做了。 剩下的都是赛后补的题，不过自己的DP确实弱，很多都是自己想不明白，一看题解就懂。 分题讲解 A题（阅读题） 题意理解题，只要读懂题目就能A，并不是很难。 http://xuanwo.io/2014/11/13/CF-9A/ B题（字符串） C题（模拟） 感觉也是题意理解题，没有什么算法，只要模拟出翻面的操作就可以。 http://xuanwo.io/2014/11/13/CF-7A/ D题（扩展欧几里得） 用到了扩展欧几里得，模板题。 http://xuanwo.io/2014/11/19/CF-7C/ E题（状态压缩DP） 一开始不是特别明白，折腾了很久才看懂这个递推的公式。 http://xuanwo.io/2014/11/19/CF-8C/ 更新日志 2014年11月19日 初稿。","tags":null,"title":"CF拉练第四场","url":"/2014/11/19/contest-cugb-cf4/"},{"categories":"Code","date":1416402703,"kind":"page","lang":"zh-hans","objectID":"/2014/11/19/cf-8c/","permalink":"https://xuanwo.io/2014/11/19/cf-8c/","publishdate":"2014-11-19T13:11:43Z","relpermalink":"/2014/11/19/cf-8c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/8/C\n理解 群里面讨论时，萌神说是一个状态压缩DP，然后我就主动放弃了这道题= =。 实际上，如果用枚举的方法来更新DP，肯定会超时的，有一个小小的技巧在于，小女孩拿东西是没有顺序的。然后在每一次拿东西的时候，都需要更新出两个状态，一种是只拿一个，另一种是拿两个。\n","tags":null,"title":"Codeforces Beta Round 8 C Looking for Order","url":"/2014/11/19/cf-8c/"},{"categories":"Code","date":1416393615,"kind":"page","lang":"zh-hans","objectID":"/2014/11/19/cf-7c/","permalink":"https://xuanwo.io/2014/11/19/cf-7c/","publishdate":"2014-11-19T10:40:15Z","relpermalink":"/2014/11/19/cf-7c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/7/C\n理解 扩展欧几里得算法的模板题。 题意很简单，给定方程Ax + By + C = 0。要求满足该方程的两个整数解x，y。 通过简单的变形之后就可以得到x = x*(-C/gcd(A,B)) , y = y*(-C/gcd(A,B))。\n","tags":null,"title":"Codeforces Beta Round 7 C Line","url":"/2014/11/19/cf-7c/"},{"categories":"Code","date":1416157935,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/uva-10003-cutting-sticks/","permalink":"https://xuanwo.io/2014/11/16/uva-10003-cutting-sticks/","publishdate":"2014-11-16T17:12:15Z","relpermalink":"/2014/11/16/uva-10003-cutting-sticks/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=944\n理解 之前在COJ上好像做过类似的题目。 同样是木材切割，不过这次每次切割都会消耗跟木棒长度相同的代价，要求的是最小代价的切割。 小脑一动就可以知道，存在递推公式： dp[x][y]=min(dp[x][y],dp[x][a[k]]+dp[a[k]][y]+y-x)\n","tags":null,"title":"UVa 10003 Cutting Sticks","url":"/2014/11/16/uva-10003-cutting-sticks/"},{"categories":"Code","date":1416155637,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/uva-11400-lighting-system-design/","permalink":"https://xuanwo.io/2014/11/16/uva-11400-lighting-system-design/","publishdate":"2014-11-16T16:33:57Z","relpermalink":"/2014/11/16/uva-11400-lighting-system-design/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=2395\n理解 变量多的题目确实头疼，我来稍微捋一下。 题目中给出n中灯泡，不同的灯泡要用不同的电源，相同的灯泡可以使用相同的电源。然后每种灯泡有着四种参数，电压v，电源费用k，每个灯泡的费用c，所需要的该种灯泡的数量l。小脑一动就能明白，每次更换只会采用同一种灯泡，因为不同中灯泡的话要买两种电源，一定不是最优解。 这样的话，按照电压进行排序之后，可以得到递推公式： dp[i]=min(dp[i], dp[j]+(sum[i]-sum[j])*s[i].c+s[i].k) 其中sum[i]=sum[i-1]+s[i].l;\n","tags":null,"title":"UVa 11400 Lighting System Design","url":"/2014/11/16/uva-11400-lighting-system-design/"},{"categories":"Code","date":1416154608,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/uva-12563-jin-ge-jin-qu-hao/","permalink":"https://xuanwo.io/2014/11/16/uva-12563-jin-ge-jin-qu-hao/","publishdate":"2014-11-16T16:16:48Z","relpermalink":"/2014/11/16/uva-12563-jin-ge-jin-qu-hao/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=4008\n理解 ~看完题目的名字就情不自禁的笑了= =。~ 这就是一个变形的背包问题：在t-1的时间内，最多可以选择多少歌曲使得歌曲数最多并且播放时间最长，差不多可以类比于ACM竞赛中的AC数和罚时。先比较播放歌曲数，取歌曲数较多者；如果歌曲数相同，比较播放时长，取播放时间较长的。 处理之后，就成了一个背包+一些判断的问题。\n","tags":null,"title":"UVa 12563 Jin Ge Jin Qu hao","url":"/2014/11/16/uva-12563-jin-ge-jin-qu-hao/"},{"categories":"Code","date":1416152387,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/uva-116-unidirectional-tsp/","permalink":"https://xuanwo.io/2014/11/16/uva-116-unidirectional-tsp/","publishdate":"2014-11-16T15:39:47Z","relpermalink":"/2014/11/16/uva-116-unidirectional-tsp/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=52\n理解 这道题和之前做过的一道求最大四位数和有点像。那道题我是用暴力+乱搞过得，这道题则是用了刚学的DP。 不用看题，光是看图和样例就能明白大概的题意：给定一个m*n的矩阵，要求从左往右依次选择n个数，使得这n个数的和最小。不过存在这样的限制条件：首先，每次都只能选择当前数的相邻数，也就是右上，右方，右下；其次，要求字典序最小。 找到这样的一个序列并不难，不过要求输出字典序最小的就有点麻烦。通过从右向左来扫描，就能解决这样的问题。\n","tags":null,"title":"UVa 116 Unidirectional TSP","url":"/2014/11/16/uva-116-unidirectional-tsp/"},{"categories":"Code","date":1416148527,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/uva-1347-tour/","permalink":"https://xuanwo.io/2014/11/16/uva-1347-tour/","publishdate":"2014-11-16T14:35:27Z","relpermalink":"/2014/11/16/uva-1347-tour/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=4093\n理解 给出n个定点，要求计算出连接这些点的最短闭合路径。 使用dp[i][j]来保存从i到1再从1到j的最短距离。然后可以得到这样两条递推公式：\ndp[i][i-1]=min(dp[i][i-1],dp[i-1][j]+dis(i,j)); dp[i][j]=dp[i-1][j]+dis(i,i-1); 最后的结果就是遍历一遍dp[n][i]+dis(n,i)，找到最小值。\n","tags":null,"title":"UVa 1347 Tour","url":"/2014/11/16/uva-1347-tour/"},{"categories":"Code","date":1416143170,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/contest-cugb-cf5/","permalink":"https://xuanwo.io/2014/11/16/contest-cugb-cf5/","publishdate":"2014-11-16T13:06:10Z","relpermalink":"/2014/11/16/contest-cugb-cf5/","summary":"比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=62933#overview 比赛总结 前面被BC艹了一顿爆零之后，这场手感还不错。好多都是暴力+乱搞的题目，打得还行。不过自己的DP还是太弱，那场DP还得好好补，要不然像E这种题目只能看人品。 分题讲解 A题（字符串） 贪心+乱搞，水过的题目。为了抢时间都没有测数据，幸运1A。 http://xuanwo.io/2014/11/16/CF-11A/ B题（进制转换） 机智+乱搞。 这个题正好跟前面那场BC有点像，能过也有点运气成分。不过思路出来之后敲得有点慢，这个是弱点。水题要出的快，出的稳，这样才能保住铜牌，233333。 http://xuanwo.io/2014/11/16/CF-9C/ C题（暴力） 暴力+乱搞。 这道题只要能正确的找出导致BUG的两类情况就能A，我少考虑了一种，WA了一发，2A。 http://xuanwo.io/2014/11/16/CF-8B/ D题（字符串Hash，DP） 字符串Hash+乱搞。 开了一个好几个50万的数组乱搞，感谢CF不限制内存占用= =。 http://xuanwo.io/2014/11/16/CF-7D/ E题（神DP） 有一个神奇的递推公式，猜一猜，看RP，赛后出证明。 http://xuanwo.io/2014/11/16/CF-9D/ 更新日志 2014年11月16日 完成题解。","tags":null,"title":"CF拉练第五场","url":"/2014/11/16/contest-cugb-cf5/"},{"categories":"Code","date":1416138072,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/cf-9d/","permalink":"https://xuanwo.io/2014/11/16/cf-9d/","publishdate":"2014-11-16T11:41:12Z","relpermalink":"/2014/11/16/cf-9d/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/9/D\n理解 神DP，给战斗民族的数学功底跪了。 一个二叉搜索树，要求左子树的和小于右子树，问存在多少个这样的数。由题意可以推出这样一个结论：左子树的和小于右子树，只要左子树的最大值小于右子树的最大值即可，因为2^0+2^1+2^p-1\u0026lt;2^p。 所以在求dp[i][j]~（dp[i][j]表示i个点组成高度小于等于j的树的总数）~的时候，有两种情况：\n 子树的中n-1个点权在左子树，要么全在右子树，这样的话就没有条件限制了。 如果左右子树都有，那么最大的肯定要放在右子树上，所以除了当前根和最大的点，其他点（总共i-2个）随便取 ,枚举左子树最多放几个,右子树最多放几个就可以推出来。 转移转移方程为：dp[i][j]+=dp[k][j-1]*dp[i-k-1][j-1] ","tags":null,"title":"Codeforces Beta Round 9 D How many trees? (Div.2 Only)","url":"/2014/11/16/cf-9d/"},{"categories":"Code","date":1416137362,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/cf-7d/","permalink":"https://xuanwo.io/2014/11/16/cf-7d/","publishdate":"2014-11-16T11:29:22Z","relpermalink":"/2014/11/16/cf-7d/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/7/D\n理解 被引入的新概念吓到了= =，其实这道题就是一个求最大回文串的问题。 不过按照这个数据量，每一次都进行strcmp肯定不现实，所以我们需要一个好的字符串hash（的板子）。预处理之后，分别计算前缀和后缀的hash值。如果hash值相等，说明前缀和后缀相同，它们的度数就是长度/2再加上一。然后结果就是度数的和。\n  字符串hash的时候那个素数开大一点比较好，不用去处理hash冲突，23333。\n","tags":null,"title":"Codeforces Beta Round 7 D Palindrome Degree","url":"/2014/11/16/cf-7d/"},{"categories":"Code","date":1416136573,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/cf-8b/","permalink":"https://xuanwo.io/2014/11/16/cf-8b/","publishdate":"2014-11-16T11:16:13Z","relpermalink":"/2014/11/16/cf-8b/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/8/B\n理解 在那遥远的地方有位好姑娘 ，人们走过她的帐篷都要留恋的张望 23333，不逗比了，真正的题解开始。 在一个无穷大的平面上，有一个机器人可以自由地上下左右移动。然后在它移动的路径上，你可以给它设置任意个障碍。如果存在一种障碍的设计，使得机器人的移动路径是最短路径，则OK；如果不存在，则存在BUG。 这道题写得很逗= =。一开始作死用switch来写，不过在字符的判断上好像写搓了，怎么写都是BUG。后来想到可以用一个vis来标记机器人走过的路径，如果存在一个点被访问过两次，那么这个路径一定不是最短路径。不过这份代码挂了，原因是还存在另外一种可能，比如：URD。也就是说，只要形成一个类似于U的结构，也一定不是最短路径。一时半会儿没想出来什么高效的方案，干脆暴力敲了一个。设一个flag出来，然后每走一个点，就四个方向判断一下是否访问过，如果flag\u0026gt;=2，说明一定是BUG。 多亏了CF机子好，居然过了，也是RP好。\n","tags":null,"title":"Codeforces Beta Round 8 B Obsession with Robots","url":"/2014/11/16/cf-8b/"},{"categories":"Code","date":1416135948,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/cf-9c/","permalink":"https://xuanwo.io/2014/11/16/cf-9c/","publishdate":"2014-11-16T11:05:48Z","relpermalink":"/2014/11/16/cf-9c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/9/C\n理解 题意不难理解。给定一个n，要你求出从0到n有多少个仅用0和1能表示出来的数。 想法很简单，我们先来处理最为简化的情况，如果给定一个二进制数，我们要求出比这个小的二进制数的个数有多少。小脑一动，我们就能知道，这个个数就是这个二进制数转化为十进制数的大小。 那么问题来了，给定一个十进制数，我们怎样才能求出这个最大的二进制数呢？其实我们可以这样来处理：每一位都有三种情况，0或者1或者大于1。0和1不需要进行任何操作，如果大于1，我们则把从这一位起的每一位都变成1。这样处理之后，我们就得到了最大的二进制数。然后就是一个简单的进制转换问题。\n  其实当天晚上的BestCoder 18的1003题跟这个有点像，不过做BC的时候，我没有捋清楚思路，最后还是没有敲出来。不过多亏被虐了一发，这道题才顺利地推出了结论。\n","tags":null,"title":"Codeforces Beta Round 9 C Hexadecimal's Numbers (Div.2 Only)","url":"/2014/11/16/cf-9c/"},{"categories":"Code","date":1416134744,"kind":"page","lang":"zh-hans","objectID":"/2014/11/16/cf-11a/","permalink":"https://xuanwo.io/2014/11/16/cf-11a/","publishdate":"2014-11-16T10:45:44Z","relpermalink":"/2014/11/16/cf-11a/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/11/A\n理解 给定一个序列，给定一个递增值。要求计算出最少需要多少步，能将这个序列变为递增数列。 第一个想法就是贪心，甚至都不需要读完数列，直接在输入时处理就可以了。\n","tags":null,"title":"Codeforces Beta Round 11 A Increasing Sequence","url":"/2014/11/16/cf-11a/"},{"categories":"Code","date":1416051233,"kind":"page","lang":"zh-hans","objectID":"/2014/11/15/uva-11584-partitioning-by-palindromes/","permalink":"https://xuanwo.io/2014/11/15/uva-11584-partitioning-by-palindromes/","publishdate":"2014-11-15T11:33:53Z","relpermalink":"/2014/11/15/uva-11584-partitioning-by-palindromes/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=465\u0026amp;page=show_problem\u0026amp;problem=2631\n理解 原谅我是一个乐盲，看到乐谱就吓出翔，不敢看了= =。 实际上，题意很简单，就是将一个字符串分割为尽量少的串，使得每一个串都是回文串。 一个简单的DP递推。\n","tags":null,"title":"UVa 11584 Partitioning by Palindromes","url":"/2014/11/15/uva-11584-partitioning-by-palindromes/"},{"categories":"Code","date":1416049463,"kind":"page","lang":"zh-hans","objectID":"/2014/11/15/uva-1025-a-spy-in-the-metro/","permalink":"https://xuanwo.io/2014/11/15/uva-1025-a-spy-in-the-metro/","publishdate":"2014-11-15T11:04:23Z","relpermalink":"/2014/11/15/uva-1025-a-spy-in-the-metro/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=3466\n理解 其实题目还是蛮吓人的= =，因为上来就是Line1~7的输入。其实题意不难，有从左到右编号为1~n的车站，有m1辆车从第1站往右开，有m2辆车从第2站往左开。主角在t=0的时候从第1站出发，要在t时刻遇见车站n的一个间谍。要求求出最短的等待时间，没有的话就输出impossible。 小脑一动，可以知道，每一次有三个选择：等待，向左，向右。我们可以用dp[t][i]来表示第t时刻在第i个车站，然后用vis[t][i][sta]来表示三种选择。全部预处理一遍之后，dp求解最短时间即可。\n","tags":null,"title":"UVa 1025 A Spy in the Metro","url":"/2014/11/15/uva-1025-a-spy-in-the-metro/"},{"categories":"Code","date":1415907299,"kind":"page","lang":"zh-hans","objectID":"/2014/11/13/cf-7a/","permalink":"https://xuanwo.io/2014/11/13/cf-7a/","publishdate":"2014-11-13T19:34:59Z","relpermalink":"/2014/11/13/cf-7a/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/7/A\n理解 同样是理解题- -。 给定一个被黑白棋子占满的棋盘，能进行的操作为将一行或者一列由黑色变白色，问最少需要多少步，能将棋盘全都变为白色。 一开始感觉应该用DFS来做，但是想了想，其实用模拟就能搞定。思路很简单，只要用两层循环，由上到下，由左到右，判断是否为B。如果是B，则有tmp++；如果不是，则继续。再然后，判断tmp是不是等于8，如果是，则进行一次行的翻转，如果不是，则列的翻转数为tmp。\n","tags":null,"title":"Codeforces Beta Round 7 A Kalevitch and Chess","url":"/2014/11/13/cf-7a/"},{"categories":"Code","date":1415892585,"kind":"page","lang":"zh-hans","objectID":"/2014/11/13/cf-9a/","permalink":"https://xuanwo.io/2014/11/13/cf-9a/","publishdate":"2014-11-13T15:29:45Z","relpermalink":"/2014/11/13/cf-9a/","summary":"题目 源地址：\nhttp://codeforces.com/contest/9/problem/A\n理解 阅读题= =，实际上，只要Dot的点数比其他两个人中大的那个人大就行。 直接用switch搞定。\n","tags":null,"title":"Codeforces Beta Round 9 A Die Roll (Div.2 Only)","url":"/2014/11/13/cf-9a/"},{"categories":"Code","date":1415355592,"kind":"page","lang":"zh-hans","objectID":"/2014/11/07/contest-cugb-cf2/","permalink":"https://xuanwo.io/2014/11/07/contest-cugb-cf2/","publishdate":"2014-11-07T10:19:52Z","relpermalink":"/2014/11/07/contest-cugb-cf2/","summary":"比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=62027#overview 比赛总结 水掉A和B之后，就卡在了C和D上。C只是一个变形的最长上升子序列，却没有敲出来；D题是卡了半天，输出各种理解错，一直到还有20分钟结束的时候才过，这时候已经没有时间看E了。不过赛后了看，反正我也过不了E，23333。 分题讲解 A题（模拟） 没啥好说的，其实根本就不用判断人名是否相同。 http://xuanwo.io/2014/11/05/CF-5A/ B题（模拟，字符串） 注意理解题意，是左右摆动以保持平衡。 http://xuanwo.io/2014/11/05/CF-5B/ C题（LIS） 稍微变形一下的最长上升子序列就写不出来，说明做题太死板，不懂变通，要加强。 http://xuanwo.io/2014/11/07/CF-4D/ D题（贪心） 小心输出上的trick= =。 http://xuanwo.io/2014/11/07/CF-3B/ E题（几何） 论开脑洞的重要性，没有完善的证明。 http://xuanwo.io/2014/11/06/CF-2C/ 更新日志 2014年11月7日 完成题解。","tags":null,"title":"CF拉练第二场","url":"/2014/11/07/contest-cugb-cf2/"},{"categories":"Code","date":1415355527,"kind":"page","lang":"zh-hans","objectID":"/2014/11/07/cf-3b/","permalink":"https://xuanwo.io/2014/11/07/cf-3b/","publishdate":"2014-11-07T10:18:47Z","relpermalink":"/2014/11/07/cf-3b/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/3/B\n理解 读懂题略微花了一点时间，主要是生词多，有点吓人= =。有一辆卡车，要装载一些船只，有1和2两种。然后给出n个船的类型和容积，要求给定卡车体积v的情况下，装载的船的最大容积。 一开始的想法是理解成一个背包问题，但是给的v太大，用DP处理可能会超时。后来就用简单一点的思路，直接暴力贪心。把两种船分开，分别进行排序。小脑一动就能明白，最优解肯定是选取价值高的，然后枚举选择i只1船，则选择2船只的个数就是min((v - i) / 2, tc)其中tc为2船总个数。 输出上有一个trick，就是每个编号之间都有一个空格= =，因此WA一发。。\n","tags":null,"title":"Codeforces Beta Round 3 B Lorry","url":"/2014/11/07/cf-3b/"},{"categories":"Code","date":1415354724,"kind":"page","lang":"zh-hans","objectID":"/2014/11/07/cf-4d/","permalink":"https://xuanwo.io/2014/11/07/cf-4d/","publishdate":"2014-11-07T10:05:24Z","relpermalink":"/2014/11/07/cf-4d/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/4/D\n理解 题目好像是俄罗斯套娃的二维版，就是求一个二维的最长上升子序列问题。 只要按照其中一个变量排序，然后求第二个变量的最长上升子序列即可。\n","tags":null,"title":"Codeforces Beta Round 4 D Mysterious Present","url":"/2014/11/07/cf-4d/"},{"categories":"Code","date":1415317226,"kind":"page","lang":"zh-hans","objectID":"/2014/11/06/cf-2c/","permalink":"https://xuanwo.io/2014/11/06/cf-2c/","publishdate":"2014-11-06T23:40:26Z","relpermalink":"/2014/11/06/cf-2c/","summary":"题目 源地址：\nhttp://codeforces.com/contest/2/problem/C\n理解 题意很清楚，就是给定三个点，要求出一个点到这三个点的视角相同。要是存在多个这样的点，则选择那个视角最大的点。\n  小科普——视角 定圆O和不在O上的定点A，从A向O引两条切线，这两条切线所形成的角可以看做视角。 又因为已知O的半径r和OA的长，显然，视角的大小为2*asin(r/OA)，也能够利用sin(r/OA)的值来衡量。\n做法很神= =，首先找出这个三个点构成的三角形的圆心，然后计算出sin(r/OA)的值，然后分别在上下左右探测，看看哪个值更小。如此循环，直到step的值小于eps就能输出了。\n","tags":null,"title":"Codeforces Beta Round 2 C Commentator problem","url":"/2014/11/06/cf-2c/"},{"categories":"Code","date":1415283490,"kind":"page","lang":"zh-hans","objectID":"/2014/11/06/uva-11093-just-finish-it-up/","permalink":"https://xuanwo.io/2014/11/06/uva-11093-just-finish-it-up/","publishdate":"2014-11-06T14:18:10Z","relpermalink":"/2014/11/06/uva-11093-just-finish-it-up/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=2034\n理解 比赛的时候没有敲出来。 当时看范神拿了一血，默默地去看题。然后觉得应该跟小白书上那个加油站的优先队列是一样的题目，敲了一会儿之后感觉不对，然后就放弃了这道题。后来想想，这两道题的区别在于，一个是环形的路线，一个是单向的路径，处理的方法应该是不一致的。比赛过后想到，其实就算是环形，也是可以处理成单向问题的。只要开一个两倍MAXN的数组，然后从起点开始截取n个数，就能将一个环从起点处截成一条直线。然后就能用类似的办法进行处理了。 具体的实现过程是这样：只要用一个数组保存可以添加的油量，然后不断减去消耗的油量，然后再不断进行求和。很显然，当a[i]\u0026gt;=start时，这个站点时可以通过的；当a[i]\u0026lt;start时，这个站点是不可通过的。然后再遍历寻找字典序最小的起点。\n","tags":null,"title":"UVa 11093 Just Finish it up","url":"/2014/11/06/uva-11093-just-finish-it-up/"},{"categories":"Code","date":1415218308,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/uva-12627-erratic-expansion/","permalink":"https://xuanwo.io/2014/11/05/uva-12627-erratic-expansion/","publishdate":"2014-11-05T20:11:48Z","relpermalink":"/2014/11/05/uva-12627-erratic-expansion/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=4352\n理解 因为有图，所以题意还是蛮清楚的。求给定时间，给定范围中气球的个数= =。 也是我心比天高太年轻，试图直接把红球个数和n关系直接撸出来，后来发现着实有点困难。不过发现每当过去一小时，这一行的红球数都会变为原来的两倍。这样问题就变得简单了起来，我只要使用一次递归分治就可以了~\n","tags":null,"title":"UVa 12627 Erratic Expansion","url":"/2014/11/05/uva-12627-erratic-expansion/"},{"categories":"Code","date":1415217981,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/uva-10954-add-all/","permalink":"https://xuanwo.io/2014/11/05/uva-10954-add-all/","publishdate":"2014-11-05T20:06:21Z","relpermalink":"/2014/11/05/uva-10954-add-all/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=onlinejudge\u0026amp;page=show_problem\u0026amp;problem=1895\n理解 很明显的一道水题，不过我WA了一发。 我一开始觉得，我可以把每个数重复计算的次数加进去，然后很快写完了一个程序，但是报了WA。稍微查了一会儿之后，感觉没有什么问题，又因为很多人过了，于是推倒用优先队列重新写了一发。\n","tags":null,"title":"UVa 10954 Add All","url":"/2014/11/05/uva-10954-add-all/"},{"categories":"Code","date":1415217106,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/uva-1471-defense-lines/","permalink":"https://xuanwo.io/2014/11/05/uva-1471-defense-lines/","publishdate":"2014-11-05T19:51:46Z","relpermalink":"/2014/11/05/uva-1471-defense-lines/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=4217\n理解 不理会逗比的国王们= =，题意很清楚，给定一个序列，要求删除一段连续的序列之后，剩下的连续递增序列最长，要求输出满足题意的序列的长度。 在初始化的时候，就可以设数组l[MAXN]，r[MAXN]来分别保存从左起和从右起的最长递增序列的长度。然后用STL内置的二分来寻找链接的地方，lower_bound(Min + 1, Min + 1 + n, a[i])，返回在数组Min[1~n+1]中比a[i]大的第一个数的位置。在for循环中不断更新ans的值，使得最后的结果一定最长的序列。\n","tags":null,"title":"UVa 1471 Defense Lines","url":"/2014/11/05/uva-1471-defense-lines/"},{"categories":"Code","date":1415216331,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/uva-11572-unique-snowflakes/","permalink":"https://xuanwo.io/2014/11/05/uva-11572-unique-snowflakes/","publishdate":"2014-11-05T19:38:51Z","relpermalink":"/2014/11/05/uva-11572-unique-snowflakes/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=2619\n理解 题意是酱紫的：给定一组数，叫你求出不含有重复数字的最长子序列的长度。 使用数组pos[x]记录数字x第一次出现的位置，初始化为-1。枚举这个数列，依次记录每一个数的位置。然后用start标记当前这个子序列的起点。显然的，当枚举到i的时候，如果有pos[arr[i]]\u0026lt;start，说明这个数肯定在[start, i-1]之间出现过。此时就停止本次枚举，要是pos[arr[i]]\u0026gt;start，则长度+1，并且进行下一次枚举。直到结束，最后的长度一定是最长的子序列。\n","tags":null,"title":"UVa 11572 Unique Snowflakes","url":"/2014/11/05/uva-11572-unique-snowflakes/"},{"categories":"Code","date":1415216071,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/uva-11054-wine-trading-in-gergovia/","permalink":"https://xuanwo.io/2014/11/05/uva-11054-wine-trading-in-gergovia/","publishdate":"2014-11-05T19:34:31Z","relpermalink":"/2014/11/05/uva-11054-wine-trading-in-gergovia/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=1995\n理解 我又逗了= =，想得太复杂。 其实不管两个村庄距离有多远或者是他们的需求量有多大，每个村庄实际上都只能跟最近的两个村庄交易，因为运输的时候会经过每一个村庄。因此直接搞就可以了。\n","tags":null,"title":"UVa 11054 Wine trading in Gergovia","url":"/2014/11/05/uva-11054-wine-trading-in-gergovia/"},{"categories":"Code","date":1415215890,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/uva-1152-4-values-whose-sum-is-0/","permalink":"https://xuanwo.io/2014/11/05/uva-1152-4-values-whose-sum-is-0/","publishdate":"2014-11-05T19:31:30Z","relpermalink":"/2014/11/05/uva-1152-4-values-whose-sum-is-0/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=3593\n理解 题意非常清楚，就是在一个矩阵里面找出四个数，使得他们的和为零。 一开始的想法是DFS，把这个看成一个四层的图，不停搜索就行了。但是DFS写得太搓了，各种姿势挂，后来决定二分暴力乱搞。 思路是这样，把这个矩阵分成左右两份，然后只要一个两层的for循环，就能用两个数组保存下所有可能出现的数字组合的和。有一个小小的技巧是，第二份在保存的时候保存为他们的负数，这样在后面的二分中，只要判断是不是相等就可以了，减少了计算量。 最后感慨一下，一千六百万的数组也能开的出来= =。\n","tags":null,"title":"UVa 1152 4 Values whose Sum is 0","url":"/2014/11/05/uva-1152-4-values-whose-sum-is-0/"},{"categories":"Code","date":1415214654,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/uva-1605-building-for-un/","permalink":"https://xuanwo.io/2014/11/05/uva-1605-building-for-un/","publishdate":"2014-11-05T19:10:54Z","relpermalink":"/2014/11/05/uva-1605-building-for-un/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=4480\n理解 题意要求安排出一个设计方案，使得每一个国家都相邻。 乍一看很复杂，但其实只要构造两层，第一层中第i行都是i国家，第二层中第i列都是i国家，就能满足题意。 额，算是机智题？\n","tags":null,"title":"UVa 1605 Building for UN","url":"/2014/11/05/uva-1605-building-for-un/"},{"categories":"Code","date":1415202195,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/cf-5b/","permalink":"https://xuanwo.io/2014/11/05/cf-5b/","publishdate":"2014-11-05T15:43:15Z","relpermalink":"/2014/11/05/cf-5b/","summary":"题目 源地址：\nhttp://codeforces.com/contest/5/problem/B\n理解 题目不难，不过输出上有点问题，因为题目要求左右均匀分布，上一次偏左则下一次需要偏右。 当总长度为偶数的时候，没有太大的问题；但是当总长度为奇数时，则需要考虑到底应该偏左还是偏右的问题。那么就需要两次判断，首先判断总长度，也就是最大长度是不是 偶数，当总长度不是偶数时，则判断这个字符串是不是偶数。使用一个计数变量num来保存是否是否应该偏左，每一次判断完毕之后都自增一次，这样就能实现保持左右均衡。\n","tags":null,"title":"Codeforces Beta Round 5 B Center Alignment","url":"/2014/11/05/cf-5b/"},{"categories":"Code","date":1415198492,"kind":"page","lang":"zh-hans","objectID":"/2014/11/05/cf-5a/","permalink":"https://xuanwo.io/2014/11/05/cf-5a/","publishdate":"2014-11-05T14:41:32Z","relpermalink":"/2014/11/05/cf-5a/","summary":"题目 源地址：\nhttp://codeforces.com/contest/5/problem/A\n理解 很简单的一道水题，实际上就是输出字符串个数和乘上当前聊天室里面的人数的和。 在具体写的时候有几个需要注意的问题：\n 输入，老生常谈了= =。空格的处理通常可以用cin.getline(tmp,MAXN)（对char数组）或者是getline(cin,tmp);（对string类）。 每次循环的时候，用于保存聊天内容的字符串都必须清空，否则答案会比正确结果大很多。 ","tags":null,"title":"Codeforces Beta Round 5 A Chat Server's Outgoing Traffic","url":"/2014/11/05/cf-5a/"},{"categories":"Code","date":1415139587,"kind":"page","lang":"zh-hans","objectID":"/2014/11/04/uva-12174-shuffle/","permalink":"https://xuanwo.io/2014/11/04/uva-12174-shuffle/","publishdate":"2014-11-04T22:19:47Z","relpermalink":"/2014/11/04/uva-12174-shuffle/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=513\u0026amp;page=show_problem\u0026amp;problem=3326\n理解 题意真心有点看不懂，原谅我这个没有用过音乐播放器的男人= =。\n  使用一个音乐播放器，采用随机播放。随机播放的原理时先随机产生一个1~n的排列，然后就按这个排列顺序播放歌曲。播放完这序列的所有歌曲以后，再次随机生成一个1～n的排列，再继续播放。然后，现在给你一个播放历史记录，但是这个记录是不完整的，因为当它开始记录的时候，有些歌可能已经播放过了但是没有记录到。现在给你一段历史记录和播放器中歌的个数，问历史记录中的第一首歌是某个随机列表的第几首，总共有多少可能？\n整个算法可以分成两段，首先处理min(s,n)中的部分，这部分出现的歌曲都放入一个sames容器，以bool数组ok[i]来记录从标号i开始的歌曲是不是都不相同。然后依次枚举第一首歌是第x首，先检查前s-x是不是都不相同，然后从x开始，依次判断x，x+s，x+2s等等是不是符合条件。\n","tags":null,"title":"UVa 12174 Shuffle","url":"/2014/11/04/uva-12174-shuffle/"},{"categories":"Code","date":1415131086,"kind":"page","lang":"zh-hans","objectID":"/2014/11/04/uva-1451-average/","permalink":"https://xuanwo.io/2014/11/04/uva-1451-average/","publishdate":"2014-11-04T19:58:06Z","relpermalink":"/2014/11/04/uva-1451-average/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=24\u0026amp;page=show_problem\u0026amp;problem=4197\n理解 这道题被康逗逗怒拿了FB，默默地去看题，结果完全看不出什么头绪。题意扯到了DNA神马的，其实完全不重要。实际上就是给你一个由0和1组成的串，叫你求出一段长度至少为L的连续子序列，使得这个子序列的平均数最小。如果出现多解，则要求取长度小而且起点小的那个序列。 感觉像是一个DP的题目，但是对如何高效地求出这个最优解没有什么思路。后来在题解中看到了一篇论文《浅谈数形结合思想在信息学竞赛中的应用》。首先，我们可以将目标图形化，取每一个数的序号为X上的变量，取0和1为高度，则可以得出任意两点之间的斜率为(sum[j]-sum[i])*1.0/(j-i)。然后开始维护一个曲线，保证这个斜率上的每一段曲线都是斜率最大的。 在一个for循环中，设最后的节点是i，i~(L,n)。然后开始寻找这个曲线中满足\u0026gt;L要求的最大斜率。\n","tags":null,"title":"UVa 1451 Average","url":"/2014/11/04/uva-1451-average/"},{"categories":"Code","date":1415119655,"kind":"page","lang":"zh-hans","objectID":"/2014/11/04/uva-1606-amphiphilic-carbon-molecules/","permalink":"https://xuanwo.io/2014/11/04/uva-1606-amphiphilic-carbon-molecules/","publishdate":"2014-11-04T16:47:35Z","relpermalink":"/2014/11/04/uva-1606-amphiphilic-carbon-molecules/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=4481\n理解 比赛的时候太紧张，题目都没敢读全= =。 实际上题意还是比较清楚的，给定一个平面，上面有两类点，分别用黑白来表示。现在要求要用一根直线将这个平面分成两半，在直线上面的点全都取走，问，最多能取走多少个点。 具体的方法曾经讲到过，就是扫描线算法：任取一个点为原点，建立极坐标系，其他的点使用极角排序，然后扫描来寻找最大值。 在实现的时候有两个注意点：\n atan2的计算误差不可忽略，极角排序的时候要用叉积的方法进行排序，规避精度问题。 叉积方法排序之前，需要做一个投射，将这个平面上的点处理到两个象限中去。 ","tags":null,"title":"UVa 1606 Amphiphilic Carbon Molecules","url":"/2014/11/04/uva-1606-amphiphilic-carbon-molecules/"},{"categories":"Code","date":1415114369,"kind":"page","lang":"zh-hans","objectID":"/2014/11/04/uva-120-stacks-of-flapjacks/","permalink":"https://xuanwo.io/2014/11/04/uva-120-stacks-of-flapjacks/","publishdate":"2014-11-04T15:19:29Z","relpermalink":"/2014/11/04/uva-120-stacks-of-flapjacks/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=56\n理解 特别涨姿势的一道题。 题目不难，只要理解题目中所谓的翻转的意思，很好做。但是我在看题解的过程中，被STL的各种酷炫吓呆，感觉string类真的好好用= =。要是自己用char数组模拟的话，可能会写得各种坑。\n默默记录一下：\n istringstream iss(str);，专门用于操作string类的一个类，可以这样用for(int tmp; iss\u0026gt;\u0026gt;tmp; que.push_front(tmp));。超酷炫有木有！。！ deque\u0026lt;int\u0026gt;::iterator it 迭代器，方便好用不多说= = reverse(Max, que.end()); 用于容器中两个元素的交换，超级好用。 distance(que.begin(), Max) 返回两个迭代器之间的距离，也是相当的赞。  恩- -，好好学STL，大有前途。\n","tags":null,"title":"UVa 120 Stacks of Flapjacks","url":"/2014/11/04/uva-120-stacks-of-flapjacks/"},{"categories":"Code","date":1415107792,"kind":"page","lang":"zh-hans","objectID":"/2014/11/04/uva-714-copying-books/","permalink":"https://xuanwo.io/2014/11/04/uva-714-copying-books/","publishdate":"2014-11-04T13:29:52Z","relpermalink":"/2014/11/04/uva-714-copying-books/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=113\u0026amp;page=show_problem\u0026amp;problem=655\n理解 比赛的时候读懂了题意，但是没有拿出来敲，因为感觉自己应该是敲不出来的。实际上，这是一道小白书上提到过的题目，也就是最大值最小化问题。 使用一个pos数组来保存是否在此分段，然后使用二分最小值来确定pos的取值。 实际上我还不是能够非常具体地描述中间二分的过程，不妨在二分的循环当中打印pos数组的值来找一找感觉。\nInput: 1 9 3 100 200 300 400 500 600 700 800 900 Output: 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 100 200 300 400 500 / 600 700 / 800 900 除去最后一行是答案，不去考虑之外，我们可以看到这是一个在中央取值，然后不断向右靠拢的过程。\n","tags":null,"title":"UVa 714 Copying Books","url":"/2014/11/04/uva-714-copying-books/"},{"categories":"Code","date":1415105936,"kind":"page","lang":"zh-hans","objectID":"/2014/11/04/uva-11134-fabled-rooks/","permalink":"https://xuanwo.io/2014/11/04/uva-11134-fabled-rooks/","publishdate":"2014-11-04T12:58:56Z","relpermalink":"/2014/11/04/uva-11134-fabled-rooks/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=24\u0026amp;page=show_problem\u0026amp;problem=2075\n理解 比赛的时候没有写出来。其实很容易可以看出来，这个题目可以变成两个子题目，也就是X和Y方向并没有直接的关系，完全可以看成在X方向是不重叠摆放和在Y方向是不重叠摆放的问题。 一开始的想法是只要对它进行排序，然后逐个判断是否符合题意就OK，但是后来发现这样并不能解决问题。后来看了题解，决定采用优先队列来维护可以选择的区间。也就是每次都在区间[l,r]中选取l最小且r最小的区间，然后设一个变量maxx保存一下当前已经摆放到了什么位置。要是存在一个l\u0026lt;maxx，那么则需要将这个l修改为maxx，并且重新放入队列中。这样，就能保证后面的棋子都不会和前面已经摆好的重叠。\n","tags":null,"title":"UVa 11134 Fabled Rooks","url":"/2014/11/04/uva-11134-fabled-rooks/"},{"categories":"Code","date":1415096890,"kind":"page","lang":"zh-hans","objectID":"/2014/11/04/contest-cugb-13-person-1/","permalink":"https://xuanwo.io/2014/11/04/contest-cugb-13-person-1/","publishdate":"2014-11-04T10:28:10Z","relpermalink":"/2014/11/04/contest-cugb-13-person-1/","summary":"比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=61737#overview 比赛总结 这次比赛打得还行- -，最近生活比较规律，连带着人也变得机智很多，暴力乱搞加开脑洞，过了很多题。但是，也从侧面暴露出编码能力不强，算法功底不扎实的缺点。接下来还是要好好训练，多多刷题。跟队友多交流，相互促进，不停地PUSH自己。 分题讲解 A题（STL，模拟） 比赛的时候真的看不懂题意= =，太弱了。赛后看的题解大涨姿势，学会了好多神奇的技巧。 只要理解了翻转的过程，题目并不是很难。 http://xuanwo.io/2014/11/04/UVa-120-Stacks-of-Flapjacks/ B题（构造） 超想像CLJ一样来一句傻逼题。 开脑洞过了题之后还没反应过来= =，当时的唯一想法是卧槽，这么逗的题怎么没人过？ 然后吐槽了范神带歪了榜= =，导致前面很多水题大家都没做出来。 http://xuanwo.io/2014/11/05/UVa-1605-Building-for-UN/ C题（暴力） 乱搞，开了一个一千六百万的数组二分过了。 不知道是谁告诉我只要学会暴力就能区域赛拿银来着= =。 http://xuanwo.io/2014/11/05/UVa-1152-4-Values-whose-Sum-is-0/ D题（贪心） 把问题想得太复杂，其实X和Y方向根本就没有关系，完全可以分开考虑。 http://xuanwo.io/2014/11/04/UVa-11134-Fabled-Rooks/ E题（贪心） 大胆地喊一句：傻逼题。 想了半天的还差点开始敲网络流模板的我更加傻逼= =。 http://xuanwo.io/2014/11/05/UVa-11054-Wine-trading-in-Gergovia/ F题（几何） 扫描线算法，当年土豪学长跟我们说过，但是打比赛的时候完全没有印象。 也跟读题能力有关系，看到题目长，题意复杂就不敢下手，太弱了，要加强。 http://xuanwo.io/2014/11/04/UVa-1606-Amphiphilic-Carbon-Molecules/ G题","tags":null,"title":"13级个人赛第一场","url":"/2014/11/04/contest-cugb-13-person-1/"},{"categories":"Code","date":1415096890,"kind":"page","lang":"zh-hans","objectID":"/2014/11/04/contest-cugb-cf1/","permalink":"https://xuanwo.io/2014/11/04/contest-cugb-cf1/","publishdate":"2014-11-04T10:28:10Z","relpermalink":"/2014/11/04/contest-cugb-cf1/","summary":"比赛地址 http://acm.hust.edu.cn/vjudge/contest/view.action?cid=61581#overview 比赛总结 这场比赛打得很挫，一上来看到D题之前做过，就直接贴了代码，被学长们狠狠地批评了一顿。确实，之前做过并不意味着我就能直接贴我的代码，我再写一次不一定写得出来，而且也丧失了一次检验自己是否真的确实掌握了的机会。以后一定要多注意，比赛态度要端正，不能看到自己做过的题就像占到了便宜一样，直接贴出自己的AC代码。 事实上可以看到，自己跟即将退役的12级差距还是很大的，这些水题都A不掉，或者姿势不优越，考虑不全面，思路受限这些问题暴露的很明显。还是题目做的太少，多做题，多总结。 分题讲解 A题（纯水题） 通过简单的分析就能搞定，一道比较简单的贪心。 http://xuanwo.io/2014/11/03/CF-4B/ B题（DP） 没做出来，一开始想的是DFS，但是没有处理好2跟5，以及出现0的一些情况。赛后看题解，才写出来使用DP的解法。 http://xuanwo.io/2014/11/03/CF-2B/ C题（模拟） WA了很多发，比赛的时候考虑的还是太不全面，没能从正面解决. http://xuanwo.io/2014/11/02/CF-3C/ D题（计算几何） 之前做过的题目，用到了海伦公式和计算圆心角知识。 http://xuanwo.io/2014/10/21/CF-1C/ E题（贪心） 用的贪心的思想，先使得所有的\u0026rsquo;?\u0026lsquo;都变为\u0026rsquo;)'，再来处理合法性和最优化的问题。 http://xuanwo.io/2014/11/03/CF-3D/ 更新日志 2014年11月3日 初稿。","tags":null,"title":"CF拉练第一场","url":"/2014/11/04/contest-cugb-cf1/"},{"categories":"Code","date":1415042019,"kind":"page","lang":"zh-hans","objectID":"/2014/11/03/cf-4b/","permalink":"https://xuanwo.io/2014/11/03/cf-4b/","publishdate":"2014-11-03T19:13:39Z","relpermalink":"/2014/11/03/cf-4b/","summary":"题目 源地址：\nhttp://codeforces.com/contest/4/problem/B\n理解 水题一枚。 首先计算出最小的边界和，然后计算出最大的边界和。只要题目给定的sum不在这个范围内，一定无解。然后使用贪心的方法，计算出tem=最大边界和-sum。然后一个一个减去两个边界之间的差值，直到tem被减为零。\n","tags":null,"title":"Codeforces Beta Round 4 B Before an Exam","url":"/2014/11/03/cf-4b/"},{"categories":"Code","date":1415035087,"kind":"page","lang":"zh-hans","objectID":"/2014/11/03/cf-3d/","permalink":"https://xuanwo.io/2014/11/03/cf-3d/","publishdate":"2014-11-03T17:18:07Z","relpermalink":"/2014/11/03/cf-3d/","summary":"题目 源地址：\nhttp://codeforces.com/contest/3/problem/D\n理解 比赛的时候没有做出来，赛后看了琦神的解题报告才明白应该怎么敲。 实际上这个题目需要解决两个问题：第一是合法性，也就是是否满足左右括号匹配；第二是最优化，也就是要求Cost消耗最小。 使用一个变量cnt遍历输入的字符串，遇到\u0026rsquo;(\u0026lsquo;则自增，遇到\u0026rsquo;)\u0026lsquo;则自减。这样，只要判断cnt是否为零，就能判断是不是合法。一开始的时候将每一个\u0026rsquo;?\u0026lsquo;都重置为\u0026rsquo;)'，然后维护一个保存左右括号消耗差和当前节点的优先队列。然后开始不断地从优先队列中取出键对，使用保存了所有右括号消耗和的ss变量去减。 经过这样的处理之后，cnt只有两种情况。cnt不为零时，说明不可能合法，输出\u0026rdquo;-1\u0026rdquo;，cnt为零时，说明有解，输出ss以及最后符合要求的字符串。\n","tags":null,"title":"Codeforces Beta Round 3 D Least Cost Bracket Sequence","url":"/2014/11/03/cf-3d/"},{"categories":"Code","date":1415026958,"kind":"page","lang":"zh-hans","objectID":"/2014/11/03/cf-2b/","permalink":"https://xuanwo.io/2014/11/03/cf-2b/","publishdate":"2014-11-03T15:02:38Z","relpermalink":"/2014/11/03/cf-2b/","summary":"题目 源地址：\nhttp://codeforces.com/contest/2/problem/B\n理解 比赛的时候没有做出来，一看就知道应该是一个DP，选取一个2或者5最少的路径。 首先处理一下，设TWO为0，FIVE为1。在输入的时候就进行判断，当前输入的数和'0\u0026rsquo;，\u0026lsquo;2\u0026rsquo;，\u0026lsquo;5\u0026rsquo;之间的关系。得到的结果存在一个数组中，这样就得到整个数组中最多的0的个数。然后对2和5的数量进行比较，只需要考虑比较少的那个。 然后对第一个数为0的情况进行特判，此时只要随手输出就可以了。如果第一个数不为0，则开始取2比较少的路径开始行走。\n  大概是我写得不是很优美= =，在提交的时候遇到了各种问题，debug了半天，还是没有找出究竟错在哪里。直到我脑洞一开，把所有变量的定义放在了main函数的里面，居然过了！过了！！了！！！ 蛋疼，不知道问题到底在哪里= =，唉，存疑。\n","tags":null,"title":"Codeforces Beta Round 2 B The least round way","url":"/2014/11/03/cf-2b/"},{"categories":"Code","date":1415013836,"kind":"page","lang":"zh-hans","objectID":"/2014/11/03/cf-4a/","permalink":"https://xuanwo.io/2014/11/03/cf-4a/","publishdate":"2014-11-03T11:23:56Z","relpermalink":"/2014/11/03/cf-4a/","summary":"题目 源地址：\nhttp://codeforces.com/contest/4/problem/A\n理解 真不愧是过了1W+的题= =，水的真可怕。 唯一的trick是当w等于2的时候，不能分成两个偶数。\n","tags":null,"title":"Codeforces Beta Round 4 A Watermelon","url":"/2014/11/03/cf-4a/"},{"categories":"Code","date":1415012606,"kind":"page","lang":"zh-hans","objectID":"/2014/11/03/cf-3a/","permalink":"https://xuanwo.io/2014/11/03/cf-3a/","publishdate":"2014-11-03T11:03:26Z","relpermalink":"/2014/11/03/cf-3a/","summary":"题目 源地址：\nhttp://codeforces.com/contest/3/problem/A\n理解 第一开始的想法是可以用DFS或者BFS搞定。后来仔细想了想，发现其实不需要这么复杂，通过建立一个坐标系，可以轻松搞定这个问题。 首先坐标化，将A~H转化为1~8，方便后续的处理，同时计算出终点与起点位移在x，y轴上的投影，分别设为mx，my。 然后下面是模拟的步骤：\n 处理斜角：循环对mx和my进行递增或者递减的操作，直到有一个值变为零。 处理直线：对mx或者my进行递增或者递减的操作，直到这个值也为零，此时已经模拟完毕。  有两个值得注意的地方：\n 首先需要输出步数，很显然，步数就是max(abs(mx),abs(my))。 不需要记忆路径，每次处理mx和my的时候，顺便把路径输出即可。 ","tags":null,"title":"Codeforces Beta Round 3 A Shortest path of the king","url":"/2014/11/03/cf-3a/"},{"categories":"Code","date":1414949422,"kind":"page","lang":"zh-hans","objectID":"/2014/11/02/cf-3c/","permalink":"https://xuanwo.io/2014/11/02/cf-3c/","publishdate":"2014-11-02T17:30:22Z","relpermalink":"/2014/11/02/cf-3c/","summary":"题目 源地址：\nhttp://codeforces.com/problemset/problem/3/C\n理解 一开始看到3*3，第一反应是想要枚举出所有可能的情况，也就是总共有9^3次种，但是发现自己很难处理这些情况，后来还是决定用暴力模拟的方法来做。\n错误解法 为了简化情况的讨论，我取\u0026rsquo;.\u0026lsquo;为0，\u0026lsquo;X\u0026rsquo;为1，\u0026lsquo;0\u0026rsquo;为2。这样，只要三个数的积为0，说明没有人胜利；三个数的积为1，说明先手胜；三个数的积为8，说明后手胜。这样，在判定胜负的时候，情况就简单了很多。 但是，我犯的错误就是对非法的状况考虑得不全面，或者说，懒得去自己判定是否非法，直接将非法的判断写在else语句里面，导致这段语句摆在前面挂test4，摆在后面挂test8这样尴尬局面的发生。\n正确解法 赛后我重新写了这道题，正面强干，没有转换成int数组来处理。将胜负判定和非法判定全都写成了独立的函数，在最开始先判断是否非法，然后判定有没有出现胜者，最后判定是谁进行下一步。\n","tags":null,"title":"Codeforces Beta Round 3 C Tic-tac-toe","url":"/2014/11/02/cf-3c/"},{"categories":"Code","date":1414940683,"kind":"page","lang":"zh-hans","objectID":"/2014/11/02/uva-1374-power-calculus/","permalink":"https://xuanwo.io/2014/11/02/uva-1374-power-calculus/","publishdate":"2014-11-02T15:04:43Z","relpermalink":"/2014/11/02/uva-1374-power-calculus/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=512\u0026amp;page=show_problem\u0026amp;problem=4120\n理解 这次的题意比较清楚，就是给定n，求出从1变换到n的最小步数。 同样的迭代深搜，- -，我不行了= =，一口气补了三道，整个人都虚了。。\n还是来小结一下吧。以前做的DFS都是裸题，很容易就能看出来。而迭代深搜这一类的题目，通常都是给定一些条件，要求求出指定条件的一些组合，可能是字符串也有可能是数。而且，通常都会有暴力的做法，不过姿势不优越的话，很容易超时。 然后在迭代深搜的过程中，一定要注意初始状态和边界条件，要不然很容易陷入死循环或者无法得到完整的结果。\n","tags":null,"title":"UVa 1374 Power Calculus","url":"/2014/11/02/uva-1374-power-calculus/"},{"categories":"Code","date":1414939967,"kind":"page","lang":"zh-hans","objectID":"/2014/11/02/uva-129-krypton-factor/","permalink":"https://xuanwo.io/2014/11/02/uva-129-krypton-factor/","publishdate":"2014-11-02T14:52:47Z","relpermalink":"/2014/11/02/uva-129-krypton-factor/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=3\u0026amp;page=show_problem\u0026amp;problem=65\n理解 题意不是很好懂= =，我搬运一下翻译。\n  Problem “超级氪因素大赛”(译注：英国的一档电视心智竞答节目）的主办方雇你来对付那些足智多谋的参赛选手。在比赛的一个环节中，节目主持人将念出一长串的字母来考验选手的记忆能力。因为许多选手都是分析字串模式的高手，为了增加一些比赛的难度，主办方决定不再使用那些含有特定重复子串的字串。但是他们又不能将所有重复的子串都删掉，如果那样的话字串中就不存在两个相同的单字了，这反倒会让问题变的非常简单。为了解决这一问题，他们决定仅删除那些包含相邻重复子串的字串。我们将存在上述相邻重复情况的字串称为“easy”（简单），否则称为“hard”（难）。\n  Input and Output 为了能给节目主持人提供无限量的问题字串，要求你来写一个程序执行生成运算。程序从输入中读取多行数据，每行包括两个整数n和L（即按此顺序给出），其中n \u0026gt; 0，L的范围是1 ≤ L ≤ 26。根据这些输入，程序要按照字母表升序打印出第n个“hard”字串（由字母表中的前L个字母构成），并在接下来的一行打印这个串的长度。按照上述规则，第一个串应该是“A”。对于给定的n和L，你可以认为第n个“hard”串是一定存在的。 比方说，当L = 3时，头7个“hard”字串为： A AB ABA ABAC ABACA ABACAB ABACABA 字串可能很长，因此要将它们分成4个字为一组，中间用空格隔开。如果超过16组，则换一行，再接着输出第17组。 ABAC ABA 7 输入由一行两个零表示结束。你的程序可以限定最大的字串长度为80。\n回溯搜索，还用到了string的一些比较方便的函数。\n","tags":null,"title":"UVa 129 Krypton Factor","url":"/2014/11/02/uva-129-krypton-factor/"},{"categories":"Code","date":1414936054,"kind":"page","lang":"zh-hans","objectID":"/2014/11/02/uva-524-prime-ring-problem/","permalink":"https://xuanwo.io/2014/11/02/uva-524-prime-ring-problem/","publishdate":"2014-11-02T13:47:34Z","relpermalink":"/2014/11/02/uva-524-prime-ring-problem/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=465\n理解 一开始写了一个特别暴力的程序，吃饭之前让它一直跑，但是一直到我吃完饭回来还在跑14- -，默然泪。 然后推倒重来，开始用回朔法重写。实际上，我并不需要把所有的排列完全生成出来再进行判断，通过回朔法，我可以在生成排列的同时进行判断。这里也运用了深搜的思想，实际上是一个n*n的矩阵，我要找出满足表达式i+A[cur-1]为指数的那条路径。 搞定了主要的算法，下面就是一些细节的处理。首先，我不需要每一次都调用isPrime函数，因为n\u0026lt;=16，也就是可能出现的最大和是小于32的，我可以在预处理中先判断好是否为质数再拿来用。其次，事先必须指定A[0]=1，vis[1]=1，同时dfs()是从1开始的，注意数组的下标。最后，是输出的处理：每一行末尾的空格，每组数据之间的空行，不要多也不要少，虽然琐碎但是却会决定你能否AC。\n","tags":null,"title":"UVa 524 Prime Ring Problem","url":"/2014/11/02/uva-524-prime-ring-problem/"},{"categories":"Code","date":1414929504,"kind":"page","lang":"zh-hans","objectID":"/2014/11/02/uva-725-division/","permalink":"https://xuanwo.io/2014/11/02/uva-725-division/","publishdate":"2014-11-02T11:58:24Z","relpermalink":"/2014/11/02/uva-725-division/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=9\u0026amp;page=show_problem\u0026amp;problem=666\n理解 提议比较简单，给你0~9这十个数字，要求将其组合为两个五位数X和Y，使得其满足X/Y=N这样的形式。然后就想到了用STL里面的next_permutation函数，很快把代码写了出来，中间还用到了queue来存储答案。不过WA了两发之后开始怀疑是不是STL效率太低导致T了，改用数组模拟，但是还是WA了。经过三个小时的漫长Debug之路，才发现原来问题出在输入输出，我多输出了一个空行！！！ 真的是。。。太。。。\n","tags":null,"title":"UVa 725 Division","url":"/2014/11/02/uva-725-division/"},{"categories":"Code","date":1414838359,"kind":"page","lang":"zh-hans","objectID":"/2014/11/01/codevs-1011/","permalink":"https://xuanwo.io/2014/11/01/codevs-1011/","publishdate":"2014-11-01T10:39:19Z","relpermalink":"/2014/11/01/codevs-1011/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1011/\n理解 题目的分类是递推，自然就往递推那个方向去想。 通过简单的推理可以发现，f[n]的值恰好等于f[1]~f[n/2]的和，之后的代码就比较简单了。\n","tags":null,"title":"CodeVS 1011 数的计算","url":"/2014/11/01/codevs-1011/"},{"categories":"Code","date":1414837045,"kind":"page","lang":"zh-hans","objectID":"/2014/11/01/codevs-1012/","permalink":"https://xuanwo.io/2014/11/01/codevs-1012/","publishdate":"2014-11-01T10:17:25Z","relpermalink":"/2014/11/01/codevs-1012/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1012/\n理解 自然是水题= =。只要用一个循环就可以搞定，最大公约数用gcd，最小公倍数就是ij/gcd(i,j)，没有什么问题。 不过这个题意不是很清晰，是否为同一组数字的判断并没有讲到。实际上，3 60和60 3是两组数组。这个理解上的问题，导致我的结果一直都是标准答案的一半，折腾了一会儿。 除此之外，这个简单的思路还有很多可以优化的地方，比如在判断了gcd是否等于x之后，后面判断最小公倍数只要使用ij/x就可以了；还有，一开始令i=x之后，后面每一次都递增x就可以保证i与j始终为x的约束，但注意，还是要用gcd来判断最大公约数是不是x；过题之后找了一下题解，发现有人提出，循环的最大值是sqrt(y)，稍微想了想，确实如此，这个优化也能省下很多循环。\n","tags":null,"title":"CodeVS 1012 最大公约数和最小公倍数问题","url":"/2014/11/01/codevs-1012/"},{"categories":"Code","date":1414835268,"kind":"page","lang":"zh-hans","objectID":"/2014/11/01/uva-445-marvelous-mazes/","permalink":"https://xuanwo.io/2014/11/01/uva-445-marvelous-mazes/","publishdate":"2014-11-01T09:47:48Z","relpermalink":"/2014/11/01/uva-445-marvelous-mazes/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=94\u0026amp;page=show_problem\u0026amp;problem=386\n理解 我又逗了= =。 题意很简单，给你指定规则的字符串，要求你转换成一个图。 我写了一个特别复杂的实现，结果总是得不到想要的结果。后来才意识到switch语句妙用，顿感自己太不机智了。 实际上，只要对每一个字符进行判断就可以了，如果是数字就叠加起来得到c，如果是b就输出前面算出的c个空格，如果是！就输出回车，如果是字母就输出前面算出来的c个字母。根本就不需要进行复杂的正数处理操作，涨姿势了。 除此之外，还有没有必要等到全部输入完了之后再进行处理。因为本地编译的时候看起来输入和输出混在了一起，实际上，输入来自于stdin，输出来自于stdout，是不会出现混淆的。所以可以放心大胆地进行单行处理，这样就省掉一个超大的二维数组。\n","tags":null,"title":"UVa 445 Marvelous Mazes","url":"/2014/11/01/uva-445-marvelous-mazes/"},{"categories":"Code","date":1414833716,"kind":"page","lang":"zh-hans","objectID":"/2014/11/01/uva-490-rotating-sentences/","permalink":"https://xuanwo.io/2014/11/01/uva-490-rotating-sentences/","publishdate":"2014-11-01T09:21:56Z","relpermalink":"/2014/11/01/uva-490-rotating-sentences/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=94\u0026amp;page=show_problem\u0026amp;problem=431\n理解 题意很好理解，就是将字符串旋转九十度。 一开始脑洞开的比较大，想要搞两个字符串数组，然后两个for遍历。后来仔细想想根本就不需要，只要在输出的时候，处理一下顺序就可以了。 然后被卡在了输入输出上面，之前没有做过这种类型的题目，不知道单组的输入怎么结束。后来听学长解释才明白，就算是单组，也可以用EOF来结束的，之后的问题就比较简单了。但是提交之后，挂了一发PE。仔细检查之后，认为问题出在题目中输入的那个换行，除此之外，还有自己先前调用的一个计数变量i的值比应有的值多了1。 Debug之后，幸福的A了\n","tags":null,"title":"UVa 490 Rotating Sentences","url":"/2014/11/01/uva-490-rotating-sentences/"},{"categories":"Code","date":1414775599,"kind":"page","lang":"zh-hans","objectID":"/2014/10/31/uva-414-machined-surfaces/","permalink":"https://xuanwo.io/2014/10/31/uva-414-machined-surfaces/","publishdate":"2014-10-31T17:13:19Z","relpermalink":"/2014/10/31/uva-414-machined-surfaces/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=355\n理解 题意还是比较好理解的，实际上就是求将两端合并，中间还会剩余多少个空格。只要找到X最多的那一行，问题就变得简单了。 不过还是逗了一发，因为忘记把freopen注释掉= =，蛋疼。\n","tags":null,"title":"UVa 414 Machined Surfaces","url":"/2014/10/31/uva-414-machined-surfaces/"},{"categories":"Code","date":1414773917,"kind":"page","lang":"zh-hans","objectID":"/2014/10/31/codevs-1501/","permalink":"https://xuanwo.io/2014/10/31/codevs-1501/","publishdate":"2014-10-31T16:45:17Z","relpermalink":"/2014/10/31/codevs-1501/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1501/\n理解 数据结构的基础题，不过我把它做成了一道模拟题= =。\n","tags":null,"title":"CodeVS 1501 二叉树最大宽度和高度","url":"/2014/10/31/codevs-1501/"},{"categories":"Code","date":1414772415,"kind":"page","lang":"zh-hans","objectID":"/2014/10/31/uva-494-kindergarten-counting-game/","permalink":"https://xuanwo.io/2014/10/31/uva-494-kindergarten-counting-game/","publishdate":"2014-10-31T16:20:15Z","relpermalink":"/2014/10/31/uva-494-kindergarten-counting-game/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=435\n理解 同样是一道很简单的题目。 只要求出给定的一句话中出现的单词的个数，有两个地方需要注意。\n 输入应当注意不能使用scanf(\u0026quot;%s\u0026quot;, str)这样的写法，会直接停在有空格的地方。采用getline是一个好主意，不过输入的效率会比较低，要是比较虚的话，可以用速度快一点的gets。 具体的单词判断上，我一开始犯了一个错误，认为只要判断空格的个数就OK了，实际上，a_a是两个单词。 ","tags":null,"title":"UVa 494 Kindergarten Counting Game","url":"/2014/10/31/uva-494-kindergarten-counting-game/"},{"categories":"Code","date":1414682198,"kind":"page","lang":"zh-hans","objectID":"/2014/10/30/uva-458-the-decoder/","permalink":"https://xuanwo.io/2014/10/30/uva-458-the-decoder/","publishdate":"2014-10-30T15:16:38Z","relpermalink":"/2014/10/30/uva-458-the-decoder/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=399\n理解 看起来有点吓人，实际上是一道很水的题目。 直接在编译器里面计算了一下'1\u0026rsquo;-'*\u0026lsquo;的值，为7。只要字符串里面的每一个字符都减去7，就能得到想要的结果。采用了一个姿势不是很优越的遍历，不知道还有没有更好的优化空间。\n","tags":null,"title":"UVa 458 The Decoder","url":"/2014/10/30/uva-458-the-decoder/"},{"categories":"Code","date":1414681257,"kind":"page","lang":"zh-hans","objectID":"/2014/10/30/uva-10300-ecological-premium/","permalink":"https://xuanwo.io/2014/10/30/uva-10300-ecological-premium/","publishdate":"2014-10-30T15:00:57Z","relpermalink":"/2014/10/30/uva-10300-ecological-premium/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=1241\n理解 这个是英文阅读理解题= =。 看起来很绕很绕的样子，要求每个动物占据的面积然后乘上什么环境友好度，再乘上动物的个数。实际上，就是求面积乘上环境友好度的和。\n","tags":null,"title":"UVa 10300 Ecological Premium","url":"/2014/10/30/uva-10300-ecological-premium/"},{"categories":"Code","date":1414620077,"kind":"page","lang":"zh-hans","objectID":"/2014/10/29/codevs-1160/","permalink":"https://xuanwo.io/2014/10/29/codevs-1160/","publishdate":"2014-10-29T22:01:17Z","relpermalink":"/2014/10/29/codevs-1160/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1160/\n理解 一道模拟的，一直在纠结这个规律怎么推。 一开始的想法是，从最中间开始，由1向n*n不断循环，后来发现这个循环有点难写。折腾了很久还是没有写出来，后来通过观察发现，这个矩阵的右下对角线正好满足一个公差为2的等差数列的平方。根据这个分别来完成递加和递减的过程。\n","tags":null,"title":"CodeVS 1160 蛇形矩阵","url":"/2014/10/29/codevs-1160/"},{"categories":"Code","date":1414616744,"kind":"page","lang":"zh-hans","objectID":"/2014/10/29/codevs-1083/","permalink":"https://xuanwo.io/2014/10/29/codevs-1083/","publishdate":"2014-10-29T21:05:44Z","relpermalink":"/2014/10/29/codevs-1083/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1083/\n理解 一道基础题，但是我在如何建立模型上面想了很久。 事实上，我们可以按照斜线分类，第1条斜线有1个数，第2条有2个数，以此类推，第i条有i个数。这样，我们可以很轻松的知道，前i条共有S(i)=1/2i(i+1)个数。由方程n\u0026lt;=S(k)，我们可以求出n所在的斜线的位置，也就是floor(sqrt(8.0*n+1)-1)/2。 本来在小白书上面，这个问题已经被解决了，但是CodeVS上面的这道题采用了不同的排列规则。通过观察可以发现，这个规则和斜线数k的奇偶性有关。只要进行一次简单的判断就可以让结果按照需要的规则进行排列了。\n","tags":null,"title":"CodeVS 1083 Cantor表","url":"/2014/10/29/codevs-1083/"},{"categories":"Code","date":1414613352,"kind":"page","lang":"zh-hans","objectID":"/2014/10/29/uva-10071-back-to-high-school-physics/","permalink":"https://xuanwo.io/2014/10/29/uva-10071-back-to-high-school-physics/","publishdate":"2014-10-29T20:09:12Z","relpermalink":"/2014/10/29/uva-10071-back-to-high-school-physics/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=1012\n理解 很简单的一道水题，通过简单的计算就能得出最后的结果是2vt。\n","tags":null,"title":"UVa 10071 Back to High School Physics","url":"/2014/10/29/uva-10071-back-to-high-school-physics/"},{"categories":"Code","date":1414589042,"kind":"page","lang":"zh-hans","objectID":"/2014/10/29/uva-10055-hashmat-the-brave-warrior/","permalink":"https://xuanwo.io/2014/10/29/uva-10055-hashmat-the-brave-warrior/","publishdate":"2014-10-29T13:24:02Z","relpermalink":"/2014/10/29/uva-10055-hashmat-the-brave-warrior/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=996\n理解 AOAPC上的基础题，一个非常简单的求两个数之间的差，注意数据的范围，应当采用%lld。\n","tags":null,"title":"UVa 10055  Hashmat the Brave Warrior","url":"/2014/10/29/uva-10055-hashmat-the-brave-warrior/"},{"categories":"Code","date":1414428580,"kind":"page","lang":"zh-hans","objectID":"/2014/10/27/uva-12325-zombies-treasure-chest/","permalink":"https://xuanwo.io/2014/10/27/uva-12325-zombies-treasure-chest/","publishdate":"2014-10-27T16:49:40Z","relpermalink":"/2014/10/27/uva-12325-zombies-treasure-chest/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=3747\n理解 本以为是一件非常简单的贪心，但是狂WA6发，完全不明白到底发生了什么。 一开始觉得是一个背包问题，只要直接计算性价比（价值/体积），然后优先选择性价比高的物品就可以了。\n","tags":null,"title":"UVa 12325 Zombie's Treasure Chest","url":"/2014/10/27/uva-12325-zombies-treasure-chest/"},{"categories":"Code","date":1414426416,"kind":"page","lang":"zh-hans","objectID":"/2014/10/27/uva-10976-fractions-again/","permalink":"https://xuanwo.io/2014/10/27/uva-10976-fractions-again/","publishdate":"2014-10-27T16:13:36Z","relpermalink":"/2014/10/27/uva-10976-fractions-again/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;page=show_problem\u0026amp;problem=1917\n理解 直接暴力做，最多有n-1种可能，每种可能全都尝试一遍，看看能不能找到合适的解，定eps为1e-4，幸运1A。\n","tags":null,"title":"UVa 10976 Fractions Again?!","url":"/2014/10/27/uva-10976-fractions-again/"},{"categories":"Code","date":1414418731,"kind":"page","lang":"zh-hans","objectID":"/2014/10/27/uva-11059-maximum-product/","permalink":"https://xuanwo.io/2014/10/27/uva-11059-maximum-product/","publishdate":"2014-10-27T14:05:31Z","relpermalink":"/2014/10/27/uva-11059-maximum-product/","summary":"题目 源地址：\nhttp://uva.onlinejudge.org/index.php?option=com_onlinejudge\u0026amp;Itemid=8\u0026amp;category=22\u0026amp;page=show_problem\u0026amp;problem=2000\n理解 这道题卡了两个半小时，各种神体位卡数据。 最开始题意理解错误，认为是要求出最大的乘积，实际上应该是求最大的连续积。然后在for循环的开始和结束全都卡了很多次，卡long long，卡输出，卡边界条件，直到队友看不下去了来帮我看代码，才终于解脱= =。 天若了，真的太弱了- -，遇到这种坑特别多的题目，发挥就各种失常，这样可不行。\n","tags":null,"title":"UVa 11059 Maximum Product","url":"/2014/10/27/uva-11059-maximum-product/"},{"categories":"Code","date":1414244797,"kind":"page","lang":"zh-hans","objectID":"/2014/10/25/websitesforstudents/","permalink":"https://xuanwo.io/2014/10/25/websitesforstudents/","publishdate":"2014-10-25T13:46:37Z","relpermalink":"/2014/10/25/websitesforstudents/","summary":"即使是在搜索引擎如此发达的今天，依然有很多偏僻但是特别有用的网站被无数SEO们死死地压在身下。比如，直到现场赛的前几天，才从学长们的口中知道了在线数列大全（OEIS）这样神一般的网站。我就不禁想，像这样的网站是不是并不在少数？我们是不是可以把自己积累的一些好网站共享出来，让大家都能在搜寻某方面的信息可以对症下药，而不是用几个关键词翻来覆去地在Google上面盲目的搜寻？于是，这个大学生网站集合项目就诞生了。\n","tags":["Web"],"title":"大学生网站集合","url":"/2014/10/25/websitesforstudents/"},{"categories":"Code","date":1413990364,"kind":"page","lang":"zh-hans","objectID":"/2014/10/22/cf-2a/","permalink":"https://xuanwo.io/2014/10/22/cf-2a/","publishdate":"2014-10-22T15:06:04Z","relpermalink":"/2014/10/22/cf-2a/","summary":"题目 源地址：\nhttp://codeforces.com/contest/2/problem/A\n理解 真尼玛给俄式英语跪了= =，游戏规则中最关键的地方各种看不懂。\nIf score is negative, this means that the player has lost in the round.` 这句话一直看不懂，是不是只要为负就能直接出局？还是就算暂时是负的也是没有关系的，只要最后大于最后的M就可以？直到看到CF的多组样例之后才明白，应该是后面一种。 除了这个之外，好好地学习了一下STL中的map，vector和迭代器，感觉好厉害！涨姿势了。\n","tags":null,"title":"Codeforces Beta Round 2 A Winner","url":"/2014/10/22/cf-2a/"},{"categories":"Code","date":1413912223,"kind":"page","lang":"zh-hans","objectID":"/2014/10/21/cf-1c/","permalink":"https://xuanwo.io/2014/10/21/cf-1c/","publishdate":"2014-10-21T17:23:43Z","relpermalink":"/2014/10/21/cf-1c/","summary":"题目 源地址：\nhttp://codeforces.com/contest/1/problem/C\n理解 题意很简单，就是给出一个正N边形的三个点，要求求出这个正N边形的最小面积。 然后就是我不停地逗的过程了= =，因为手滑，在计算3个角的时候，全都采用了反cos函数的方法求解，debug的时候一直以为是double精度的问题，直到看到这样下图，我才恍然大悟= =，可怜我的两个小时。 ","tags":null,"title":"Codeforces Beta Round 1 C Ancient Berland Circus","url":"/2014/10/21/cf-1c/"},{"categories":"Code","date":1413902133,"kind":"page","lang":"zh-hans","objectID":"/2014/10/21/cf-1b/","permalink":"https://xuanwo.io/2014/10/21/cf-1b/","publishdate":"2014-10-21T14:35:33Z","relpermalink":"/2014/10/21/cf-1b/","summary":"题目 源地址：\nhttp://codeforces.com/contest/1/problem/B\n理解 大水题一道，不过我坑了很久，实在是代码功底太弱。 题意非常简单，给出两种表格的坐标体系，要你进行相互转化，本质上是一道26进制转化类的题目。 我遇到的坑基本上分为两类，一个是在判断当前输入的字符串属于何种类型，第二是在具体实现过程中的BUG。 首先，讲一讲判断的过程。我另外写了一个判断的函数，一开始想的比较简单，只要判断第二个是不是字符，就OK。挂在了Test 2，错误样例是A1。然后就在思考，这两种坐标体系的根本不同到底在哪里。实际上，RXCY体系中一定有字符R和C，R和C之间必定会有一个数字。从这一点出发，重写了一遍judge函数，总算是搞定了问题。 其次，来看一下在具体的实现过程中的BUG。这一次挂在了Test 6，一个总共有1000个的输入= =，错误的样例是R228C494和R98C688。观察之后发现，问题出在进退位上，因为在A—Z的体系中，实际上是没有代表'0\u0026rsquo;这个字符的，所以，当R或者C坐标上出现整除的时候，就会发现本应出现\u0026rsquo;Z\u0026rsquo;的地方，出现了字符\u0026rsquo;@'。不过在挂了这么多发之后，偷懒直接进行了特判，当\u0026rsquo;Z\u0026rsquo;出现字符串末尾，也就是c%26==0时，直接指定它为\u0026rsquo;Z\u0026rsquo;；当Z出现在字符串最前方时，直接在输出中过滤。 然后= =，A了。\n","tags":null,"title":"Codeforces Beta Round 1 B Spreadsheets","url":"/2014/10/21/cf-1b/"},{"categories":"Code","date":1413841251,"kind":"page","lang":"zh-hans","objectID":"/2014/10/20/codevs-1842/","permalink":"https://xuanwo.io/2014/10/20/codevs-1842/","publishdate":"2014-10-20T21:40:51Z","relpermalink":"/2014/10/20/codevs-1842/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1842/\n理解 还是一道水题，不过卡了RE。研究之后发现，问题出在我的记忆化搜索上面，我的记忆化数组的下标出现了负值，所以出现了RE。后来想了想，通过加上一个最小负数的绝对值，使得出现的每一个x都是非负数，然后解决了这个问题。\n","tags":null,"title":"CodeVS 1842 递归第一次","url":"/2014/10/20/codevs-1842/"},{"categories":"Code","date":1413838541,"kind":"page","lang":"zh-hans","objectID":"/2014/10/20/codevs-1475/","permalink":"https://xuanwo.io/2014/10/20/codevs-1475/","publishdate":"2014-10-20T20:55:41Z","relpermalink":"/2014/10/20/codevs-1475/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1475/\n理解 跟上一道题差不多- -，也是简单的写了一个循环，然后使用累积法计算十进制的值。不过有一个小小的坑，就是\u0026rsquo;A\u0026rsquo;字符的ANSI值不是'9'+1，而是'9'+7。为了省的麻烦，我还是采用了-\u0026lsquo;A'+10这样的方法。\n","tags":null,"title":"CodeVS 1475 m进制转十进制","url":"/2014/10/20/codevs-1475/"},{"categories":"Code","date":1413836282,"kind":"page","lang":"zh-hans","objectID":"/2014/10/20/codevs-1474/","permalink":"https://xuanwo.io/2014/10/20/codevs-1474/","publishdate":"2014-10-20T20:18:02Z","relpermalink":"/2014/10/20/codevs-1474/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1474/\n理解 一开始就看到了下面的提示——可以使用反向取余法，然后就去百度了一下，结果没有发现什么有用的东西- -，然后坑爹的麦当劳的网络又一直连不上GoAgent，直接导致谷歌也上不去，然后就只能靠自己YY反向取余法到底是个什么玩意儿了。 题目自然是十分简单，给的数也不大，n\u0026lt;=100，暴力一点也是OK的。然后就联想到了计算机导论课上老师讲的进制转换的知识点。只要不停地使用n去除以m，余数作为当前位置上的数，商作为下一次运算的n参与循环。直到n\u0026lt;m的时候停止。 不过有一个地方需要注意的是，通过这种方法求出来的char数组和答案正好是逆序的，需要将它转换过来。我记得学长有个奇特的技巧可以将字符串逆序输出= =，不过现在条件受限，自己写一个for循环吧。\n","tags":null,"title":"CodeVS 1474 十进制转m进制","url":"/2014/10/20/codevs-1474/"},{"categories":"Code","date":1413384028,"kind":"page","lang":"zh-hans","objectID":"/2014/10/15/codevs-3038/","permalink":"https://xuanwo.io/2014/10/15/codevs-3038/","publishdate":"2014-10-15T14:40:28Z","relpermalink":"/2014/10/15/codevs-3038/","summary":"题目 源地址：\nhttp://codevs.cn/problem/3038/\n理解 水题。 一个简单的递归，实际上有一个小小的Trick，因为题目中说明了到目前为止没有证明，所以返回值为-1的情况完全可以不用考虑。\n","tags":null,"title":"CodeVS 3038 3n+1问题","url":"/2014/10/15/codevs-3038/"},{"categories":"Code","date":1413374642,"kind":"page","lang":"zh-hans","objectID":"/2014/10/15/codevs-1212/","permalink":"https://xuanwo.io/2014/10/15/codevs-1212/","publishdate":"2014-10-15T12:04:02Z","relpermalink":"/2014/10/15/codevs-1212/","summary":"题目 源地址：\nhttp://codevs.cn/problem/1212/\n理解 水题。 只要使用gcd递归就可以搞定。\n","tags":null,"title":"CodeVS 1212 最大公约数","url":"/2014/10/15/codevs-1212/"},{"categories":"Code","date":1413306008,"kind":"page","lang":"zh-hans","objectID":"/2014/10/14/cf-1a/","permalink":"https://xuanwo.io/2014/10/14/cf-1a/","publishdate":"2014-10-14T17:00:08Z","relpermalink":"/2014/10/14/cf-1a/","summary":"题目 源地址：\nhttp://codeforces.com/contest/1/problem/A\n理解 大水题一道。 只要求出每一边最大的块数就可以了。\n","tags":null,"title":"Codeforces Beta Round 1 A Theatre Square","url":"/2014/10/14/cf-1a/"},{"categories":"Code","date":1412725286,"kind":"page","lang":"zh-hans","objectID":"/2014/10/07/poj-1050-to-the-max/","permalink":"https://xuanwo.io/2014/10/07/poj-1050-to-the-max/","publishdate":"2014-10-07T23:41:26Z","relpermalink":"/2014/10/07/poj-1050-to-the-max/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1050\n理解 题意不难理解，在一个矩阵中寻找一个和最大的子矩阵，可以看作是一个二维的DP问题。不过受到时间的限制，太过暴力的程序显然是不行的，所以现在的问题在于，如何把一个二维的问题转化为一个一维的问题。小脑一动，我们可以想到可以将把矩阵的高度压缩为1之后，在进行一次简单的求最大子序列和就可以实现了。\n","tags":null,"title":"POJ 1050 To the Max","url":"/2014/10/07/poj-1050-to-the-max/"},{"categories":"Code","date":1412641521,"kind":"page","lang":"zh-hans","objectID":"/2014/10/07/poj-2479-maximum-sum/","permalink":"https://xuanwo.io/2014/10/07/poj-2479-maximum-sum/","publishdate":"2014-10-07T00:25:21Z","relpermalink":"/2014/10/07/poj-2479-maximum-sum/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2479\n理解 因为超时卡了很久，不得不换了一种更加优越的方法。不过有点丑，有机会重写一次吧= =\n","tags":null,"title":"POJ 2479 Maximum sum","url":"/2014/10/07/poj-2479-maximum-sum/"},{"categories":"Code","date":1412506368,"kind":"page","lang":"zh-hans","objectID":"/2014/10/05/poj-3624-charm-bracelet/","permalink":"https://xuanwo.io/2014/10/05/poj-3624-charm-bracelet/","publishdate":"2014-10-05T10:52:48Z","relpermalink":"/2014/10/05/poj-3624-charm-bracelet/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3624\n理解 这道题拖了很久很久，一直没有搞定，对DP以及背包问题的理解，一直处在一个瓶颈之中，特别烦躁。 知道今天在比赛群里面问了学长，才发现是空间优化的问题，二维的记忆化数组会直接超出容量限制。想通了这一点后，优化就变得简单了。只要另外定义一个新的数组f[MAXN]，从M-\u0026gt;w[i]进行循环，最后的f[m]就是所要求的结果。\n","tags":null,"title":"POJ 3624 Charm Bracelet","url":"/2014/10/05/poj-3624-charm-bracelet/"},{"categories":"Code","date":1412368707,"kind":"page","lang":"zh-hans","objectID":"/2014/10/03/srun/","permalink":"https://xuanwo.io/2014/10/03/srun/","publishdate":"2014-10-03T20:38:27Z","relpermalink":"/2014/10/03/srun/","summary":"一直以来使用的是老版的SRUN3000.exe客户端，同时也忍受着老版客户端频繁掉线以及莫名卡死等诡异问题。来到实验室之后，老版客户端出现了秒退的现象，刚登陆就提示“检测到代理服务，已自动下线”；使用新版的客户端，则提示“与绑定的IP不一致或开启了共享，balabala”。看来深澜的限制已经影响到我的正常使用了，不如自己捣鼓一下吧。下面直接放出解决方案（地大专用），如果对原理感兴趣的可以继续往下看。\n","tags":["Web"],"title":"深澜HTML登陆——防掉线，开共享","url":"/2014/10/03/srun/"},{"categories":"Code","date":1410342555,"kind":"page","lang":"zh-hans","objectID":"/2014/09/10/transport-website/","permalink":"https://xuanwo.io/2014/09/10/transport-website/","publishdate":"2014-09-10T09:49:15Z","relpermalink":"/2014/09/10/transport-website/","summary":"功能痛点 跨城市的公共交通导航 实现途径 调用各大地图服务提供商的API（比如百度） 实现方法 将一条需求的导航路线分成三段： 出发城市-\u0026gt;城市之间的长途交通（长途汽车，火车，飞机，轮船）-\u0026gt;到达城市 根据所选择的交通方式的不同，分别在各自城市内设定起点至对应站点。 可能的具体功能点 最优费用计算 最短到达时间 行程规划 用于旅游导航服务（携程快来收购我，233333） 盈利方式 关联广告（流量变现） 票券代购（收取服务费，感觉不靠谱） 相关风险 没有什么技术难度，很容易被百度地图之类的作为一个小功能加入，难以竞争。 地图依赖于服务提供商的更新，上游受到控制，相关API可能被限制调用。 更新日志 2014年09月10日 简单的完成列举了自己的想法。","tags":["Web"],"title":"跨城公交网站的想法","url":"/2014/09/10/transport-website/"},{"categories":"Code","date":1410067201,"kind":"page","lang":"zh-hans","objectID":"/2014/09/07/world/","permalink":"https://xuanwo.io/2014/09/07/world/","publishdate":"2014-09-07T05:20:01Z","relpermalink":"/2014/09/07/world/","summary":"凌晨，打了一个电话之后发现大脑意外的活跃，毫无睡意。躺在床上百无聊赖的时候突然想要自己来设计一个游戏，我梦想中的完美游戏。大部分创意都来自我看过的小说（吐槽一下中国市场上百花齐放的网游小说，相比之下刀剑神域的idea实在太low了），只是这次我希望寻找出一个办法来使得这些元素更好地结合在一起。游戏的名字，暂且定为——世界。\n","tags":["Game"],"title":"世界——我的游戏狂想曲","url":"/2014/09/07/world/"},{"categories":"Code","date":1409303886,"kind":"page","lang":"zh-hans","objectID":"/2014/08/29/tiddlywiki-doc-cn/","permalink":"https://xuanwo.io/2014/08/29/tiddlywiki-doc-cn/","publishdate":"2014-08-29T09:18:06Z","relpermalink":"/2014/08/29/tiddlywiki-doc-cn/","summary":"TiddlyWiki是我见过的配置最为简单的Wiki系统，纯HTML实现，不需要服务器，没有复杂的依赖，使用体验非常赞。但是国内使用的人实在太少，而且TiddlyWiki更新迭代很快，原有的一些文档已经不再适用于最新版本的TiddlyWiki了。 基础教学 下载如下页面:http://tiddlywiki.com/empty.html，保存至自己想要保存的地方。 做任何修改之后，点击保存，浏览器会自动弹出另存为窗口，覆盖自己原先保存的html文件即可。 没错，就是这么简单！ 更新日志 2014年08月29日 我们的征途，当是星辰大海。 2014年09月03日 完成基础教学，接下来会依次补充基于浏览器的高阶用法，以及如何在node.js服务器上使用它，不过快开学了，最近有点忙= =。","tags":["Web"],"title":"TiddlyWiki中文教程","url":"/2014/08/29/tiddlywiki-doc-cn/"},{"categories":"Code","date":1409263740,"kind":"page","lang":"zh-hans","objectID":"/2014/08/28/foobar2000-skins/","permalink":"https://xuanwo.io/2014/08/28/foobar2000-skins/","publishdate":"2014-08-28T22:09:00Z","relpermalink":"/2014/08/28/foobar2000-skins/","summary":"大图镇楼，没错，这就是Foobar2000. )\n之前装过好几次Foobar2000，但后来都删掉了，原因是它的界面着实不符合我的审美。直到后来偶然间看到某大神图才发现，原来Foobar2000的正确打开方式是这样的！但是由于版本变迁，前辈们写的文章已经不太适用于最新的版本了，在主题的配置上绕了好大的弯子，决定自己来完成一篇教程。\n","tags":["Software"],"title":"修改Foobar2000的皮肤","url":"/2014/08/28/foobar2000-skins/"},{"categories":"Code","date":1409262261,"kind":"page","lang":"zh-hans","objectID":"/2014/08/28/sourcetree-ssh-github/","permalink":"https://xuanwo.io/2014/08/28/sourcetree-ssh-github/","publishdate":"2014-08-28T21:44:21Z","relpermalink":"/2014/08/28/sourcetree-ssh-github/","summary":"问题描述 使用SourceTree软件用SSH的方式来克隆Github上面的某一个库，但是始终出现Permission Denied。 解决方案 修改SourceTree默认的SSH客户端，使用OpenSSH来链接（仅适用于Git）。 工具-\u0026gt;选项-\u0026gt;一般，SSH客户端选择OpenSSH。 SSH密钥选择之前已经生成好的SSH密钥，纯文件形式，无后缀，一般位于C:\\Users\\yourname\\.ssh目录下。 更新日志 2014年08月28日 完成解决方案。","tags":["Software","Github"],"title":"SourceTree使用SSH连接Github","url":"/2014/08/28/sourcetree-ssh-github/"},{"categories":"Code","date":1409155157,"kind":"page","lang":"zh-hans","objectID":"/2014/08/27/sublime-for-wiz/","permalink":"https://xuanwo.io/2014/08/27/sublime-for-wiz/","publishdate":"2014-08-27T15:59:17Z","relpermalink":"/2014/08/27/sublime-for-wiz/","summary":"介绍 一个非常简单的为知插件，基于大神发布的Vim编辑器修改而来，使用了CodeMirror开源库，目前的功能只不过是更换了编辑页面而已，简陋的很。目标是为为知提供良好的代码高亮及Markdown实时渲染功能。\n","tags":["Software"],"title":"Sublime For Wiz —— 为知笔记的Sublime插件","url":"/2014/08/27/sublime-for-wiz/"},{"categories":"Code","date":1408959090,"kind":"page","lang":"zh-hans","objectID":"/2014/08/25/poj-3069-sarumans-army/","permalink":"https://xuanwo.io/2014/08/25/poj-3069-sarumans-army/","publishdate":"2014-08-25T09:31:30Z","relpermalink":"/2014/08/25/poj-3069-sarumans-army/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3069\n理解 每一个点有自己的范围，要求所有的点都被覆盖。 一开始的解法就是贪心，从最左边开始考虑，距离这个点r以内的区域内一定要有被标记的点（包括自身），只要不断的叠加上去就OK。 后来自己想过另外一种解法，每个点的区域都进行标记，一旦两个点有重叠的部分，则意味着有一个点是多余的。不过计算之后感觉时间复杂度有点高，可能达到了O(N^3)的级别，就没有继续向下去。\n","tags":null,"title":"POJ 3069 Saruman's Army","url":"/2014/08/25/poj-3069-sarumans-army/"},{"categories":"Code","date":1408916540,"kind":"page","lang":"zh-hans","objectID":"/2014/08/24/poj-3617-best-cow-line/","permalink":"https://xuanwo.io/2014/08/24/poj-3617-best-cow-line/","publishdate":"2014-08-24T21:42:20Z","relpermalink":"/2014/08/24/poj-3617-best-cow-line/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3617\n理解 根据题目中所描述的数据结构来构建一个字典序最小的字符串。 贪心算法：不断取S的开头和末尾中较小的一个字符添加到T的末尾。 特别的，当两个字符大小一样时，则需要比较下一个字符。\n","tags":null,"title":"POJ 3617 Best Cow Line","url":"/2014/08/24/poj-3617-best-cow-line/"},{"categories":"Code","date":1408914699,"kind":"page","lang":"zh-hans","objectID":"/2014/08/24/poj-3414-pots/","permalink":"https://xuanwo.io/2014/08/24/poj-3414-pots/","publishdate":"2014-08-24T21:11:39Z","relpermalink":"/2014/08/24/poj-3414-pots/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3414\n理解 因为卡一道题然后整整两天没有做题目什么的太不科学了- -。 纠结的难点在于，我怎么样把实现操作的路径打印出来。事实上，标记全部的六种状态，然后在bfs的过程中，把每一个状态全都输出到一个数组中去，然后再进行输出。\n","tags":null,"title":"POJ 3414 Pots","url":"/2014/08/24/poj-3414-pots/"},{"categories":"Code","date":1408747288,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-1250-tanning-salon/","permalink":"https://xuanwo.io/2014/08/22/poj-1250-tanning-salon/","publishdate":"2014-08-22T22:41:28Z","relpermalink":"/2014/08/22/poj-1250-tanning-salon/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1250\n理解 旅行者的问题，按照题目意思来就好。\n","tags":null,"title":"POJ 1250 Tanning Salon","url":"/2014/08/22/poj-1250-tanning-salon/"},{"categories":"Code","date":1408746748,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2109-power-of-cryptography/","permalink":"https://xuanwo.io/2014/08/22/poj-2109-power-of-cryptography/","publishdate":"2014-08-22T22:32:28Z","relpermalink":"/2014/08/22/poj-2109-power-of-cryptography/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2109\n理解 直接暴力求。\n","tags":null,"title":"POJ 2109 Power of Cryptography","url":"/2014/08/22/poj-2109-power-of-cryptography/"},{"categories":"Code","date":1408746494,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2328-guessing-game/","permalink":"https://xuanwo.io/2014/08/22/poj-2328-guessing-game/","publishdate":"2014-08-22T22:28:14Z","relpermalink":"/2014/08/22/poj-2328-guessing-game/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2328\n理解 猜数字游戏，还是比较熟悉的模型。 先确定一个正确数字，另一个人猜数字，然后回答猜测数字比正确数字是太高、太低还是正确。现在题中给定猜测的过程，让我们用程序验证这个猜测过程中，回答是否正确。\n","tags":null,"title":"POJ 2328 Guessing Game","url":"/2014/08/22/poj-2328-guessing-game/"},{"categories":"Code","date":1408746108,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2363-blocks/","permalink":"https://xuanwo.io/2014/08/22/poj-2363-blocks/","publishdate":"2014-08-22T22:21:48Z","relpermalink":"/2014/08/22/poj-2363-blocks/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2363\n理解 直接暴力计算，没有啥算法。\n","tags":null,"title":"POJ 2363 Blocks","url":"/2014/08/22/poj-2363-blocks/"},{"categories":"Code","date":1408745533,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2459-feed-accounting/","permalink":"https://xuanwo.io/2014/08/22/poj-2459-feed-accounting/","publishdate":"2014-08-22T22:12:13Z","relpermalink":"/2014/08/22/poj-2459-feed-accounting/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2459\n理解 英文题- -，阅读理解很重要。\n  容我搬运一下大牛的翻译： 就是说有一个人，有F1公斤的草料，需要储存到一个空仓库中，但是不知道要从什么时候开始添加才能够保证，在第D天的时候还剩下F2公斤草料，因为这个人家附近后C头牛出没，他们会来偷吃草料，每头牛来偷吃草料的时间段不一样。如果牛过来吃草料的时候，草料就会少，且每头牛每天吃且仅吃1公斤/天/头。问，如果要保证第D天的时候会剩余下F2公斤草料，需要在哪一天的时候添加这F1公斤草料。\n","tags":null,"title":"POJ 2459 Feed Accounting","url":"/2014/08/22/poj-2459-feed-accounting/"},{"categories":"Code","date":1408745348,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2470-ambiguous-permutations/","permalink":"https://xuanwo.io/2014/08/22/poj-2470-ambiguous-permutations/","publishdate":"2014-08-22T22:09:08Z","relpermalink":"/2014/08/22/poj-2470-ambiguous-permutations/","summary":"题目 源地址：\nhttp://poj.org/problem?id=\n理解 对于一个有N个元素的队列，队列元素为[1,2,\u0026hellip;,N-1,N]，进行一次队列变换，当前队列“数字i的位置”将成为变换后队列的第i个元素的值（下标从1开始）。\n","tags":null,"title":"POJ 2470 Ambiguous permutations","url":"/2014/08/22/poj-2470-ambiguous-permutations/"},{"categories":"Code","date":1408745095,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2535-very-simple-problem/","permalink":"https://xuanwo.io/2014/08/22/poj-2535-very-simple-problem/","publishdate":"2014-08-22T22:04:55Z","relpermalink":"/2014/08/22/poj-2535-very-simple-problem/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2535\n理解 N个评委，P道题目，每个评委对每道题进行评分。对于单个评委来说，如果他评分中的最高分的题目被视为该评委认定的“最困难的题目”，他评分中的最低分的题目被视为该评委认定的“最简单的题目”。对于每一道题，如果没有评委评定为“最困难的题目”，且有超过半数（不等于）的评委评定为“最简单的题目”，则这就可以被认为是“非常简单的题目”。\n","tags":null,"title":"POJ 2535 Very Simple Problem","url":"/2014/08/22/poj-2535-very-simple-problem/"},{"categories":"Code","date":1408743861,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2538-wertyu/","permalink":"https://xuanwo.io/2014/08/22/poj-2538-wertyu/","publishdate":"2014-08-22T21:44:21Z","relpermalink":"/2014/08/22/poj-2538-wertyu/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2538\n理解 键盘错位，分别一一对应即可。 做到这道题目的时候才想起来，想当年我把我们家的联想键盘拆了，装回去的时候加减号弄反了。。\n","tags":null,"title":"POJ 2538 WERTYU","url":"/2014/08/22/poj-2538-wertyu/"},{"categories":"Code","date":1408743683,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2562-primary-arithmetic/","permalink":"https://xuanwo.io/2014/08/22/poj-2562-primary-arithmetic/","publishdate":"2014-08-22T21:41:23Z","relpermalink":"/2014/08/22/poj-2562-primary-arithmetic/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2562\n理解 高精度的模拟加法进位，数组模拟之。\n","tags":null,"title":"POJ 2562 Primary Arithmetic","url":"/2014/08/22/poj-2562-primary-arithmetic/"},{"categories":"Code","date":1408743479,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2575-jolly-jumpers/","permalink":"https://xuanwo.io/2014/08/22/poj-2575-jolly-jumpers/","publishdate":"2014-08-22T21:37:59Z","relpermalink":"/2014/08/22/poj-2575-jolly-jumpers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2575\n理解 又是一道已经A过的题目，咦，都是什么时候做的啊？\n","tags":null,"title":"POJ 2575 Jolly Jumpers","url":"/2014/08/22/poj-2575-jolly-jumpers/"},{"categories":"Code","date":1408743315,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2579-blurred-vision/","permalink":"https://xuanwo.io/2014/08/22/poj-2579-blurred-vision/","publishdate":"2014-08-22T21:35:15Z","relpermalink":"/2014/08/22/poj-2579-blurred-vision/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2579\n理解 对于一个RC的矩阵，输出矩阵中每一个22的小方格四个值的平均值（向下取整）。 挨个遍历即可，注意边界。\n","tags":null,"title":"POJ 2579 Blurred Vision","url":"/2014/08/22/poj-2579-blurred-vision/"},{"categories":"Code","date":1408743173,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2636-electrical-outlets/","permalink":"https://xuanwo.io/2014/08/22/poj-2636-electrical-outlets/","publishdate":"2014-08-22T21:32:53Z","relpermalink":"/2014/08/22/poj-2636-electrical-outlets/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2636\n理解 今天做的时候发现2636.cpp文件已经存在了，有点神奇= =，改了一下头文件，直接提交了。\n","tags":null,"title":"POJ 2636 Electrical Outlets","url":"/2014/08/22/poj-2636-electrical-outlets/"},{"categories":"Code","date":1408743044,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2664-prerequisites/","permalink":"https://xuanwo.io/2014/08/22/poj-2664-prerequisites/","publishdate":"2014-08-22T21:30:44Z","relpermalink":"/2014/08/22/poj-2664-prerequisites/","summary":"题目 源地址：\nhttp://poj.org/problem?id=\n理解 将已经选择的课程标记下来，然后对于每一个类别分别进行验证是否已经符合了要求。\n","tags":null,"title":"POJ 2664 Prerequisites?","url":"/2014/08/22/poj-2664-prerequisites/"},{"categories":"Code","date":1408731207,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-3006-dirichlets-theorem-on-arithmetic-progressions/","permalink":"https://xuanwo.io/2014/08/22/poj-3006-dirichlets-theorem-on-arithmetic-progressions/","publishdate":"2014-08-22T18:13:27Z","relpermalink":"/2014/08/22/poj-3006-dirichlets-theorem-on-arithmetic-progressions/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3006\n理解 筛法打素数表，然后暴力得到这些数字，判断是否为素数，若是则次数times+1,直到得到第n个素数。\n","tags":null,"title":"POJ 3006 Dirichlet's Theorem on Arithmetic Progressions","url":"/2014/08/22/poj-3006-dirichlets-theorem-on-arithmetic-progressions/"},{"categories":"Code","date":1408729956,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-3077-rounders/","permalink":"https://xuanwo.io/2014/08/22/poj-3077-rounders/","publishdate":"2014-08-22T17:52:36Z","relpermalink":"/2014/08/22/poj-3077-rounders/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3077\n理解 咦，居然又碰到一道高精度的题目，Java水过。\n","tags":null,"title":"POJ 3077 Rounders","url":"/2014/08/22/poj-3077-rounders/"},{"categories":"Code","date":1408728664,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-3183-stump-removal/","permalink":"https://xuanwo.io/2014/08/22/poj-3183-stump-removal/","publishdate":"2014-08-22T17:31:04Z","relpermalink":"/2014/08/22/poj-3183-stump-removal/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3183\n理解 只要找到比两边大的小高峰即可，注意特殊情况的判断，比如在最开始和最后面。\n","tags":null,"title":"POJ 3183 Stump Removal","url":"/2014/08/22/poj-3183-stump-removal/"},{"categories":"Code","date":1408728278,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-3300-tour-de-france/","permalink":"https://xuanwo.io/2014/08/22/poj-3300-tour-de-france/","publishdate":"2014-08-22T17:24:38Z","relpermalink":"/2014/08/22/poj-3300-tour-de-france/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3300\n理解 好多轮子= =。 计算前后轮的齿轮比，再进行排序，找到前一种比后一种最大的那个。\n","tags":null,"title":"POJ 3300 Tour de France","url":"/2014/08/22/poj-3300-tour-de-france/"},{"categories":"Code","date":1408728094,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-3302-subsequence/","permalink":"https://xuanwo.io/2014/08/22/poj-3302-subsequence/","publishdate":"2014-08-22T17:21:34Z","relpermalink":"/2014/08/22/poj-3302-subsequence/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3302\n理解 直接用一个循环，遍历str1，与str2进行单字符匹配，如果匹配成功就count++。 如果count==strlen(str1),则输出YES，遍历正序、逆序各一次，都没有则输出NO。\n","tags":null,"title":"POJ 3302 Subsequence","url":"/2014/08/22/poj-3302-subsequence/"},{"categories":"Code","date":1408727907,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-3325-icpc-score-totalizer-software/","permalink":"https://xuanwo.io/2014/08/22/poj-3325-icpc-score-totalizer-software/","publishdate":"2014-08-22T17:18:27Z","relpermalink":"/2014/08/22/poj-3325-icpc-score-totalizer-software/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3325\n理解 去掉一个最高分，一个最低分，求平均值。 小学的时候经常做这样的题目- -\n","tags":null,"title":"POJ 3325 ICPC Score Totalizer Software","url":"/2014/08/22/poj-3325-icpc-score-totalizer-software/"},{"categories":"Code","date":1408699400,"kind":"page","lang":"zh-hans","objectID":"/2014/08/22/poj-2251-dungeon-master/","permalink":"https://xuanwo.io/2014/08/22/poj-2251-dungeon-master/","publishdate":"2014-08-22T09:23:20Z","relpermalink":"/2014/08/22/poj-2251-dungeon-master/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2251\n理解 拖了好久的三维BFS题。天真的觉得pair类可以直接扩展到三维中去，结果编译器直接报了错，可惜了那么多的代码，全都要推倒重来了。借鉴了某个神牛的写法，特别是在输入上面，顿时感觉以前的处理方法姿势太不优美了。做这类题目的时候，经常有一个困扰就是我的记步器如何实现，从前都是单独设一个steps这样的变量，现在看来，每一个点设一个可能更好理解一点。\n","tags":null,"title":"POJ 2251 Dungeon Master","url":"/2014/08/22/poj-2251-dungeon-master/"},{"categories":"Code","date":1408664840,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3982-sequence/","permalink":"https://xuanwo.io/2014/08/21/poj-3982-sequence/","publishdate":"2014-08-21T23:47:20Z","relpermalink":"/2014/08/21/poj-3982-sequence/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3982\n理解 题意非常清晰，唯一的问题在于大数的实现。\n","tags":null,"title":"POJ 3982 序列","url":"/2014/08/21/poj-3982-sequence/"},{"categories":"Code","date":1408664222,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3979-divides-plus-and-minus/","permalink":"https://xuanwo.io/2014/08/21/poj-3979-divides-plus-and-minus/","publishdate":"2014-08-21T23:37:02Z","relpermalink":"/2014/08/21/poj-3979-divides-plus-and-minus/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3979\n理解 简单的分数问题，注意上下约分。\n","tags":null,"title":"POJ 3979 分数加减法","url":"/2014/08/21/poj-3979-divides-plus-and-minus/"},{"categories":"Code","date":1408663890,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3980-mod/","permalink":"https://xuanwo.io/2014/08/21/poj-3980-mod/","publishdate":"2014-08-21T23:31:30Z","relpermalink":"/2014/08/21/poj-3980-mod/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3980\n理解 给定两个数，求他们的模。\n","tags":null,"title":"POJ 3980 取模运算","url":"/2014/08/21/poj-3980-mod/"},{"categories":"Code","date":1408659975,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3750-kid-counting/","permalink":"https://xuanwo.io/2014/08/21/poj-3750-kid-counting/","publishdate":"2014-08-21T22:26:15Z","relpermalink":"/2014/08/21/poj-3750-kid-counting/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3750\n理解 中文题- -，用队列来搞定～\n","tags":null,"title":"POJ 3750 小孩报数问题","url":"/2014/08/21/poj-3750-kid-counting/"},{"categories":"Code","date":1408658918,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3749-break-password/","permalink":"https://xuanwo.io/2014/08/21/poj-3749-break-password/","publishdate":"2014-08-21T22:08:38Z","relpermalink":"/2014/08/21/poj-3749-break-password/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3749\n理解 将一个字符串按照一定的规则转化，中文题，不多说了。。\n","tags":null,"title":"POJ 3749 破译密码","url":"/2014/08/21/poj-3749-break-password/"},{"categories":"Code","date":1408658344,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3673-cow-multiplication/","permalink":"https://xuanwo.io/2014/08/21/poj-3673-cow-multiplication/","publishdate":"2014-08-21T21:59:04Z","relpermalink":"/2014/08/21/poj-3673-cow-multiplication/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3673\n理解 按照题意初始化，并运算即可。\n","tags":null,"title":"POJ 3673 Cow Multiplication","url":"/2014/08/21/poj-3673-cow-multiplication/"},{"categories":"Code","date":1408651357,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3196-babylonian-roulette/","permalink":"https://xuanwo.io/2014/08/21/poj-3196-babylonian-roulette/","publishdate":"2014-08-21T20:02:37Z","relpermalink":"/2014/08/21/poj-3196-babylonian-roulette/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3196\n理解 好长的题目- -，是一个关于赌博的问题。给你三个数pot，bet，fpot，分别代表初始金额，赌注金额，封盘金额，每次加钱可能是赌注的-1，-2，-3，1，2，3倍，求最少多少次可以到达封盘金额。\n","tags":null,"title":"POJ 3196 Babylonian Roulette","url":"/2014/08/21/poj-3196-babylonian-roulette/"},{"categories":"Code","date":1408650187,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3125-printer-queue/","permalink":"https://xuanwo.io/2014/08/21/poj-3125-printer-queue/","publishdate":"2014-08-21T19:43:07Z","relpermalink":"/2014/08/21/poj-3125-printer-queue/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3125\n理解 打印队列，看名字都感觉是队列的经典应用，不过没有使用STL，而是模拟了一个。\n","tags":null,"title":"POJ 3125 Printer Queue","url":"/2014/08/21/poj-3125-printer-queue/"},{"categories":"Code","date":1408649002,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3104-drying/","permalink":"https://xuanwo.io/2014/08/21/poj-3104-drying/","publishdate":"2014-08-21T19:23:22Z","relpermalink":"/2014/08/21/poj-3104-drying/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3104\n理解 感觉是一道模拟的题目，使用二分来优化时间。\n","tags":null,"title":"POJ 3104 Drying","url":"/2014/08/21/poj-3104-drying/"},{"categories":"Code","date":1408648609,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3157-java-vs-c++/","permalink":"https://xuanwo.io/2014/08/21/poj-3157-java-vs-c++/","publishdate":"2014-08-21T19:16:49Z","relpermalink":"/2014/08/21/poj-3157-java-vs-c++/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3157\n理解 这是我们在周赛上面做过的题目，WA了无数发，深感自己智商不够——我把input和output里面的sample input #1也处理进去了，每个结果都跟一个sample output #1，能A就有鬼了。看了discuss之后，真恨不得抽自己嘴巴子。。\n","tags":null,"title":"POJ 3157 Java vs C++","url":"/2014/08/21/poj-3157-java-vs-c++/"},{"categories":"Code","date":1408646858,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3117-world-cup/","permalink":"https://xuanwo.io/2014/08/21/poj-3117-world-cup/","publishdate":"2014-08-21T18:47:38Z","relpermalink":"/2014/08/21/poj-3117-world-cup/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3117\n理解 如果所有的队伍作为一个整体，有胜负的比赛总分+3分，如果是平局总分+2分。所以平局数量是：所有比赛均有胜负的总分减去当前总分的分值，即：3 * N - SUM。\n","tags":null,"title":"POJ 3117 World Cup","url":"/2014/08/21/poj-3117-world-cup/"},{"categories":"Code","date":1408646411,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3173-parksides-triangle/","permalink":"https://xuanwo.io/2014/08/21/poj-3173-parksides-triangle/","publishdate":"2014-08-21T18:40:11Z","relpermalink":"/2014/08/21/poj-3173-parksides-triangle/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3173\n理解 生成这样一个表并不难，但是需要注意格式的控制。\n","tags":null,"title":"POJ 3173 Parkside's Triangle","url":"/2014/08/21/poj-3173-parksides-triangle/"},{"categories":"Code","date":1408646181,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3100-root-of-the-problem/","permalink":"https://xuanwo.io/2014/08/21/poj-3100-root-of-the-problem/","publishdate":"2014-08-21T18:36:21Z","relpermalink":"/2014/08/21/poj-3100-root-of-the-problem/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3100\n理解 给定B，N，求出，最接近B的N次方根的整数。\n","tags":null,"title":"POJ 3100 Root of the Problem","url":"/2014/08/21/poj-3100-root-of-the-problem/"},{"categories":"Code","date":1408645838,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3176-cow-bowling/","permalink":"https://xuanwo.io/2014/08/21/poj-3176-cow-bowling/","publishdate":"2014-08-21T18:30:38Z","relpermalink":"/2014/08/21/poj-3176-cow-bowling/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3176\n理解 简单的DP，状态转移方程为：f[i][j]=w[i][j]+max(f[i+1][j],f[i+1][j+1]);\n","tags":null,"title":"POJ 3176 Cow Bowling","url":"/2014/08/21/poj-3176-cow-bowling/"},{"categories":"Code","date":1408645686,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3085-quick-change/","permalink":"https://xuanwo.io/2014/08/21/poj-3085-quick-change/","publishdate":"2014-08-21T18:28:06Z","relpermalink":"/2014/08/21/poj-3085-quick-change/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3085\n理解 找零钱，使用贪心来做～\n","tags":null,"title":"POJ 3085 Quick Change","url":"/2014/08/21/poj-3085-quick-change/"},{"categories":"Code","date":1408615582,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3086-triangular-sums/","permalink":"https://xuanwo.io/2014/08/21/poj-3086-triangular-sums/","publishdate":"2014-08-21T10:06:22Z","relpermalink":"/2014/08/21/poj-3086-triangular-sums/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3086\n理解 三角数求和，打表输出。\n","tags":null,"title":"POJ 3086 Triangular Sums","url":"/2014/08/21/poj-3086-triangular-sums/"},{"categories":"Code","date":1408615209,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3062-celebrity-jeopardy/","permalink":"https://xuanwo.io/2014/08/21/poj-3062-celebrity-jeopardy/","publishdate":"2014-08-21T10:00:09Z","relpermalink":"/2014/08/21/poj-3062-celebrity-jeopardy/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3062\n理解 我对这个充满恶意的世界感到了深深的绝望TnT。原样输出之。。。\n","tags":null,"title":"POJ 3062 Celebrity jeopardy","url":"/2014/08/21/poj-3062-celebrity-jeopardy/"},{"categories":"Code","date":1408615043,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3030-nasty-hacks/","permalink":"https://xuanwo.io/2014/08/21/poj-3030-nasty-hacks/","publishdate":"2014-08-21T09:57:23Z","relpermalink":"/2014/08/21/poj-3030-nasty-hacks/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3030\n理解 输入三个数，分别代表不做广告的效果、做广告的效果、做广告的花销，输出决定。\n","tags":null,"title":"POJ 3030 Nasty Hacks","url":"/2014/08/21/poj-3030-nasty-hacks/"},{"categories":"Code","date":1408614866,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-3094-quicksum/","permalink":"https://xuanwo.io/2014/08/21/poj-3094-quicksum/","publishdate":"2014-08-21T09:54:26Z","relpermalink":"/2014/08/21/poj-3094-quicksum/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3094\n理解 对字母按照顺序求和，大水题，记得数组开大一点。\n","tags":null,"title":"POJ 3094 Quicksum","url":"/2014/08/21/poj-3094-quicksum/"},{"categories":"Code","date":1408614598,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-2992-divisors/","permalink":"https://xuanwo.io/2014/08/21/poj-2992-divisors/","publishdate":"2014-08-21T09:49:58Z","relpermalink":"/2014/08/21/poj-2992-divisors/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2992\n理解 题目的意思还是比较简单的：输入C(n,k), 求该数的因数个数。 然后我们又知道（谷歌又知道）：对于任意质数p, n!中有（n/p+n/p^2+n/p^3+\u0026hellip;)个质因子p。\n","tags":null,"title":"POJ 2992 Divisors","url":"/2014/08/21/poj-2992-divisors/"},{"categories":"Code","date":1408614207,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-2904-gau%C3%9F-in-elementary-school/","permalink":"https://xuanwo.io/2014/08/21/poj-2904-gau%C3%9F-in-elementary-school/","publishdate":"2014-08-21T09:43:27Z","relpermalink":"/2014/08/21/poj-2904-gau%C3%9F-in-elementary-school/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2904\n理解 求从n到m的所有元素之和。 不过很多人都告诉我POJ上面交用到long long int的题必须使用I64d，变量类型也必须是__int64。但是我用long long int和%lld也能过啊，是因为POJ更新了么？\n","tags":null,"title":"POJ 2904 Gauß in Elementary School","url":"/2014/08/21/poj-2904-gau%C3%9F-in-elementary-school/"},{"categories":"Code","date":1408614006,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/poj-2909-goldbachs-conjecture/","permalink":"https://xuanwo.io/2014/08/21/poj-2909-goldbachs-conjecture/","publishdate":"2014-08-21T09:40:06Z","relpermalink":"/2014/08/21/poj-2909-goldbachs-conjecture/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2909\n理解 筛法打素数表，用来验证哥德巴赫猜想。\n","tags":null,"title":"POJ 2909 Goldbach's Conjecture","url":"/2014/08/21/poj-2909-goldbachs-conjecture/"},{"categories":"Code","date":1408610509,"kind":"page","lang":"zh-hans","objectID":"/2014/08/21/opensource-book/","permalink":"https://xuanwo.io/2014/08/21/opensource-book/","publishdate":"2014-08-21T08:41:49Z","relpermalink":"/2014/08/21/opensource-book/","summary":"想自己写一本开源电子书，却被各种复杂的配置，环境所困扰？Readthedocs支持的语言用得不如Markdown爽？不想没更新一次都自己构建一遍？或者，你想成就一本辉煌的开源巨著躺着挣钱？Gitbook是你最好的选择——需要配置的项目少，使用Markdown标记语言，每次提交都自动进行构建，可以对自己的书进行定价（还能接受捐赠- -，国内就算了。。）。下面我就来稍微介绍一下Gitbook以及如何进行基本的配置。\n","tags":["Software","Web"],"title":"Gitbook——你自己的开源电子书","url":"/2014/08/21/opensource-book/"},{"categories":"Code","date":1408467537,"kind":"page","lang":"zh-hans","objectID":"/2014/08/19/poj-3083-children-of-the-candy-corn/","permalink":"https://xuanwo.io/2014/08/19/poj-3083-children-of-the-candy-corn/","publishdate":"2014-08-19T16:58:57Z","relpermalink":"/2014/08/19/poj-3083-children-of-the-candy-corn/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3083\n理解 最开始的代码程序直接报错，反复调试之后，发现我陷入了无限的循环之中。因为先写的左转优先的代码，面对这样的数据时：\n######## #......# #.####.# #.####.# #.####.# #.####.# #...#..# //此行倒数第二和第三的`.`会使得左转优先策略陷入无限循环 #S#E#### 因此，仅仅是写DFS是不够的，我还需要对当前的朝向再进行判断。 除了这个之外，就是一个BFS了，最短路径用DFS不太合适。\n","tags":null,"title":"POJ 3083 Children of the Candy Corn","url":"/2014/08/19/poj-3083-children-of-the-candy-corn/"},{"categories":"Code","date":1408403985,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2876-cantoring-along/","permalink":"https://xuanwo.io/2014/08/18/poj-2876-cantoring-along/","publishdate":"2014-08-18T23:19:45Z","relpermalink":"/2014/08/18/poj-2876-cantoring-along/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2876\n理解 按照指定格式输出字符串，递归求解。\n","tags":null,"title":"POJ 2876 Cantoring Along","url":"/2014/08/18/poj-2876-cantoring-along/"},{"categories":"Code","date":1408402672,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2864-pascal-library/","permalink":"https://xuanwo.io/2014/08/18/poj-2864-pascal-library/","publishdate":"2014-08-18T22:57:52Z","relpermalink":"/2014/08/18/poj-2864-pascal-library/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2864\n理解 统计出现1的个数，如果个数等于列数，就输出yes，否则输出no。\n","tags":null,"title":"POJ 2864 Pascal Library","url":"/2014/08/18/poj-2864-pascal-library/"},{"categories":"Code","date":1408401754,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2853-sequence-sum-possibilities/","permalink":"https://xuanwo.io/2014/08/18/poj-2853-sequence-sum-possibilities/","publishdate":"2014-08-18T22:42:34Z","relpermalink":"/2014/08/18/poj-2853-sequence-sum-possibilities/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2853\n理解 因式分解，输出能用题目中的要求输出的组合的数目。\n","tags":null,"title":"POJ 2853 Sequence Sum Possibilities","url":"/2014/08/18/poj-2853-sequence-sum-possibilities/"},{"categories":"Code","date":1408401575,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2871-a-simple-question-of-chemistry/","permalink":"https://xuanwo.io/2014/08/18/poj-2871-a-simple-question-of-chemistry/","publishdate":"2014-08-18T22:39:35Z","relpermalink":"/2014/08/18/poj-2871-a-simple-question-of-chemistry/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2871\n理解 给一列数，从第二个数开始，输出其与上一个数字之差，输出取两位小数，输入以“999”数字结束。\n","tags":null,"title":"POJ 2871 A Simple Question of Chemistry","url":"/2014/08/18/poj-2871-a-simple-question-of-chemistry/"},{"categories":"Code","date":1408401308,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2591-set-definition/","permalink":"https://xuanwo.io/2014/08/18/poj-2591-set-definition/","publishdate":"2014-08-18T22:35:08Z","relpermalink":"/2014/08/18/poj-2591-set-definition/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2591\n理解 运用了递归的思想，不过没有另外使用函数来调用。\n","tags":null,"title":"POJ 2591 Set Definition","url":"/2014/08/18/poj-2591-set-definition/"},{"categories":"Code","date":1408401024,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2593-max-sequence/","permalink":"https://xuanwo.io/2014/08/18/poj-2593-max-sequence/","publishdate":"2014-08-18T22:30:24Z","relpermalink":"/2014/08/18/poj-2593-max-sequence/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2593\n理解 贪心法求最大最序列和，但是注意下时间。\n","tags":null,"title":"POJ 2593 Max Sequence","url":"/2014/08/18/poj-2593-max-sequence/"},{"categories":"Code","date":1408400859,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-1700-crossing-river/","permalink":"https://xuanwo.io/2014/08/18/poj-1700-crossing-river/","publishdate":"2014-08-18T22:27:39Z","relpermalink":"/2014/08/18/poj-1700-crossing-river/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1700\n理解  -，小学时候做的智力题啊，贪心法， ","tags":null,"title":"POJ 1700 Crossing River","url":"/2014/08/18/poj-1700-crossing-river/"},{"categories":"Code","date":1408400633,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-3720-occurrence-of-digits/","permalink":"https://xuanwo.io/2014/08/18/poj-3720-occurrence-of-digits/","publishdate":"2014-08-18T22:23:53Z","relpermalink":"/2014/08/18/poj-3720-occurrence-of-digits/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3720\n理解 给定n，k，求出1/2 , 1/n之间所有分数的循环小数表达式中数字k的出现次数，简单的模拟就行了。\n","tags":null,"title":"POJ 3720 Occurrence of Digits","url":"/2014/08/18/poj-3720-occurrence-of-digits/"},{"categories":"Code","date":1408400338,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-3219-binomial-coefficient/","permalink":"https://xuanwo.io/2014/08/18/poj-3219-binomial-coefficient/","publishdate":"2014-08-18T22:18:58Z","relpermalink":"/2014/08/18/poj-3219-binomial-coefficient/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3219\n理解 跪拜大神的神思路，还有二进制的神奇用法。\n  C(n,k)(k\u0026lt;=n)的奇偶性取决于(n-k)与k的二进制表达式是否存在同一位上的两个数码均为1，若存在，则为偶数，反之为奇数。\n","tags":null,"title":"POJ 3219 二项式系数","url":"/2014/08/18/poj-3219-binomial-coefficient/"},{"categories":"Code","date":1408400149,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-3224-lab-cup/","permalink":"https://xuanwo.io/2014/08/18/poj-3224-lab-cup/","publishdate":"2014-08-18T22:15:49Z","relpermalink":"/2014/08/18/poj-3224-lab-cup/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3224\n理解 直接每行取分，如果是3分就+1，比较出获得3分最多的人，输出号码。\n","tags":null,"title":"POJ 3224 Lab杯","url":"/2014/08/18/poj-3224-lab-cup/"},{"categories":"Code","date":1408399944,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-3737-umbasketella/","permalink":"https://xuanwo.io/2014/08/18/poj-3737-umbasketella/","publishdate":"2014-08-18T22:12:24Z","relpermalink":"/2014/08/18/poj-3737-umbasketella/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3737\n理解 几何的题目，立体几何的公式用起来。\n","tags":null,"title":"POJ 3737 UmBasketella","url":"/2014/08/18/poj-3737-umbasketella/"},{"categories":"Code","date":1408399691,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2840-big-clock/","permalink":"https://xuanwo.io/2014/08/18/poj-2840-big-clock/","publishdate":"2014-08-18T22:08:11Z","relpermalink":"/2014/08/18/poj-2840-big-clock/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2840\n理解 很有意思的题目，求解大本钟敲几下的问题，按照规律来。\n","tags":null,"title":"POJ 2840 Big Clock","url":"/2014/08/18/poj-2840-big-clock/"},{"categories":"Code","date":1408399501,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2707-copier-reduction/","permalink":"https://xuanwo.io/2014/08/18/poj-2707-copier-reduction/","publishdate":"2014-08-18T22:05:01Z","relpermalink":"/2014/08/18/poj-2707-copier-reduction/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2707\n理解 纯英文题，题目读懂就会做，注意int和float的区别。\n","tags":null,"title":"POJ 2707 Copier Reduction","url":"/2014/08/18/poj-2707-copier-reduction/"},{"categories":"Code","date":1408399260,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-2719-faulty-odometer/","permalink":"https://xuanwo.io/2014/08/18/poj-2719-faulty-odometer/","publishdate":"2014-08-18T22:01:00Z","relpermalink":"/2014/08/18/poj-2719-faulty-odometer/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2719\n理解 一语惊醒梦中人啊- -，九进制就OK。\n","tags":null,"title":"POJ 2719 Faulty Odometer","url":"/2014/08/18/poj-2719-faulty-odometer/"},{"categories":"Code","date":1408381255,"kind":"page","lang":"zh-hans","objectID":"/2014/08/18/poj-3278-catch-that-cow/","permalink":"https://xuanwo.io/2014/08/18/poj-3278-catch-that-cow/","publishdate":"2014-08-18T17:00:55Z","relpermalink":"/2014/08/18/poj-3278-catch-that-cow/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3278\n理解 BFS最基础的应用，只有三个方向，一个是乘二，一个是加一，一个是减一。\n","tags":null,"title":"POJ 3278 Catch That Cow","url":"/2014/08/18/poj-3278-catch-that-cow/"},{"categories":"Code","date":1408319564,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2696-a-mysterious-function/","permalink":"https://xuanwo.io/2014/08/17/poj-2696-a-mysterious-function/","publishdate":"2014-08-17T23:52:44Z","relpermalink":"/2014/08/17/poj-2696-a-mysterious-function/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2696\n理解 套公式计算，水题，但是注意数组的大小。\n","tags":null,"title":"POJ 2696 A Mysterious Function","url":"/2014/08/17/poj-2696-a-mysterious-function/"},{"categories":"Code","date":1408319354,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2601-simple-calculations/","permalink":"https://xuanwo.io/2014/08/17/poj-2601-simple-calculations/","publishdate":"2014-08-17T23:49:14Z","relpermalink":"/2014/08/17/poj-2601-simple-calculations/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2601\n理解 推公式。满眼都是泪，不多说了= =。\n","tags":null,"title":"POJ 2601 Simple calculations","url":"/2014/08/17/poj-2601-simple-calculations/"},{"categories":"Code","date":1408318952,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2665-trees/","permalink":"https://xuanwo.io/2014/08/17/poj-2665-trees/","publishdate":"2014-08-17T23:42:32Z","relpermalink":"/2014/08/17/poj-2665-trees/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2665\n理解 用一个unsigned int储存总数，然后每次对于区间减去需要移除的数量，最后求值。 记得POJ上也有这道题，当年好象是用标记01的方法来做的。\n","tags":null,"title":"POJ 2665 Trees","url":"/2014/08/17/poj-2665-trees/"},{"categories":"Code","date":1408294258,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2606-rabbit-hunt/","permalink":"https://xuanwo.io/2014/08/17/poj-2606-rabbit-hunt/","publishdate":"2014-08-17T16:50:58Z","relpermalink":"/2014/08/17/poj-2606-rabbit-hunt/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2606\n理解 与之前做过的题目几乎一模一样，只是结束条件不同。同样是计算每一个点的斜率，存在数组中，再排序。\n","tags":null,"title":"POJ 2606 Rabbit hunt","url":"/2014/08/17/poj-2606-rabbit-hunt/"},{"categories":"Code","date":1408294072,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-1118-lining-up/","permalink":"https://xuanwo.io/2014/08/17/poj-1118-lining-up/","publishdate":"2014-08-17T16:47:52Z","relpermalink":"/2014/08/17/poj-1118-lining-up/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1118\n理解 暴力过，求出所有点的斜率并存在一个数组中，再进行比较。\n","tags":null,"title":"POJ 1118 Lining Up","url":"/2014/08/17/poj-1118-lining-up/"},{"categories":"Code","date":1408293850,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2623-sequence-median/","permalink":"https://xuanwo.io/2014/08/17/poj-2623-sequence-median/","publishdate":"2014-08-17T16:44:10Z","relpermalink":"/2014/08/17/poj-2623-sequence-median/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2623\n理解 快速排序的简单应用，注意最后的输出格式。\n","tags":null,"title":"POJ 2623 Sequence Median","url":"/2014/08/17/poj-2623-sequence-median/"},{"categories":"Code","date":1408293376,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2608-soundex/","permalink":"https://xuanwo.io/2014/08/17/poj-2608-soundex/","publishdate":"2014-08-17T16:36:16Z","relpermalink":"/2014/08/17/poj-2608-soundex/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2608\n理解 输出字符串所对应的值，没有的话，就不输出。不过现在有点后悔，是不是用Map来做会更好一些。\n","tags":null,"title":"POJ 2608 Soundex","url":"/2014/08/17/poj-2608-soundex/"},{"categories":"Code","date":1408293210,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2602-superlong-sums/","permalink":"https://xuanwo.io/2014/08/17/poj-2602-superlong-sums/","publishdate":"2014-08-17T16:33:30Z","relpermalink":"/2014/08/17/poj-2602-superlong-sums/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2602\n理解 发现开辟一个字符数组，在输入的过程中处理数据。比较简单的大数加法，没有使用Java。\n","tags":null,"title":"POJ 2602 Superlong sums","url":"/2014/08/17/poj-2602-superlong-sums/"},{"categories":"Code","date":1408292945,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2656-unhappy-jinjin/","permalink":"https://xuanwo.io/2014/08/17/poj-2656-unhappy-jinjin/","publishdate":"2014-08-17T16:29:05Z","relpermalink":"/2014/08/17/poj-2656-unhappy-jinjin/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2656\n理解 在我们学校自己的OJ好像做过一样的题目，恩，一道水题，求学习时间最长的一天。\n","tags":null,"title":"POJ 2656 Unhappy Jinjin","url":"/2014/08/17/poj-2656-unhappy-jinjin/"},{"categories":"Code","date":1408292677,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2578-keep-on-truckin/","permalink":"https://xuanwo.io/2014/08/17/poj-2578-keep-on-truckin/","publishdate":"2014-08-17T16:24:37Z","relpermalink":"/2014/08/17/poj-2578-keep-on-truckin/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2578\n理解 给三个数字，从左到右，看哪个数字先大于168，直到得到一个大于168的数，之前的数全都输出\u0026quot;Crash\u0026rdquo;。\n","tags":null,"title":"POJ 2578 Keep on Truckin'","url":"/2014/08/17/poj-2578-keep-on-truckin/"},{"categories":"Code","date":1408292279,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2551-ones/","permalink":"https://xuanwo.io/2014/08/17/poj-2551-ones/","publishdate":"2014-08-17T16:17:59Z","relpermalink":"/2014/08/17/poj-2551-ones/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2551\n理解 将一个数取下来，然后从1对n本身取模（%），之后将取模之后的数字乘以10加1，再取模，直到取模为0。 比如当n=3时，变化的情况是这样的：3-\u0026gt;31(余1)-\u0026gt;311(余1)-\u0026gt;3111(整除)\n","tags":null,"title":"POJ 2551 Ones","url":"/2014/08/17/poj-2551-ones/"},{"categories":"Code","date":1408292060,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2521-how-much-did-the-businessman-lose/","permalink":"https://xuanwo.io/2014/08/17/poj-2521-how-much-did-the-businessman-lose/","publishdate":"2014-08-17T16:14:20Z","relpermalink":"/2014/08/17/poj-2521-how-much-did-the-businessman-lose/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2521\n理解 小学的时候经常做的题目啊，只要保持头脑清醒，计算出交易过程中因为假币损失的钱。\n","tags":null,"title":"POJ 2521 How much did the businessman lose","url":"/2014/08/17/poj-2521-how-much-did-the-businessman-lose/"},{"categories":"Code","date":1408291707,"kind":"page","lang":"zh-hans","objectID":"/2014/08/17/poj-2509-peters-smokes/","permalink":"https://xuanwo.io/2014/08/17/poj-2509-peters-smokes/","publishdate":"2014-08-17T16:08:27Z","relpermalink":"/2014/08/17/poj-2509-peters-smokes/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2509\n理解 模拟每个人吸烟的过程即可。\n","tags":null,"title":"POJ 2509 Peter's smokes","url":"/2014/08/17/poj-2509-peters-smokes/"},{"categories":"Code","date":1408232505,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2503-babelfish/","permalink":"https://xuanwo.io/2014/08/16/poj-2503-babelfish/","publishdate":"2014-08-16T23:41:45Z","relpermalink":"/2014/08/16/poj-2503-babelfish/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2503\n理解 STL里面Map的运用，分别建立映射就好，不难。\n","tags":null,"title":"POJ 2503 Babelfish","url":"/2014/08/16/poj-2503-babelfish/"},{"categories":"Code","date":1408232184,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2453-an-easy-problem/","permalink":"https://xuanwo.io/2014/08/16/poj-2453-an-easy-problem/","publishdate":"2014-08-16T23:36:24Z","relpermalink":"/2014/08/16/poj-2453-an-easy-problem/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2453\n理解 位运算碉堡了，着实强大。\n","tags":null,"title":"POJ 2453 An Easy Problem","url":"/2014/08/16/poj-2453-an-easy-problem/"},{"categories":"Code","date":1408232017,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2478-farey-sequence/","permalink":"https://xuanwo.io/2014/08/16/poj-2478-farey-sequence/","publishdate":"2014-08-16T23:33:37Z","relpermalink":"/2014/08/16/poj-2478-farey-sequence/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2478\n理解 欧拉函数的运用，套用了模板。\n","tags":null,"title":"POJ 2478 Farey Sequence","url":"/2014/08/16/poj-2478-farey-sequence/"},{"categories":"Code","date":1408226690,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2407-relatives/","permalink":"https://xuanwo.io/2014/08/16/poj-2407-relatives/","publishdate":"2014-08-16T22:04:50Z","relpermalink":"/2014/08/16/poj-2407-relatives/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2407\n理解 套用欧拉公式，其实不懂= =。\n","tags":null,"title":"POJ 2407 Relatives","url":"/2014/08/16/poj-2407-relatives/"},{"categories":"Code","date":1408205574,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2498-stupid/","permalink":"https://xuanwo.io/2014/08/16/poj-2498-stupid/","publishdate":"2014-08-16T16:12:54Z","relpermalink":"/2014/08/16/poj-2498-stupid/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2498\n理解 英文题= =。按照{9,3,7}的顺序，从后往前乘，最后的乘积相加可以被十整除。但是有一个数字看不清了，要求计算出那个数字，并且输出整个数。\n","tags":null,"title":"POJ 2498 StuPId","url":"/2014/08/16/poj-2498-stupid/"},{"categories":"Code","date":1408203331,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2371-questions-and-answers/","permalink":"https://xuanwo.io/2014/08/16/poj-2371-questions-and-answers/","publishdate":"2014-08-16T15:35:31Z","relpermalink":"/2014/08/16/poj-2371-questions-and-answers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2371\n理解 排序题，输出制定的i-th的数。\n","tags":null,"title":"POJ 2371 Questions and answers","url":"/2014/08/16/poj-2371-questions-and-answers/"},{"categories":"Code","date":1408202635,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2350-above-average/","permalink":"https://xuanwo.io/2014/08/16/poj-2350-above-average/","publishdate":"2014-08-16T15:23:55Z","relpermalink":"/2014/08/16/poj-2350-above-average/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2350\n理解 成绩高于平均成绩的百分比，数据不大，直接暴力做。\n","tags":null,"title":"POJ 2350 Above Average","url":"/2014/08/16/poj-2350-above-average/"},{"categories":"Code","date":1408202387,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2301-beat-the-spread/","permalink":"https://xuanwo.io/2014/08/16/poj-2301-beat-the-spread/","publishdate":"2014-08-16T15:19:47Z","relpermalink":"/2014/08/16/poj-2301-beat-the-spread/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2301\n理解 给定两数之和以及两数之差，求解这两个数，并且要求大数先输出。\n","tags":null,"title":"POJ 2301 Beat the Spread!","url":"/2014/08/16/poj-2301-beat-the-spread/"},{"categories":"Code","date":1408202133,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2390-bank-interest/","permalink":"https://xuanwo.io/2014/08/16/poj-2390-bank-interest/","publishdate":"2014-08-16T15:15:33Z","relpermalink":"/2014/08/16/poj-2390-bank-interest/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2390\n理解 给定年利率，本金和存款年数，求解到期之后的本息和。找自信专用。\n","tags":null,"title":"POJ 2390 Bank Interest","url":"/2014/08/16/poj-2390-bank-interest/"},{"categories":"Code","date":1408201953,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2388-whos-in-the-middle/","permalink":"https://xuanwo.io/2014/08/16/poj-2388-whos-in-the-middle/","publishdate":"2014-08-16T15:12:33Z","relpermalink":"/2014/08/16/poj-2388-whos-in-the-middle/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2388\n理解 纯排序题，直接用sort水过。\n","tags":null,"title":"POJ 2388 Who's in the Middle","url":"/2014/08/16/poj-2388-whos-in-the-middle/"},{"categories":"Code","date":1408201556,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2229-sumsets/","permalink":"https://xuanwo.io/2014/08/16/poj-2229-sumsets/","publishdate":"2014-08-16T15:05:56Z","relpermalink":"/2014/08/16/poj-2229-sumsets/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2229\n理解 比较简单的DP： 当n为奇数时，有dp[n] = dp[n-1] 当n为偶数时，可以根据1的存在与否分成两种情况：\n 有1，则有dp[n]的一部分是dp[n-2] 没有1，则有dp[n]的另一部分是d[n/2] ","tags":null,"title":"POJ 2229 Sumsets","url":"/2014/08/16/poj-2229-sumsets/"},{"categories":"Code","date":1408201142,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2249-binomial-showdown/","permalink":"https://xuanwo.io/2014/08/16/poj-2249-binomial-showdown/","publishdate":"2014-08-16T14:59:02Z","relpermalink":"/2014/08/16/poj-2249-binomial-showdown/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2249\n理解 求二项式，直接使用二项式定理～\n","tags":null,"title":"POJ 2249 Binomial Showdown","url":"/2014/08/16/poj-2249-binomial-showdown/"},{"categories":"Code","date":1408200722,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2231-moo-volume/","permalink":"https://xuanwo.io/2014/08/16/poj-2231-moo-volume/","publishdate":"2014-08-16T14:52:02Z","relpermalink":"/2014/08/16/poj-2231-moo-volume/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2231\n理解 打表找规律，排序之后发现：\n1 2 3 4 5 0 1 2 3 4 1 0 1 2 3 2 1 0 1 2 3 2 1 0 1 4 3 2 1 0 把下面矩阵的所有数字相加就是所求的结果。\n","tags":null,"title":"POJ 2231 Moo Volume","url":"/2014/08/16/poj-2231-moo-volume/"},{"categories":"Code","date":1408200372,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2262-goldbachs-conjecture/","permalink":"https://xuanwo.io/2014/08/16/poj-2262-goldbachs-conjecture/","publishdate":"2014-08-16T14:46:12Z","relpermalink":"/2014/08/16/poj-2262-goldbachs-conjecture/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2262\n理解 给定大于6的偶数X，求满足X=a+b且|a-b|最大的那对，直接暴力做，事实上，找到的第一对就是满足条件的那对。\n","tags":null,"title":"POJ 2262 Goldbach's Conjecture","url":"/2014/08/16/poj-2262-goldbachs-conjecture/"},{"categories":"Code","date":1408200093,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2196-specialized-four-digit-numbers/","permalink":"https://xuanwo.io/2014/08/16/poj-2196-specialized-four-digit-numbers/","publishdate":"2014-08-16T14:41:33Z","relpermalink":"/2014/08/16/poj-2196-specialized-four-digit-numbers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2196\n理解 直接暴力做，逐个判断是不是符合条件。\n","tags":null,"title":"POJ 2196 Specialized Four-Digit Numbers","url":"/2014/08/16/poj-2196-specialized-four-digit-numbers/"},{"categories":"Code","date":1408199752,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2192-zipper/","permalink":"https://xuanwo.io/2014/08/16/poj-2192-zipper/","publishdate":"2014-08-16T14:35:52Z","relpermalink":"/2014/08/16/poj-2192-zipper/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2192\n理解 动态规划的核心方程：b.dp[i][j-1]==1\u0026amp;\u0026amp;str2[j-1]==str3[i+j-1]\n","tags":null,"title":"POJ 2192 Zipper","url":"/2014/08/16/poj-2192-zipper/"},{"categories":"Code","date":1408199101,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2190-isbn/","permalink":"https://xuanwo.io/2014/08/16/poj-2190-isbn/","publishdate":"2014-08-16T14:25:01Z","relpermalink":"/2014/08/16/poj-2190-isbn/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2190\n理解 题目不难，只需求解给定一个数为ISBN数十，？上那个数字代表的是几。需要考虑的一些特殊情况：\n 无解的时候，输出-1 末尾数为10的时候，输出X 如果结果没有修改，要直接初始化为-1 ","tags":null,"title":"POJ 2190 ISBN","url":"/2014/08/16/poj-2190-isbn/"},{"categories":"Code","date":1408150206,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2141-message-decowding/","permalink":"https://xuanwo.io/2014/08/16/poj-2141-message-decowding/","publishdate":"2014-08-16T00:50:06Z","relpermalink":"/2014/08/16/poj-2141-message-decowding/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2141\n理解 简单的密码转换，注意输出，要以大写字母输出。\n","tags":null,"title":"POJ 2141 Message Decowding","url":"/2014/08/16/poj-2141-message-decowding/"},{"categories":"Code","date":1408149630,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2316-spin/","permalink":"https://xuanwo.io/2014/08/16/poj-2316-spin/","publishdate":"2014-08-16T00:40:30Z","relpermalink":"/2014/08/16/poj-2316-spin/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2316\n理解 所有数据相加，再对10取模，因为每个字符串的长度都是相同的～\n","tags":null,"title":"POJ 2316 SPIN","url":"/2014/08/16/poj-2316-spin/"},{"categories":"Code","date":1408149469,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2136-vertical-histogram/","permalink":"https://xuanwo.io/2014/08/16/poj-2136-vertical-histogram/","publishdate":"2014-08-16T00:37:49Z","relpermalink":"/2014/08/16/poj-2136-vertical-histogram/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2136\n理解 题目不难，但是最后的输出各种蛋疼，慢慢调试吧。。。。\n","tags":null,"title":"POJ 2136 Vertical Histogram","url":"/2014/08/16/poj-2136-vertical-histogram/"},{"categories":"Code","date":1408148886,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2140-herd-sums/","permalink":"https://xuanwo.io/2014/08/16/poj-2140-herd-sums/","publishdate":"2014-08-16T00:28:06Z","relpermalink":"/2014/08/16/poj-2140-herd-sums/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2140\n理解 很有意思的一道题，很显然，i不会超过n/2。 如果是奇数，我只要考虑最中间的两个数；如果是奇数，我只要在上面计算的结果上再加1。\n","tags":null,"title":"POJ 2140 Herd Sums","url":"/2014/08/16/poj-2140-herd-sums/"},{"categories":"Code","date":1408148671,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2105-ip-address/","permalink":"https://xuanwo.io/2014/08/16/poj-2105-ip-address/","publishdate":"2014-08-16T00:24:31Z","relpermalink":"/2014/08/16/poj-2105-ip-address/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2105\n理解 将表示IP地址的二位数转换成十进制并且分段，使用字符数组即可。\n","tags":null,"title":"POJ 2105 IP Address","url":"/2014/08/16/poj-2105-ip-address/"},{"categories":"Code","date":1408148377,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2070-filling-out-the-team/","permalink":"https://xuanwo.io/2014/08/16/poj-2070-filling-out-the-team/","publishdate":"2014-08-16T00:19:37Z","relpermalink":"/2014/08/16/poj-2070-filling-out-the-team/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2070\n理解 简单的计算题，理解题意之后，就是比较一下浮点数的值。\n","tags":null,"title":"POJ 2070 Filling Out the Team","url":"/2014/08/16/poj-2070-filling-out-the-team/"},{"categories":"Code","date":1408148145,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2002-squares/","permalink":"https://xuanwo.io/2014/08/16/poj-2002-squares/","publishdate":"2014-08-16T00:15:45Z","relpermalink":"/2014/08/16/poj-2002-squares/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2002\n理解 排序之后使用二分搜索，用向量旋转的方法来确定是否可以构成正方形。\n","tags":null,"title":"POJ 2002 Squares","url":"/2014/08/16/poj-2002-squares/"},{"categories":"Code","date":1408147869,"kind":"page","lang":"zh-hans","objectID":"/2014/08/16/poj-2027-no-brainer/","permalink":"https://xuanwo.io/2014/08/16/poj-2027-no-brainer/","publishdate":"2014-08-16T00:11:09Z","relpermalink":"/2014/08/16/poj-2027-no-brainer/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2027\n理解 超级大水题= =，比较一下X和Y的大小。\n","tags":null,"title":"POJ 2027 No Brainer","url":"/2014/08/16/poj-2027-no-brainer/"},{"categories":"Code","date":1408135560,"kind":"page","lang":"zh-hans","objectID":"/2014/08/15/poj-1781-in-danger/","permalink":"https://xuanwo.io/2014/08/15/poj-1781-in-danger/","publishdate":"2014-08-15T20:46:00Z","relpermalink":"/2014/08/15/poj-1781-in-danger/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1781\n理解 同样的，打表找规律，发现当n是2的次方幂时，结果都是1；当n不是2的次方幂时，结果是与比n大的最小的2的次方幂的差值的两倍。\n","tags":null,"title":"POJ 1781 In Danger","url":"/2014/08/15/poj-1781-in-danger/"},{"categories":"Code","date":1408135275,"kind":"page","lang":"zh-hans","objectID":"/2014/08/15/poj-3372-candy-distribution/","permalink":"https://xuanwo.io/2014/08/15/poj-3372-candy-distribution/","publishdate":"2014-08-15T20:41:15Z","relpermalink":"/2014/08/15/poj-3372-candy-distribution/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3372\n理解 找规律的题目，照例打表，发现只有2的次方才符合规律。\n","tags":null,"title":"POJ 3372 Candy Distribution","url":"/2014/08/15/poj-3372-candy-distribution/"},{"categories":"Code","date":1408130932,"kind":"page","lang":"zh-hans","objectID":"/2014/08/15/poj-1969-count-on-canton/","permalink":"https://xuanwo.io/2014/08/15/poj-1969-count-on-canton/","publishdate":"2014-08-15T19:28:52Z","relpermalink":"/2014/08/15/poj-1969-count-on-canton/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1969\n理解 一道找规律的题目，只要把奇偶分开处理，结果很快出来了。\n","tags":null,"title":"POJ 1969 Count on Canton","url":"/2014/08/15/poj-1969-count-on-canton/"},{"categories":"Code","date":1407993600,"kind":"page","lang":"zh-hans","objectID":"/2014/08/14/hexo-usual-problem/","permalink":"https://xuanwo.io/2014/08/14/hexo-usual-problem/","publishdate":"2014-08-14T05:20:00Z","relpermalink":"/2014/08/14/hexo-usual-problem/","summary":"介绍 Hexo是一个非常好用的静态博客生成器，但是由于很多方面的原因，导致在使用过程中经常出现错误。这些错误中，有些是因为自己的设置不当，导致程序报错；有些是因为版本更迭，导致原有的设置失效；而有些，则是Hexo程序本身的BUG。 本文旨在尽可能的解决前两类问题，缓解Hexo项目大量重复issues的现象。当然，我个人的力量是有限的，因此也希望使用Hexo的大家也能一起行动起来，通过提交PR，发布issues或者在下方评论等形式参与到本文档的编辑中来。 同时，也希望有能力的人可以将本文档翻译成英文，以帮助到更多的人。 浏览时，使用Ctrl+F搜索关键词或使用目录来定位问题。\n本文欢迎转载，但是恳请保留贡献者信息，谢谢。\n","tags":["Software","Hexo","Github-Pages","Blog"],"title":"Hexo常见问题解决方案","url":"/2014/08/14/hexo-usual-problem/"},{"categories":"Code","date":1407820740,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1953-world-cup-noise/","permalink":"https://xuanwo.io/2014/08/12/poj-1953-world-cup-noise/","publishdate":"2014-08-12T05:19:00Z","relpermalink":"/2014/08/12/poj-1953-world-cup-noise/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1953\n理解 稍微推了几个，发现是斐波那契数列，水之。\n","tags":null,"title":"POJ 1953 World Cup Noise","url":"/2014/08/12/poj-1953-world-cup-noise/"},{"categories":"Code","date":1407820320,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1833-permutation/","permalink":"https://xuanwo.io/2014/08/12/poj-1833-permutation/","publishdate":"2014-08-12T05:12:00Z","relpermalink":"/2014/08/12/poj-1833-permutation/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1833\n理解 再次使用next_permutation水题。不过G++会超时，C++400ms+。\n","tags":null,"title":"POJ 1833 排列","url":"/2014/08/12/poj-1833-permutation/"},{"categories":"Code","date":1407819780,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1611-the-suspects/","permalink":"https://xuanwo.io/2014/08/12/poj-1611-the-suspects/","publishdate":"2014-08-12T05:03:00Z","relpermalink":"/2014/08/12/poj-1611-the-suspects/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1611\n理解 比较简单的并查集，照着模板敲。\n","tags":null,"title":"POJ 1611 The Suspects","url":"/2014/08/12/poj-1611-the-suspects/"},{"categories":"Code","date":1407819480,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1562-oil-deposits/","permalink":"https://xuanwo.io/2014/08/12/poj-1562-oil-deposits/","publishdate":"2014-08-12T04:58:00Z","relpermalink":"/2014/08/12/poj-1562-oil-deposits/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1562\n理解 使用DFS搜索石油所在的区块。\n","tags":null,"title":"POJ 1562 Oil Deposits","url":"/2014/08/12/poj-1562-oil-deposits/"},{"categories":"Code","date":1407819240,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1411-calling-extraterrestrial-intelligence-again/","permalink":"https://xuanwo.io/2014/08/12/poj-1411-calling-extraterrestrial-intelligence-again/","publishdate":"2014-08-12T04:54:00Z","relpermalink":"/2014/08/12/poj-1411-calling-extraterrestrial-intelligence-again/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1411\n理解 打表暴力水过，估计是因为数据弱= =。\n","tags":null,"title":"POJ 1411 Calling Extraterrestrial Intelligence Again","url":"/2014/08/12/poj-1411-calling-extraterrestrial-intelligence-again/"},{"categories":"Code","date":1407819060,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1488-tex-quotes/","permalink":"https://xuanwo.io/2014/08/12/poj-1488-tex-quotes/","publishdate":"2014-08-12T04:51:00Z","relpermalink":"/2014/08/12/poj-1488-tex-quotes/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1488\n理解 字符串处理- -，慢慢坑就是了。。注意输入方式，有空格的时候要用getline。\n","tags":null,"title":"POJ 1488 TEX Quotes","url":"/2014/08/12/poj-1488-tex-quotes/"},{"categories":"Code","date":1407818220,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1455-crazy-tea-party/","permalink":"https://xuanwo.io/2014/08/12/poj-1455-crazy-tea-party/","publishdate":"2014-08-12T04:37:00Z","relpermalink":"/2014/08/12/poj-1455-crazy-tea-party/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1455\n理解 把n分成两部分，分别排序。唉= =，不机智了。。\n","tags":null,"title":"POJ 1455 Crazy tea party","url":"/2014/08/12/poj-1455-crazy-tea-party/"},{"categories":"Code","date":1407817920,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1477-box-of-bricks/","permalink":"https://xuanwo.io/2014/08/12/poj-1477-box-of-bricks/","publishdate":"2014-08-12T04:32:00Z","relpermalink":"/2014/08/12/poj-1477-box-of-bricks/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1477\n理解 只有比平均数还要大的柱子需要移动，而移动的具体方式不需要考虑，明白了这一点就是水题了。\n","tags":null,"title":"POJ 1477 Box of Bricks","url":"/2014/08/12/poj-1477-box-of-bricks/"},{"categories":"Code","date":1407817620,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1426-find-the-multiple/","permalink":"https://xuanwo.io/2014/08/12/poj-1426-find-the-multiple/","publishdate":"2014-08-12T04:27:00Z","relpermalink":"/2014/08/12/poj-1426-find-the-multiple/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1426\n理解 使用了BFS来搜索满足条件的数，注意必须使用long long，否则数据不够。\n","tags":null,"title":"POJ 1426 Find The Multiple","url":"/2014/08/12/poj-1426-find-the-multiple/"},{"categories":"Code","date":1407817380,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1458-common-subsequence/","permalink":"https://xuanwo.io/2014/08/12/poj-1458-common-subsequence/","publishdate":"2014-08-12T04:23:00Z","relpermalink":"/2014/08/12/poj-1458-common-subsequence/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1458\n理解 DP的基础题，求最长子序列（LCS）。 状态转移方程伪代码如下：\nif (i == 0 || j == 0) dp[i,j] = 0 else if (X[i] == Y[j]) dp[i,j] = dp[i-1,j-1] + 1 else dp[i,j] = max(dp[i-1,j], dp[i,j-1]) ","tags":null,"title":"POJ 1458 Common Subsequence","url":"/2014/08/12/poj-1458-common-subsequence/"},{"categories":"Code","date":1407817140,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1323-game-prediction/","permalink":"https://xuanwo.io/2014/08/12/poj-1323-game-prediction/","publishdate":"2014-08-12T04:19:00Z","relpermalink":"/2014/08/12/poj-1323-game-prediction/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1323\n理解 最优的方法是出一张比你出的牌大的牌中最小的牌，不过没有严格证明= =。\n","tags":null,"title":"POJ 1323 Game Prediction","url":"/2014/08/12/poj-1323-game-prediction/"},{"categories":"Code","date":1407816660,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1338-ugly-numbers/","permalink":"https://xuanwo.io/2014/08/12/poj-1338-ugly-numbers/","publishdate":"2014-08-12T04:11:00Z","relpermalink":"/2014/08/12/poj-1338-ugly-numbers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1338\n理解 本来貌似是一道很难的题目，不过因为数据比较弱，打表水过。\n","tags":null,"title":"POJ 1338 Ugly Numbers","url":"/2014/08/12/poj-1338-ugly-numbers/"},{"categories":"Code","date":1407816420,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1363-rails/","permalink":"https://xuanwo.io/2014/08/12/poj-1363-rails/","publishdate":"2014-08-12T04:07:00Z","relpermalink":"/2014/08/12/poj-1363-rails/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1363\n理解 一列火车，每个车厢都有编号，都可以单独行使，然后有一个火车站，进去之后，头变成尾，尾变成头，问能不能以输入的顺序出站。使用了STL栈。\n","tags":null,"title":"POJ 1363 Rails","url":"/2014/08/12/poj-1363-rails/"},{"categories":"Code","date":1407805920,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1269-intersecting-lines/","permalink":"https://xuanwo.io/2014/08/12/poj-1269-intersecting-lines/","publishdate":"2014-08-12T01:12:00Z","relpermalink":"/2014/08/12/poj-1269-intersecting-lines/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1269\n理解 几何题= =，各种直线方程用起来，代码量有点大。\n","tags":null,"title":"POJ 1269 Intersecting Lines","url":"/2014/08/12/poj-1269-intersecting-lines/"},{"categories":"Code","date":1407805260,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1183-arctan/","permalink":"https://xuanwo.io/2014/08/12/poj-1183-arctan/","publishdate":"2014-08-12T01:01:00Z","relpermalink":"/2014/08/12/poj-1183-arctan/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1183\n理解 题目不难，但是被数据类型坑了= =。 int不够，long long超时，使用unsigned int过了= =，感谢大神，坑了这么久。。\n","tags":null,"title":"POJ 1183 反正切函数的应用","url":"/2014/08/12/poj-1183-arctan/"},{"categories":"Code","date":1407804900,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1157-little-shop-of-flowers/","permalink":"https://xuanwo.io/2014/08/12/poj-1157-little-shop-of-flowers/","publishdate":"2014-08-12T00:55:00Z","relpermalink":"/2014/08/12/poj-1157-little-shop-of-flowers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1157\n理解 满足的递推方程：dp[i][j]=max(dp[i][j-1],dp[i-1][j-1]+map[i][j])\n","tags":null,"title":"POJ 1157 LITTLE SHOP OF FLOWERS","url":"/2014/08/12/poj-1157-little-shop-of-flowers/"},{"categories":"Code","date":1407804300,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1160-post-office/","permalink":"https://xuanwo.io/2014/08/12/poj-1160-post-office/","publishdate":"2014-08-12T00:45:00Z","relpermalink":"/2014/08/12/poj-1160-post-office/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1160\n理解 很经典的邮局送信的DP问题。 不过提交的时候发现CE，error: call of overloaded 'abs(int)' is ambiguous，修改cmath为math.h之后，发现本机编译失败，添加了cstdlib之后，顺利AC。这中间存在两个问题：第一，不是每一个X.h的库都跟cX命名的库一模一样；第二本地缺少的库可以通过编译，但是OJ不一定能通过。\n","tags":null,"title":"POJ 1160 Post Office","url":"/2014/08/12/poj-1160-post-office/"},{"categories":"Code","date":1407803880,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1159-palindrome/","permalink":"https://xuanwo.io/2014/08/12/poj-1159-palindrome/","publishdate":"2014-08-12T00:38:00Z","relpermalink":"/2014/08/12/poj-1159-palindrome/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1159\n理解 最关键的公式是：\nif (str[i] == str[j]) DP[k][j] = DP[1 - k][j - 1]; else DP[k][j] = min(DP[1 - k][j], DP[k][j - 1]) + 1; 注意到k空间的循环利用，节省了空间，感谢大牛提供的思路。\n","tags":null,"title":"POJ 1159 Palindrome","url":"/2014/08/12/poj-1159-palindrome/"},{"categories":"Code","date":1407803460,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-1051-p-mthbgwb/","permalink":"https://xuanwo.io/2014/08/12/poj-1051-p-mthbgwb/","publishdate":"2014-08-12T00:31:00Z","relpermalink":"/2014/08/12/poj-1051-p-mthbgwb/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1051\n理解 简单的字符串转换，要有耐心= =，debug出翔。\n","tags":null,"title":"POJ 1051 P,MTHBGWB","url":"/2014/08/12/poj-1051-p-mthbgwb/"},{"categories":"Code","date":1407802740,"kind":"page","lang":"zh-hans","objectID":"/2014/08/12/poj-3751-date-transfer/","permalink":"https://xuanwo.io/2014/08/12/poj-3751-date-transfer/","publishdate":"2014-08-12T00:19:00Z","relpermalink":"/2014/08/12/poj-3751-date-transfer/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3751\n理解 通过标记来判断正午和午夜，水题。\n","tags":null,"title":"POJ 3751 时间日期格式转换","url":"/2014/08/12/poj-3751-date-transfer/"},{"categories":"Code","date":1407418260,"kind":"page","lang":"zh-hans","objectID":"/2014/08/07/cloud9/","permalink":"https://xuanwo.io/2014/08/07/cloud9/","publishdate":"2014-08-07T13:31:00Z","relpermalink":"/2014/08/07/cloud9/","summary":"废话先不说，首先来一张大图秀一下编辑状态下的页面： ","tags":["Web"],"title":"强大且配置项丰富的在线IDE应用——Cloud9","url":"/2014/08/07/cloud9/"},{"categories":"Code","date":1407365520,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-1251-jungle-roads/","permalink":"https://xuanwo.io/2014/08/06/poj-1251-jungle-roads/","publishdate":"2014-08-06T22:52:00Z","relpermalink":"/2014/08/06/poj-1251-jungle-roads/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1251\n理解 同样是练习题，使用了Kruskal算法，对着模板敲的，理解的还不是很透彻。\n补充一个Prim算法的代码，神模板好评，自己对最小生成树的理解有了很大提高。在凌晨时分debug了半天，通过逐行打印，最终确认我错误的原因，没有进行初始化。虽然有点哭笑不得，但是感觉自己花了这三个小时是值得的。以后要避免这样的错误。\n","tags":null,"title":"POJ 1251 Jungle Roads","url":"/2014/08/06/poj-1251-jungle-roads/"},{"categories":"Code","date":1407365220,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-2485-highways/","permalink":"https://xuanwo.io/2014/08/06/poj-2485-highways/","publishdate":"2014-08-06T22:47:00Z","relpermalink":"/2014/08/06/poj-2485-highways/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2485\n理解 拖了很久的最小生成树练习题，对着模板想了很久。\n","tags":null,"title":"POJ 2485 Highways","url":"/2014/08/06/poj-2485-highways/"},{"categories":"Code","date":1407340800,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-3981-string-swap/","permalink":"https://xuanwo.io/2014/08/06/poj-3981-string-swap/","publishdate":"2014-08-06T16:00:00Z","relpermalink":"/2014/08/06/poj-3981-string-swap/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3981\n理解 大水题一道，字符串函数的简单运用\n","tags":null,"title":"POJ 3981 字符串替换","url":"/2014/08/06/poj-3981-string-swap/"},{"categories":"Code","date":1407338580,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-2586-y2k-accounting-bug/","permalink":"https://xuanwo.io/2014/08/06/poj-2586-y2k-accounting-bug/","publishdate":"2014-08-06T15:23:00Z","relpermalink":"/2014/08/06/poj-2586-y2k-accounting-bug/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2586\n理解 总共有五种情况： 1、若SSSSD亏空，那么全年可能最大盈利情况为: SSSSDSSSSDSS 2、若SSSDD亏空，那么全年可能最大盈利情况为：SSSDDSSSDDSS 3、若SSDDD亏空，那么全年可能最大盈利情况为: SSDDDSSDDDSS 4、若SDDDD亏空，那么全年可能最大盈利情况为: SDDDDSDDDDSD 5、若DDDDD亏空，那么全年可能最大盈利情况为: DDDDDDDDDDDD\n","tags":null,"title":"POJ 2586 Y2K Accounting Bug","url":"/2014/08/06/poj-2586-y2k-accounting-bug/"},{"categories":"Code","date":1407337380,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-2389-bull-math/","permalink":"https://xuanwo.io/2014/08/06/poj-2389-bull-math/","publishdate":"2014-08-06T15:03:00Z","relpermalink":"/2014/08/06/poj-2389-bull-math/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2389\n理解 没什么好说的，java大数模板水之。\n","tags":null,"title":"POJ 2389 Bull Math","url":"/2014/08/06/poj-2389-bull-math/"},{"categories":"Code","date":1407336240,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-2080-calendar/","permalink":"https://xuanwo.io/2014/08/06/poj-2080-calendar/","publishdate":"2014-08-06T14:44:00Z","relpermalink":"/2014/08/06/poj-2080-calendar/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2080\n理解 完全的模拟题。将给定的天数转化为年月日，注意闰年，大小月。\n","tags":null,"title":"POJ 2080 Calendar","url":"/2014/08/06/poj-2080-calendar/"},{"categories":"Code","date":1407335580,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-2039-to-and-fro/","permalink":"https://xuanwo.io/2014/08/06/poj-2039-to-and-fro/","publishdate":"2014-08-06T14:33:00Z","relpermalink":"/2014/08/06/poj-2039-to-and-fro/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2039\n理解 找规律的题目。 首先看一下加密的方式： 原文为theresonoplacelikehomeonasnowynightx，分成N列来写，没有写满的用x填充，写成如下队列：\nt o i o y h p k n n e l e a i r a h s g e c o n h s e m o t n l e w x 对于奇数行，从左向后书写，对于偶数行，从右向左书写，得到密文： toioynnkpheleaigshareconhtomesnlewx 显然，解密的方式就是原样还原回去。 一共进行N次读入，对于第i次读取，用j定位行数。 如果j为偶数，输出N*j+i； 如果j为奇数，输出N*(j+1)-1-i。\n","tags":null,"title":"POJ 2039 To and Fro","url":"/2014/08/06/poj-2039-to-and-fro/"},{"categories":"Code","date":1407334800,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-2019-cornfields/","permalink":"https://xuanwo.io/2014/08/06/poj-2019-cornfields/","publishdate":"2014-08-06T14:20:00Z","relpermalink":"/2014/08/06/poj-2019-cornfields/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2019\n理解 暴力水过的= =，大牛说是RMQ的题目，要是POJ数据强的话，估计就超时了。\n","tags":null,"title":"POJ 2019 Cornfields","url":"/2014/08/06/poj-2019-cornfields/"},{"categories":"Code","date":1407334380,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-2028-when-can-we-meet/","permalink":"https://xuanwo.io/2014/08/06/poj-2028-when-can-we-meet/","publishdate":"2014-08-06T14:13:00Z","relpermalink":"/2014/08/06/poj-2028-when-can-we-meet/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2028\n理解 一边输入一边记录开会最多且最近的那天。\n","tags":null,"title":"POJ 2028 When Can We Meet?","url":"/2014/08/06/poj-2028-when-can-we-meet/"},{"categories":"Code","date":1407333960,"kind":"page","lang":"zh-hans","objectID":"/2014/08/06/poj-2017-speed-limit/","permalink":"https://xuanwo.io/2014/08/06/poj-2017-speed-limit/","publishdate":"2014-08-06T14:06:00Z","relpermalink":"/2014/08/06/poj-2017-speed-limit/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2017\n理解 一道比较简单的模拟，跨项累加。\n","tags":null,"title":"POJ 2017 Speed Limit","url":"/2014/08/06/poj-2017-speed-limit/"},{"categories":"Code","date":1407274800,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-2013-symmetric-order/","permalink":"https://xuanwo.io/2014/08/05/poj-2013-symmetric-order/","publishdate":"2014-08-05T21:40:00Z","relpermalink":"/2014/08/05/poj-2013-symmetric-order/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2013\n理解 一组字符串，从短到长再到短排列，相同长短的字符串按照字母表顺序排列。\n","tags":null,"title":"POJ 2013 Symmetric Order","url":"/2014/08/05/poj-2013-symmetric-order/"},{"categories":"Code","date":1407272520,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-2000-gold-coins/","permalink":"https://xuanwo.io/2014/08/05/poj-2000-gold-coins/","publishdate":"2014-08-05T21:02:00Z","relpermalink":"/2014/08/05/poj-2000-gold-coins/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2000\n理解 求N天得到多少个金币，第一天得到1个，第二、三天得到2个，第四、五、六天得到3个。\n","tags":null,"title":"POJ 2000 Gold Coins","url":"/2014/08/05/poj-2000-gold-coins/"},{"categories":"Code","date":1407271860,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-1939-diplomatic-license/","permalink":"https://xuanwo.io/2014/08/05/poj-1939-diplomatic-license/","publishdate":"2014-08-05T20:51:00Z","relpermalink":"/2014/08/05/poj-1939-diplomatic-license/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1939\n理解 求多边形相邻两个点的中点= =，这是英语题吧。。。\n","tags":null,"title":"POJ 1939 Diplomatic License","url":"/2014/08/05/poj-1939-diplomatic-license/"},{"categories":"Code","date":1407271260,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-1936-all-in-all/","permalink":"https://xuanwo.io/2014/08/05/poj-1936-all-in-all/","publishdate":"2014-08-05T20:41:00Z","relpermalink":"/2014/08/05/poj-1936-all-in-all/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1936\n理解 字符串的题目。因为数据水所以这是一道水题，要是数据再强一点估计就TLE了。\n","tags":null,"title":"POJ 1936 All in All","url":"/2014/08/05/poj-1936-all-in-all/"},{"categories":"Code","date":1407270960,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-1922-ride-to-school/","permalink":"https://xuanwo.io/2014/08/05/poj-1922-ride-to-school/","publishdate":"2014-08-05T20:36:00Z","relpermalink":"/2014/08/05/poj-1922-ride-to-school/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1922\n理解 第一眼感觉就是贪心，只要选择最快的单车就好，不用考虑中间的过程。\n","tags":null,"title":"POJ 1922 Ride to School","url":"/2014/08/05/poj-1922-ride-to-school/"},{"categories":"Code","date":1407270660,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-1862-stripies/","permalink":"https://xuanwo.io/2014/08/05/poj-1862-stripies/","publishdate":"2014-08-05T20:31:00Z","relpermalink":"/2014/08/05/poj-1862-stripies/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1862\n理解 原先质量越大的，如果越先被计算，那么开根号的次数就会越多，相比之下，最终结果就会越小。最后再排一下序就好。\n","tags":null,"title":"POJ 1862 Stripies","url":"/2014/08/05/poj-1862-stripies/"},{"categories":"Code","date":1407258540,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-1844-sum/","permalink":"https://xuanwo.io/2014/08/05/poj-1844-sum/","publishdate":"2014-08-05T17:09:00Z","relpermalink":"/2014/08/05/poj-1844-sum/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1844\n理解 有这样两种情况：\n Sum(i) == S ，那么很明显 i 就是答案,直接输出即可。 Sum(i) \u0026gt; S , 从 i 开始,依次往后面 +1 枚举 ，只要遇到 (Sum(i) - S) % 2 == 0 输出答案就可以了。 ","tags":null,"title":"POJ 1844 Sum","url":"/2014/08/05/poj-1844-sum/"},{"categories":"Code","date":1407255180,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-1799-yeehaa/","permalink":"https://xuanwo.io/2014/08/05/poj-1799-yeehaa/","publishdate":"2014-08-05T16:13:00Z","relpermalink":"/2014/08/05/poj-1799-yeehaa/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1799\n理解 借用某大神图： ","tags":null,"title":"POJ 1799 Yeehaa!","url":"/2014/08/05/poj-1799-yeehaa/"},{"categories":"Code","date":1407254220,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-1731-orders/","permalink":"https://xuanwo.io/2014/08/05/poj-1731-orders/","publishdate":"2014-08-05T15:57:00Z","relpermalink":"/2014/08/05/poj-1731-orders/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1731\n理解 全排列的简单运用\n","tags":null,"title":"POJ 1731 Orders","url":"/2014/08/05/poj-1731-orders/"},{"categories":"Code","date":1407253670,"kind":"page","lang":"zh-hans","objectID":"/2014/08/05/poj-1664-devide-apples/","permalink":"https://xuanwo.io/2014/08/05/poj-1664-devide-apples/","publishdate":"2014-08-05T15:47:50Z","relpermalink":"/2014/08/05/poj-1664-devide-apples/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1664\n理解 有两种情况：\n 至少空出一个盘子不放（相对于目前），则转化为在(n-1)个盘子里放m个苹果，在剩下的盘子里放入0个苹果，即apple(m,n-1)； 所有盘子至少放入一个。先在每个盘子里都放入1个苹果，剩下m-n个苹果，再在n个盘子里进行放置。即apple(m-n,n)。 然后是结束的条件，有三种。 当m==0时，苹果已经放完，只有一种情况，即不放置，返回1； 当n==1时，只有一个盘子可以放置，返回1； 当m\u0026lt;n时，苹果数小于盘子数，和将m个苹果放入m个盘子情况相同。 ","tags":null,"title":"POJ 1664 放苹果","url":"/2014/08/05/poj-1664-devide-apples/"},{"categories":"Code","date":1407068861,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1663-number-steps/","permalink":"https://xuanwo.io/2014/08/03/poj-1663-number-steps/","publishdate":"2014-08-03T12:27:41Z","relpermalink":"/2014/08/03/poj-1663-number-steps/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1663\n理解 发现奇偶之间的规律之后，这也就是一道水题。\n","tags":null,"title":"POJ 1663 Max Factor","url":"/2014/08/03/poj-1663-number-steps/"},{"categories":"Code","date":1407068380,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1658-evas-problem/","permalink":"https://xuanwo.io/2014/08/03/poj-1658-evas-problem/","publishdate":"2014-08-03T12:19:40Z","relpermalink":"/2014/08/03/poj-1658-evas-problem/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1658\n理解 额，水题一枚，直接算就好\n","tags":null,"title":"POJ 1658 Eva's Problem","url":"/2014/08/03/poj-1658-evas-problem/"},{"categories":"Code","date":1407068199,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1604-just-the-facts/","permalink":"https://xuanwo.io/2014/08/03/poj-1604-just-the-facts/","publishdate":"2014-08-03T12:16:39Z","relpermalink":"/2014/08/03/poj-1604-just-the-facts/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1604\n理解 只需要截取后面五位，避免超过int的范围\n","tags":null,"title":"POJ 1604 Just the Facts","url":"/2014/08/03/poj-1604-just-the-facts/"},{"categories":"Code","date":1407067224,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1579-function-run-fun/","permalink":"https://xuanwo.io/2014/08/03/poj-1579-function-run-fun/","publishdate":"2014-08-03T12:00:24Z","relpermalink":"/2014/08/03/poj-1579-function-run-fun/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1579\n理解 题目很简单，就是递归。但是直接递归会导致超时，这里直接处理一下，超过20全都当作20来计算。\n","tags":null,"title":"POJ 1579 Function Run Fun","url":"/2014/08/03/poj-1579-function-run-fun/"},{"categories":"Code","date":1407066873,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1575-easier-done-than-said/","permalink":"https://xuanwo.io/2014/08/03/poj-1575-easier-done-than-said/","publishdate":"2014-08-03T11:54:33Z","relpermalink":"/2014/08/03/poj-1575-easier-done-than-said/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1575\n理解 运用三种标记，分别标记三种情况。对每一次字符读入均进行判断，一旦遇到不符合条件的，就直接退出循环。\n","tags":null,"title":"POJ 1575 Easier Done Than Said?","url":"/2014/08/03/poj-1575-easier-done-than-said/"},{"categories":"Code","date":1407066216,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1565-skew-number/","permalink":"https://xuanwo.io/2014/08/03/poj-1565-skew-number/","publishdate":"2014-08-03T11:43:36Z","relpermalink":"/2014/08/03/poj-1565-skew-number/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1565\n理解 不难，按照规则计算即可，注意大数的处理。\n","tags":null,"title":"POJ 1565 Skew数","url":"/2014/08/03/poj-1565-skew-number/"},{"categories":"Code","date":1407066011,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1552-doubles/","permalink":"https://xuanwo.io/2014/08/03/poj-1552-doubles/","publishdate":"2014-08-03T11:40:11Z","relpermalink":"/2014/08/03/poj-1552-doubles/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1552\n理解 直接开一个数组，两个循环判断后一个数是不是前一个数的两倍。暴力做的，没有超时。\n","tags":null,"title":"POJ 1552 Doubles","url":"/2014/08/03/poj-1552-doubles/"},{"categories":"Code","date":1407065787,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1543-perfect-cubes/","permalink":"https://xuanwo.io/2014/08/03/poj-1543-perfect-cubes/","publishdate":"2014-08-03T11:36:27Z","relpermalink":"/2014/08/03/poj-1543-perfect-cubes/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1543\n理解 暴力提交过了= =，怪我喽？\n","tags":null,"title":"POJ 1543 Perfect Cubes","url":"/2014/08/03/poj-1543-perfect-cubes/"},{"categories":"Code","date":1407065144,"kind":"page","lang":"zh-hans","objectID":"/2014/08/03/poj-1405-heritage/","permalink":"https://xuanwo.io/2014/08/03/poj-1405-heritage/","publishdate":"2014-08-03T11:25:44Z","relpermalink":"/2014/08/03/poj-1405-heritage/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1405\n理解 可以得出递推关系X(n+1) = Xn * X(n-1) + 1，考虑到数据较大，使用Java大数类A掉\n","tags":null,"title":"POJ 1405 Heritage","url":"/2014/08/03/poj-1405-heritage/"},{"categories":"Code","date":1406993851,"kind":"page","lang":"zh-hans","objectID":"/2014/08/02/poj-1979-red-and-black/","permalink":"https://xuanwo.io/2014/08/02/poj-1979-red-and-black/","publishdate":"2014-08-02T15:37:31Z","relpermalink":"/2014/08/02/poj-1979-red-and-black/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1979\n理解 一个比较简单的DFS练习题\n","tags":null,"title":"POJ 1979 Red and Black","url":"/2014/08/02/poj-1979-red-and-black/"},{"categories":"Code","date":1406262898,"kind":"page","lang":"zh-hans","objectID":"/2014/07/25/poj-1528-perfection/","permalink":"https://xuanwo.io/2014/07/25/poj-1528-perfection/","publishdate":"2014-07-25T04:34:58Z","relpermalink":"/2014/07/25/poj-1528-perfection/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1528\n理解  一个数n的正因数之和等于n则输出PERFECT 大于n，输出ABUNDANT 小于n，输出DEFICIENT  注意：因数不包括它本身\n","tags":null,"title":"POJ 1528 Perfection","url":"/2014/07/25/poj-1528-perfection/"},{"categories":"Code","date":1406262555,"kind":"page","lang":"zh-hans","objectID":"/2014/07/25/poj-1519-digital-roots/","permalink":"https://xuanwo.io/2014/07/25/poj-1519-digital-roots/","publishdate":"2014-07-25T04:29:15Z","relpermalink":"/2014/07/25/poj-1519-digital-roots/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1519\n理解 这不就是弃九法么。把每个位置上数字相加迭代即可，但是多次WA，看了discuss才知道原来数据到了2000位的，只能用数组模拟。\n","tags":null,"title":"POJ 1519 Digital Roots","url":"/2014/07/25/poj-1519-digital-roots/"},{"categories":"Code","date":1406260819,"kind":"page","lang":"zh-hans","objectID":"/2014/07/25/poj-1517-u-calculate-e/","permalink":"https://xuanwo.io/2014/07/25/poj-1517-u-calculate-e/","publishdate":"2014-07-25T04:00:19Z","relpermalink":"/2014/07/25/poj-1517-u-calculate-e/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1517\n理解 计算e的值。太自信，没有用打表，结果WA了两发，蛋疼。\n","tags":null,"title":"POJ 1517 u Calculate e","url":"/2014/07/25/poj-1517-u-calculate-e/"},{"categories":"Code","date":1406259650,"kind":"page","lang":"zh-hans","objectID":"/2014/07/25/poj-1504-adding-reversed-numbers/","permalink":"https://xuanwo.io/2014/07/25/poj-1504-adding-reversed-numbers/","publishdate":"2014-07-25T03:40:50Z","relpermalink":"/2014/07/25/poj-1504-adding-reversed-numbers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1504\n理解 同样是长长的题目，其实是要求把数字从左到右相加，本质是要用字符数组模拟加法。当然，用java会更快一点，不过这次选择了用C++来写。姿势不是很优美，代码太丑陋了，应该有更优美的写法。\n","tags":null,"title":"POJ 1504 Adding Reversed Numbers","url":"/2014/07/25/poj-1504-adding-reversed-numbers/"},{"categories":"Code","date":1406257151,"kind":"page","lang":"zh-hans","objectID":"/2014/07/25/poj-1493-machined-surfaces/","permalink":"https://xuanwo.io/2014/07/25/poj-1493-machined-surfaces/","publishdate":"2014-07-25T02:59:11Z","relpermalink":"/2014/07/25/poj-1493-machined-surfaces/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1493\n理解 题目虽然这么长，但是意思很简单，就是求左右合并之后中间剩下的空格数量。分别求出每行的空格数，排序，跟最小真相减之后叠加即可。\n","tags":null,"title":"POJ 1493 Machined Surfaces","url":"/2014/07/25/poj-1493-machined-surfaces/"},{"categories":"Code","date":1406167071,"kind":"page","lang":"zh-hans","objectID":"/2014/07/24/poj-2891-strange-way-to-express-integers/","permalink":"https://xuanwo.io/2014/07/24/poj-2891-strange-way-to-express-integers/","publishdate":"2014-07-24T01:57:51Z","relpermalink":"/2014/07/24/poj-2891-strange-way-to-express-integers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2891\n理解 做的第一道关于扩展欧几里德方程的题目，还不够。\n","tags":null,"title":"POJ 2891 Strange Way to Express Integers","url":"/2014/07/24/poj-2891-strange-way-to-express-integers/"},{"categories":"Code","date":1406159416,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-3518-prime-gap/","permalink":"https://xuanwo.io/2014/07/23/poj-3518-prime-gap/","publishdate":"2014-07-23T23:50:16Z","relpermalink":"/2014/07/23/poj-3518-prime-gap/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3518\n理解 虽然看起来并没有二分计算的代码，但是应用了二分的思想。设两个端点，分别向两个方向扩展，最后的结果就是两个端点的差值。\n","tags":null,"title":"POJ 3518 Prime Gap","url":"/2014/07/23/poj-3518-prime-gap/"},{"categories":"Code","date":1406159229,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-3122-pie/","permalink":"https://xuanwo.io/2014/07/23/poj-3122-pie/","publishdate":"2014-07-23T23:47:09Z","relpermalink":"/2014/07/23/poj-3122-pie/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3122\n理解 这也是一道水题，二分切之。\n","tags":null,"title":"POJ 3122 Pie","url":"/2014/07/23/poj-3122-pie/"},{"categories":"Code","date":1406159041,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-3273-monthly-expense/","permalink":"https://xuanwo.io/2014/07/23/poj-3273-monthly-expense/","publishdate":"2014-07-23T23:44:01Z","relpermalink":"/2014/07/23/poj-3273-monthly-expense/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3273\n理解 也是很久之前的一道题目，简单的二分。\n","tags":null,"title":"POJ 3273 Monthly Expense","url":"/2014/07/23/poj-3273-monthly-expense/"},{"categories":"Code","date":1406158845,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1905-expanding-rods/","permalink":"https://xuanwo.io/2014/07/23/poj-1905-expanding-rods/","publishdate":"2014-07-23T23:40:45Z","relpermalink":"/2014/07/23/poj-1905-expanding-rods/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1905\n理解 很久以前做的题目，是二分法最基础的运用。\n","tags":null,"title":"POJ 1905 Expanding Rods","url":"/2014/07/23/poj-1905-expanding-rods/"},{"categories":"Code","date":1406158278,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-2965-the-pilots-brothers-refrigerator/","permalink":"https://xuanwo.io/2014/07/23/poj-2965-the-pilots-brothers-refrigerator/","publishdate":"2014-07-23T23:31:18Z","relpermalink":"/2014/07/23/poj-2965-the-pilots-brothers-refrigerator/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2965\n理解 参考的某神牛的解法：\n  证明:\n 要使一个为'+'的符号变为\u0026rsquo;-',必须其相应的行和列的操作数为奇数;可以证明,如果'+'位置对应的行和列上每一个位置都进行一次操作,则整个图只有这一'+'位置的符号改变,其余都不会改变. 设置一个4*4的整型数组,初值为零,用于记录每个点的操作数,那么在每个'+'上的行和列的的位置都加1,得到结果模2(因为一个点进行偶数次操作的效果和没进行操作一样),然后计算整型数组中一的 个数即为操作数,'-\u0026lsquo;的位置为要操作的位置(其他原来操作数为偶数的因为操作并不发生效果,因此不进行操作)  只适用于这一道题，POJ上那道棋盘翻转貌似不能通用。\n","tags":null,"title":"POJ 2965 The Pilots Brothers' refrigerator","url":"/2014/07/23/poj-2965-the-pilots-brothers-refrigerator/"},{"categories":"Code","date":1406158012,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1423-big-number/","permalink":"https://xuanwo.io/2014/07/23/poj-1423-big-number/","publishdate":"2014-07-23T23:26:52Z","relpermalink":"/2014/07/23/poj-1423-big-number/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1423\n理解 又是大数据的题目，果断用Java来做，不过还是用到了取对数得操作。\n","tags":null,"title":"POJ 1423 Big Number","url":"/2014/07/23/poj-1423-big-number/"},{"categories":"Code","date":1406126885,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1401-factorial/","permalink":"https://xuanwo.io/2014/07/23/poj-1401-factorial/","publishdate":"2014-07-23T14:48:05Z","relpermalink":"/2014/07/23/poj-1401-factorial/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1401\n理解 一开始惊讶地发现，每个数除以4之后都跟答案比较接近，然后打算开始偷鸡，结果失败了= =。实际上，是每一个数不停地除以5，寻找10的因子的过程。\n","tags":null,"title":"POJ 1401 Factorial","url":"/2014/07/23/poj-1401-factorial/"},{"categories":"Code","date":1406124608,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1326-mileage-bank/","permalink":"https://xuanwo.io/2014/07/23/poj-1326-mileage-bank/","publishdate":"2014-07-23T14:10:08Z","relpermalink":"/2014/07/23/poj-1326-mileage-bank/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1326\n理解 题目倒是不难，但是这个输入真的是。。。。\n","tags":null,"title":"POJ 1326 Mileage Bank","url":"/2014/07/23/poj-1326-mileage-bank/"},{"categories":"Code","date":1406123340,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1061-date-of-frogs/","permalink":"https://xuanwo.io/2014/07/23/poj-1061-date-of-frogs/","publishdate":"2014-07-23T13:49:00Z","relpermalink":"/2014/07/23/poj-1061-date-of-frogs/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1061\n理解 扩展欧几里德方程的模板体。当初没有做出来，现在好像明白一点了。\n","tags":null,"title":"POJ 1061 青蛙的约会","url":"/2014/07/23/poj-1061-date-of-frogs/"},{"categories":"Code","date":1406122721,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1318-word-amalgamation/","permalink":"https://xuanwo.io/2014/07/23/poj-1318-word-amalgamation/","publishdate":"2014-07-23T13:38:41Z","relpermalink":"/2014/07/23/poj-1318-word-amalgamation/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1318\n理解 一开始的思路有点偏，想要单纯的使用string类的compare函数来解决问题。但是稍微考虑一下之后发现，复杂度有点高。事实上，我根本就不需要知道它们是不是匹配，只要排序之后匹配即可。\n","tags":null,"title":"POJ 1318 Word Amalgamation","url":"/2014/07/23/poj-1318-word-amalgamation/"},{"categories":"Code","date":1406083404,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1316-self-numbers/","permalink":"https://xuanwo.io/2014/07/23/poj-1316-self-numbers/","publishdate":"2014-07-23T02:43:24Z","relpermalink":"/2014/07/23/poj-1316-self-numbers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1316\n理解 水题，开一个数组模拟，水过～\n","tags":null,"title":"POJ 1316 Self Numbers","url":"/2014/07/23/poj-1316-self-numbers/"},{"categories":"Code","date":1406082936,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1298-the-hardest-problem-ever/","permalink":"https://xuanwo.io/2014/07/23/poj-1298-the-hardest-problem-ever/","publishdate":"2014-07-23T02:35:36Z","relpermalink":"/2014/07/23/poj-1298-the-hardest-problem-ever/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1298\n理解 问题的纠结之处在于编译器根本就不给gets和puts改过自新的机会，调试花了很久= =。恩，我也应该培养避免使用这些函数的习惯。回到题目上来，题意还是比较清楚的，向后移动五位即可。\n","tags":null,"title":"POJ 1298 史上最难的问题","url":"/2014/07/23/poj-1298-the-hardest-problem-ever/"},{"categories":"Code","date":1406081270,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1256-anagram/","permalink":"https://xuanwo.io/2014/07/23/poj-1256-anagram/","publishdate":"2014-07-23T02:07:50Z","relpermalink":"/2014/07/23/poj-1256-anagram/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1256\n理解 再次遇到一道使用next_permutation的题目，不过这一次需要针对题目的给出的条件重新写一个cmp函数。\n","tags":null,"title":"POJ 1256 Anagram","url":"/2014/07/23/poj-1256-anagram/"},{"categories":"Code","date":1406080992,"kind":"page","lang":"zh-hans","objectID":"/2014/07/23/poj-1247-magnificent-meatballs/","permalink":"https://xuanwo.io/2014/07/23/poj-1247-magnificent-meatballs/","publishdate":"2014-07-23T02:03:12Z","relpermalink":"/2014/07/23/poj-1247-magnificent-meatballs/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1247\n理解 让给的肉丸子少的人继续给，直到最后判断是否相等。\n","tags":null,"title":"POJ 1247 Magnificent Meatballs","url":"/2014/07/23/poj-1247-magnificent-meatballs/"},{"categories":"Code","date":1406065030,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1218-the-drunk-jailer/","permalink":"https://xuanwo.io/2014/07/22/poj-1218-the-drunk-jailer/","publishdate":"2014-07-22T21:37:10Z","relpermalink":"/2014/07/22/poj-1218-the-drunk-jailer/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1218\n理解 汗= =，偷鸡水过了，正好是牢房数的平方根向下取整，不过没有严格的证明\n","tags":null,"title":"POJ 1218 THE DRUNK JAILER","url":"/2014/07/22/poj-1218-the-drunk-jailer/"},{"categories":"Code","date":1406063567,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1163-the-triangle/","permalink":"https://xuanwo.io/2014/07/22/poj-1163-the-triangle/","publishdate":"2014-07-22T21:12:47Z","relpermalink":"/2014/07/22/poj-1163-the-triangle/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1163\n理解 这是第一道关于DP的题目，据说是用暴力的方法会直接超时，因为有大量的重复计算。使用DP可以避免这一点，最关键的公式是 triangle[i][j] += max(triangle[i + 1][j] : triangle[i + 1][j + 1])\n","tags":null,"title":"POJ 1163 The Triangle","url":"/2014/07/22/poj-1163-the-triangle/"},{"categories":"Code","date":1406062990,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1083-moving-tables/","permalink":"https://xuanwo.io/2014/07/22/poj-1083-moving-tables/","publishdate":"2014-07-22T21:03:10Z","relpermalink":"/2014/07/22/poj-1083-moving-tables/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1083\n理解 题目不难，关键在于理解题意。开一个数组，求出每一张桌子移动的时间，遍历找出最大值即可。\n","tags":null,"title":"POJ 1083 Moving Tables","url":"/2014/07/22/poj-1083-moving-tables/"},{"categories":"Code","date":1406062339,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1146-id-codes/","permalink":"https://xuanwo.io/2014/07/22/poj-1146-id-codes/","publishdate":"2014-07-22T20:52:19Z","relpermalink":"/2014/07/22/poj-1146-id-codes/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1146\n理解 使用STL里面的next_permutation轻松水掉。\n","tags":null,"title":"POJ 1146 ID Codes","url":"/2014/07/22/poj-1146-id-codes/"},{"categories":"Code","date":1406061455,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1068-parencodings/","permalink":"https://xuanwo.io/2014/07/22/poj-1068-parencodings/","publishdate":"2014-07-22T20:37:35Z","relpermalink":"/2014/07/22/poj-1068-parencodings/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1068\n理解 模拟栈操作，主要是对题目意思的理解。\n","tags":null,"title":"POJ 1068 Parencodings","url":"/2014/07/22/poj-1068-parencodings/"},{"categories":"Code","date":1406049150,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-2492-a-bugs-life/","permalink":"https://xuanwo.io/2014/07/22/poj-2492-a-bugs-life/","publishdate":"2014-07-22T17:12:30Z","relpermalink":"/2014/07/22/poj-2492-a-bugs-life/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2492\n理解 当初学习并查集的时候做得题目，是一个比较经典的关于并查集的题目\n","tags":null,"title":"POJ 2492 A Bug's Life","url":"/2014/07/22/poj-2492-a-bugs-life/"},{"categories":"Code","date":1406047013,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1988-cube-stacking/","permalink":"https://xuanwo.io/2014/07/22/poj-1988-cube-stacking/","publishdate":"2014-07-22T16:36:53Z","relpermalink":"/2014/07/22/poj-1988-cube-stacking/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1988\n理解 这道题也想了很久。问题主要出在堆叠得过程中，我只考虑了根节点的变化，而没有去更新位于同一个根节点下的方块的高度变化。发现问题之后，试图寻找到一种有效得递归方法，但是失败了。无奈之后，决定再开一个deep数组来保存当前节点到根节点之间的深度差。\n","tags":null,"title":"POJ 1988 Cube Stacking","url":"/2014/07/22/poj-1988-cube-stacking/"},{"categories":"Code","date":1406037082,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1703-find-them-catch-them/","permalink":"https://xuanwo.io/2014/07/22/poj-1703-find-them-catch-them/","publishdate":"2014-07-22T13:51:22Z","relpermalink":"/2014/07/22/poj-1703-find-them-catch-them/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1703\n理解 这个并查集有点不一样，之前做过的全都是判断是否连通，这一次确实要判断是否不连通。想了一想，其实还是可以转换过来的。假定r1，r2分别表示ab，bc之间的关系，0表示相同，1表示不同，则有下面的逻辑表。\n   (a, b) (b, c) (a, c) (r1+r2)%2     0 0 0 0   0 1 1 1   1 0 1 1   1 1 0 0   ","tags":null,"title":"POJ 1703 Find them, Catch them","url":"/2014/07/22/poj-1703-find-them-catch-them/"},{"categories":"Code","date":1406002560,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1308-is-it-a-tree/","permalink":"https://xuanwo.io/2014/07/22/poj-1308-is-it-a-tree/","publishdate":"2014-07-22T04:16:00Z","relpermalink":"/2014/07/22/poj-1308-is-it-a-tree/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1308\n理解 同样是并查集的应用，难点在于如何判断给定的点之间是否形成了森林。事实上，只要判断树与树之间有没有成环即可。\n","tags":null,"title":"POJ 1308 Is It A Tree?","url":"/2014/07/22/poj-1308-is-it-a-tree/"},{"categories":"Code","date":1406000740,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-2524-ubiquitous-religions/","permalink":"https://xuanwo.io/2014/07/22/poj-2524-ubiquitous-religions/","publishdate":"2014-07-22T03:45:40Z","relpermalink":"/2014/07/22/poj-2524-ubiquitous-religions/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2524\n理解 POJ上最简单的一道关于并查集的题目，没有使用路径压缩，没有进行优化，直接水过。\n","tags":null,"title":"POJ 2524 Ubiquitous Religions","url":"/2014/07/22/poj-2524-ubiquitous-religions/"},{"categories":"Code","date":1405996988,"kind":"page","lang":"zh-hans","objectID":"/2014/07/22/poj-1082-food-links/","permalink":"https://xuanwo.io/2014/07/22/poj-1082-food-links/","publishdate":"2014-07-22T02:43:08Z","relpermalink":"/2014/07/22/poj-1082-food-links/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1082\n理解 理解时候的困难在于如何把题目中吃与被吃的关系用一个计算机能理解的方式表达出来。后来使用了0表示他们是同类，用1表示a吃b，用2表示b吃a。再使用并查集的相关知识得到最后得结果。\n","tags":null,"title":"POJ 1082 食物链","url":"/2014/07/22/poj-1082-food-links/"},{"categories":"Code","date":1405958153,"kind":"page","lang":"zh-hans","objectID":"/2014/07/21/poj-1046-color-me-less/","permalink":"https://xuanwo.io/2014/07/21/poj-1046-color-me-less/","publishdate":"2014-07-21T15:55:53Z","relpermalink":"/2014/07/21/poj-1046-color-me-less/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1046\n理解 题目并不难，暴力水过即可。用到了结构体的知识，可惜我对结构体的理解还是太过于表层。其实我可以把结构体作为函数的参数输入，这样可以减少很大的代码量。\n","tags":null,"title":"POJ 1046 Color Me Less","url":"/2014/07/21/poj-1046-color-me-less/"},{"categories":"Code","date":1405870831,"kind":"page","lang":"zh-hans","objectID":"/2014/07/20/poj-1028-web-navigation/","permalink":"https://xuanwo.io/2014/07/20/poj-1028-web-navigation/","publishdate":"2014-07-20T15:40:31Z","relpermalink":"/2014/07/20/poj-1028-web-navigation/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1028\n理解 这是一道STL里面的栈的运用的一个模板题。构建两个栈，一个存放forward，一个存放backward，然后后再建立一个string类用于存放浏览器当前的页面。题目不难，但是要理解你现在的操作对栈影响是什么，先后顺序一点都不能错。\n","tags":null,"title":"POJ 1028 Web Navigation","url":"/2014/07/20/poj-1028-web-navigation/"},{"categories":"Code","date":1405867145,"kind":"page","lang":"zh-hans","objectID":"/2014/07/20/poj-1045-bode-plot/","permalink":"https://xuanwo.io/2014/07/20/poj-1045-bode-plot/","publishdate":"2014-07-20T14:39:05Z","relpermalink":"/2014/07/20/poj-1045-bode-plot/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1045\n理解 额- -，居然考到了物理公式。推倒的过程中，卡在了题目中的相位不是已知量。知道看了discuss才明白，可以通过令t=0特殊值带入的方法求解。果真是物理题做得少了- -，不机智了。类似于这样的精度问题，G++都是WA，只有C++才能A。至今不知原因。\n","tags":null,"title":"POJ 1045 Bode Plot","url":"/2014/07/20/poj-1045-bode-plot/"},{"categories":"Code","date":1405866325,"kind":"page","lang":"zh-hans","objectID":"/2014/07/20/poj-2199-rate-of-return/","permalink":"https://xuanwo.io/2014/07/20/poj-2199-rate-of-return/","publishdate":"2014-07-20T14:25:25Z","relpermalink":"/2014/07/20/poj-2199-rate-of-return/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2199\n理解 感觉题目并不是很难。给出n个月，每个月都存进去一定的钱，然后第n+1个月给出到这个月为止的本息和。运用二分法，逐步逼近，直到达到了精度要求。\n","tags":null,"title":"POJ 2199 Rate of Return","url":"/2014/07/20/poj-2199-rate-of-return/"},{"categories":"Code","date":1405705121,"kind":"page","lang":"zh-hans","objectID":"/2014/07/18/poj-1047-round-and-round-we-go/","permalink":"https://xuanwo.io/2014/07/18/poj-1047-round-and-round-we-go/","publishdate":"2014-07-18T17:38:41Z","relpermalink":"/2014/07/18/poj-1047-round-and-round-we-go/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1047\n理解 一开始觉得很麻烦，打算用字符串+排序来处理是否符合题意。但是无意中发现，事实上当一个数是循环数的时候，这个数本身乘以它的长度+1恰好使得每一位上的数都是9，比如142857*(6+1)=999999。发现了这一点，题目就变成一道水题了。用java的高精度类水掉即可～\n","tags":null,"title":"POJ 1047 Round and Round We Go","url":"/2014/07/18/poj-1047-round-and-round-we-go/"},{"categories":"Code","date":1405698233,"kind":"page","lang":"zh-hans","objectID":"/2014/07/18/poj-1306-combinations/","permalink":"https://xuanwo.io/2014/07/18/poj-1306-combinations/","publishdate":"2014-07-18T15:43:53Z","relpermalink":"/2014/07/18/poj-1306-combinations/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1306\n理解 高精度阶乘的题目，再次用java水掉= =。\n","tags":null,"title":"POJ 1306 Combinations","url":"/2014/07/18/poj-1306-combinations/"},{"categories":"Code","date":1405697352,"kind":"page","lang":"zh-hans","objectID":"/2014/07/18/poj-1131-octal-fractions/","permalink":"https://xuanwo.io/2014/07/18/poj-1131-octal-fractions/","publishdate":"2014-07-18T15:29:12Z","relpermalink":"/2014/07/18/poj-1131-octal-fractions/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1131\n理解 题意挺简单，就是把八进制浮点数转化为十进制，同样是用高精度类，叠乘即可～\n","tags":null,"title":"POJ 1131 Octal Fractions","url":"/2014/07/18/poj-1131-octal-fractions/"},{"categories":"Code","date":1405695844,"kind":"page","lang":"zh-hans","objectID":"/2014/07/18/poj-1503-integer-inquiry/","permalink":"https://xuanwo.io/2014/07/18/poj-1503-integer-inquiry/","publishdate":"2014-07-18T15:04:04Z","relpermalink":"/2014/07/18/poj-1503-integer-inquiry/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1503\n理解 还是高精度计算，大数相加～\n","tags":null,"title":"POJ 1503 Integer Inquiry","url":"/2014/07/18/poj-1503-integer-inquiry/"},{"categories":"Code","date":1405694770,"kind":"page","lang":"zh-hans","objectID":"/2014/07/18/poj-2305-basic-remains/","permalink":"https://xuanwo.io/2014/07/18/poj-2305-basic-remains/","publishdate":"2014-07-18T14:46:10Z","relpermalink":"/2014/07/18/poj-2305-basic-remains/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2305\n理解 高精度计算题啊，用Java的高精度类水过。\n","tags":null,"title":"POJ 2305 Basic remains","url":"/2014/07/18/poj-2305-basic-remains/"},{"categories":"Code","date":1405642990,"kind":"page","lang":"zh-hans","objectID":"/2014/07/18/poj-3307-smart-sister/","permalink":"https://xuanwo.io/2014/07/18/poj-3307-smart-sister/","publishdate":"2014-07-18T00:23:10Z","relpermalink":"/2014/07/18/poj-3307-smart-sister/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3307\n理解 如果一个数可以通过其他数的各数字位相乘得到，则说这个数具有productivity property。要求求出第i个具有这种性质的数。我们考虑1～9这些数字，显然，我们只要考虑1，2，3，5，7这四个质因数，因为别的数都能通过他们来得到，于是可以得到代码。\n","tags":null,"title":"POJ 3048 Max Factor","url":"/2014/07/18/poj-3307-smart-sister/"},{"categories":"Code","date":1405641235,"kind":"page","lang":"zh-hans","objectID":"/2014/07/17/poj-2081-recamans-sequence/","permalink":"https://xuanwo.io/2014/07/17/poj-2081-recamans-sequence/","publishdate":"2014-07-17T23:53:55Z","relpermalink":"/2014/07/17/poj-2081-recamans-sequence/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2081\n理解 简单的计算题。利用打表的方法，空间换时间。\n","tags":null,"title":"POJ 2081 Recaman's Sequence","url":"/2014/07/17/poj-2081-recamans-sequence/"},{"categories":"Code","date":1405551302,"kind":"page","lang":"zh-hans","objectID":"/2014/07/16/poj-2153-rank-list/","permalink":"https://xuanwo.io/2014/07/16/poj-2153-rank-list/","publishdate":"2014-07-16T22:55:02Z","relpermalink":"/2014/07/16/poj-2153-rank-list/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2153\n理解 感觉不是很难，因为数据量不是很大，将人和成绩一一映射，然后遍历即可。\n","tags":null,"title":"POJ 2153 Rank List","url":"/2014/07/16/poj-2153-rank-list/"},{"categories":"Code","date":1405524302,"kind":"page","lang":"zh-hans","objectID":"/2014/07/16/poj-1014-dividing/","permalink":"https://xuanwo.io/2014/07/16/poj-1014-dividing/","publishdate":"2014-07-16T15:25:02Z","relpermalink":"/2014/07/16/poj-1014-dividing/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1014\n理解 我的思路非常直接，直接当成一道数学题来解。于是把所有的数都mod2，得到了一个二进制串，然后以这个为基础，开始寻找特例，结果挂的很惨。比如0 3 2 0 0 0，这种情况是在mod2的时候直接就舍去的。说明我这种方法本质上有着缺陷。网上的大牛们大多采用了多重背包的方法，但是有一个人在discuss中提出了mod60的方法。实际上，这个是mod2思路的进一步延伸，也就是解决了0 3 2 0 0 0这种类型的特例。然后再不断的用sum去减，判断最后能都减至0，实质上是用了DFS。\n","tags":null,"title":"POJ 1014 Dividing","url":"/2014/07/16/poj-1014-dividing/"},{"categories":"Code","date":1405520550,"kind":"page","lang":"zh-hans","objectID":"/2014/07/16/poj-1012-joseph/","permalink":"https://xuanwo.io/2014/07/16/poj-1012-joseph/","publishdate":"2014-07-16T14:22:30Z","relpermalink":"/2014/07/16/poj-1012-joseph/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1012\n理解 用模拟的方法貌似会超时。直接打了一个表，求出0到14之间每一种k的值对应的m值，再根据输入输出就OK。\n","tags":null,"title":"POJ 1012 Joseph","url":"/2014/07/16/poj-1012-joseph/"},{"categories":"Code","date":1405513244,"kind":"page","lang":"zh-hans","objectID":"/2014/07/16/poj-1011-sticks/","permalink":"https://xuanwo.io/2014/07/16/poj-1011-sticks/","publishdate":"2014-07-16T12:20:44Z","relpermalink":"/2014/07/16/poj-1011-sticks/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1011\n理解 一开始的想法比较简单，单纯的求和然后找出最短的那根。但是这样的做法有下面的一些问题：第一，最后的棒子的和不能比最短的棒子还短；第二，最后的棒子必须是由给定的棒子合成的。因此只能使用搜索的方法，但是常规的搜索会超时，必须辅以有效的剪枝，以下是参考之后的代码。\n","tags":null,"title":"POJ 1011 木棒","url":"/2014/07/16/poj-1011-sticks/"},{"categories":"Code","date":1405465743,"kind":"page","lang":"zh-hans","objectID":"/2014/07/15/poj-1001-big-decimal/","permalink":"https://xuanwo.io/2014/07/15/poj-1001-big-decimal/","publishdate":"2014-07-15T23:09:03Z","relpermalink":"/2014/07/15/poj-1001-big-decimal/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1001\n理解 搜索高精度计算的时候发现java自带了关于高精度处理的类，毫不客气的拿来用了～\n","tags":null,"title":"POJ 1001 求高精度幂","url":"/2014/07/15/poj-1001-big-decimal/"},{"categories":"Code","date":1405456902,"kind":"page","lang":"zh-hans","objectID":"/2014/07/15/poj-2800-josephs-problem/","permalink":"https://xuanwo.io/2014/07/15/poj-2800-josephs-problem/","publishdate":"2014-07-15T20:41:42Z","relpermalink":"/2014/07/15/poj-2800-josephs-problem/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2800\n理解 抱着侥幸心理使用了一般的方法来求，果然TLE了。然后开始计算∑1\u0026lt;=i\u0026lt;=n(k mod i)。由分析之，总共有三种情况，k\u0026lt;n，k=n，k\u0026gt;n。分别寻找规律并转化为等差数列简化运算。\n","tags":null,"title":"POJ 2800 Joseph's Problem","url":"/2014/07/15/poj-2800-josephs-problem/"},{"categories":"Code","date":1405452488,"kind":"page","lang":"zh-hans","objectID":"/2014/07/15/poj-2680-computer-transformation/","permalink":"https://xuanwo.io/2014/07/15/poj-2680-computer-transformation/","publishdate":"2014-07-15T19:28:08Z","relpermalink":"/2014/07/15/poj-2680-computer-transformation/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3048\n理解 数学规律并不难，很容易推出f[n]=f[n-1]+f[n-2]*2。但是2^1000次方，必须使用一定的手段来处理这个超大的数据。这里使用了一种比较简单的技巧，数组模拟。\n","tags":null,"title":"POJ 2680 Computer Transformation","url":"/2014/07/15/poj-2680-computer-transformation/"},{"categories":"Code","date":1405443050,"kind":"page","lang":"zh-hans","objectID":"/2014/07/15/poj-2818-making-change/","permalink":"https://xuanwo.io/2014/07/15/poj-2818-making-change/","publishdate":"2014-07-15T16:50:50Z","relpermalink":"/2014/07/15/poj-2818-making-change/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2818\n理解 感觉很水的一道题，不知道为什么交题的人很少（吐槽一下坑爹的美元换算）。用DFS水掉了，分别从dispenser到pennies来算一遍就OK。我本以为用四个for也能过，但是discuss上面有人说过不了，TLE。有时间我试试看。\n","tags":null,"title":"POJ 2818 Making Change","url":"/2014/07/15/poj-2818-making-change/"},{"categories":"Code","date":1405439721,"kind":"page","lang":"zh-hans","objectID":"/2014/07/15/poj-2714-random-walk/","permalink":"https://xuanwo.io/2014/07/15/poj-2714-random-walk/","publishdate":"2014-07-15T15:55:21Z","relpermalink":"/2014/07/15/poj-2714-random-walk/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2714\n理解 一开始以为只是一道简单的求解最远距离的题目，但是敲完代码之后发现前两个样例过了，最后一个样例数据差距很大。然后仔细读题才发现，题目中给定的正负是不定的= =。一时间没有思路，以为需要使用DP的思想，然后去看了discuss，才明白用枚举的方法列出每一个向量，减少了很大的复杂度，使得问题能在1s之内解决。\n","tags":null,"title":"POJ 2714 Random Walk","url":"/2014/07/15/poj-2714-random-walk/"},{"categories":"Code","date":1405358484,"kind":"page","lang":"zh-hans","objectID":"/2014/07/14/poj-3048-max-factor/","permalink":"https://xuanwo.io/2014/07/14/poj-3048-max-factor/","publishdate":"2014-07-14T17:21:24Z","relpermalink":"/2014/07/14/poj-3048-max-factor/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3048\n理解 这不是我做过的最简单的题目，但一定是我做起来最逗比的题目。题意很明白，就是输出给定的数里面有最大值质因数的那个。题意中明确说明给定的数的范围是1到20000，然后我就开始机智了，20000的开方约为141，我只要打一个1到150以内所有素数的表，就OK啦～空间换时间，复杂度低得很。开开心心的敲完代码，结果WA了。看了一下discuss，针对一些特例微调了一下代码，结果还是WA。然后就进入坑爹模式，一坑就是一个下午。直到终于忍不住了，去问学长，学长看了一眼，说150到20000之间的质数呢？恍然大悟= =，没有考虑本身也是质数的情况，坑。\n","tags":null,"title":"POJ 3048 Max Factor","url":"/2014/07/14/poj-3048-max-factor/"},{"categories":"Code","date":1405269722,"kind":"page","lang":"zh-hans","objectID":"/2014/07/13/poj-1017-packets/","permalink":"https://xuanwo.io/2014/07/13/poj-1017-packets/","publishdate":"2014-07-13T16:42:02Z","relpermalink":"/2014/07/13/poj-1017-packets/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1017\n理解 在COJ上有一道一模一样的题目，当时做的时候没有做出来，因为没有考虑好剩余空间的利用。66和11的情况最为简单，但是其余的情况就分情况考虑了，特别是对于33这种情况而言，因为一个箱子正好可以装4个33的产品。\n","tags":null,"title":"POJ 1017 Packets","url":"/2014/07/13/poj-1017-packets/"},{"categories":"Code","date":1405269722,"kind":"page","lang":"zh-hans","objectID":"/2014/07/13/poj-1657-distance-on-chessboard/","permalink":"https://xuanwo.io/2014/07/13/poj-1657-distance-on-chessboard/","publishdate":"2014-07-13T16:42:02Z","relpermalink":"/2014/07/13/poj-1657-distance-on-chessboard/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1657\n理解 再一次脑洞大开了= =，居然还写了一个normalize函数用来区分是不是可行的走法，其实只要通过abs(x-y)%2!=0即可实现判断斜的方向上是否可以行走了。恩，这是程序设计实践导引上的例题，加上中文，没有什么好讲的。不过需要注意位置没有发生改变时的特殊情况。\n","tags":null,"title":"POJ 1657 Distance on Chessboard","url":"/2014/07/13/poj-1657-distance-on-chessboard/"},{"categories":"Code","date":1405206757,"kind":"page","lang":"zh-hans","objectID":"/2014/07/12/poj-3194-equidivisions/","permalink":"https://xuanwo.io/2014/07/12/poj-3194-equidivisions/","publishdate":"2014-07-12T23:12:37Z","relpermalink":"/2014/07/12/poj-3194-equidivisions/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3194\n理解 本以为只要逐个判断每一个数是否有相邻即可，事实上，少考虑了一种情况。 比如下面给出的这种：\n2211 1111 1111 1122 根据我原来的思路这种也是good，但其实并不是如此。当然，这个例子并不完备，但用于指出原来思路的漏洞已经够了。正确的思路应当是使用DFS来寻找是否存在独立的区块。\n","tags":null,"title":"POJ 3194 Equidivisions","url":"/2014/07/12/poj-3194-equidivisions/"},{"categories":"Code","date":1405200896,"kind":"page","lang":"zh-hans","objectID":"/2014/07/12/poj-2386-lake-counting/","permalink":"https://xuanwo.io/2014/07/12/poj-2386-lake-counting/","publishdate":"2014-07-12T21:34:56Z","relpermalink":"/2014/07/12/poj-2386-lake-counting/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2386\n理解 当年学习DFS的AC掉的一道水题。DFS的经典模板，通过找出全部的相连池塘块来确定有几块池塘。\n","tags":null,"title":"POJ 2386 Lake Counting","url":"/2014/07/12/poj-2386-lake-counting/"},{"categories":"Code","date":1405200659,"kind":"page","lang":"zh-hans","objectID":"/2014/07/12/poj-1321-chess-problem/","permalink":"https://xuanwo.io/2014/07/12/poj-1321-chess-problem/","publishdate":"2014-07-12T21:30:59Z","relpermalink":"/2014/07/12/poj-1321-chess-problem/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1321\n理解 感觉还是蛮简单的一道题目，主要是因为数据特别水，最大只有8*8的棋盘，用DFS按照行来搜索。主要的问题在于如何确保同列不存在重复的棋子。\n","tags":null,"title":"POJ 1321 棋盘问题","url":"/2014/07/12/poj-1321-chess-problem/"},{"categories":"Code","date":1405198101,"kind":"page","lang":"zh-hans","objectID":"/2014/07/12/poj-1190-birthay-cake/","permalink":"https://xuanwo.io/2014/07/12/poj-1190-birthay-cake/","publishdate":"2014-07-12T20:48:21Z","relpermalink":"/2014/07/12/poj-1190-birthay-cake/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1190\n理解 这道题是学长推荐的DFS练习题，一开始没有想明白，为什么这道题是DFS。多次推导之后发现，这道题确实需要用到深度搜索。每次都先确定第一层蛋糕的体积数，然后减去得到剩余的蛋糕体积，如此循坏，最后要保证最后的体积和等于给定的N。因为半径是递增的，所以可以去掉很大一部分无效的搜索。\n","tags":null,"title":"POJ 1190 生日蛋糕","url":"/2014/07/12/poj-1190-birthay-cake/"},{"categories":"Code","date":1405195154,"kind":"page","lang":"zh-hans","objectID":"/2014/07/12/poj-2488-a-knights-journey/","permalink":"https://xuanwo.io/2014/07/12/poj-2488-a-knights-journey/","publishdate":"2014-07-12T19:59:14Z","relpermalink":"/2014/07/12/poj-2488-a-knights-journey/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2488\n理解 一开始没看懂，看了几遍之后才明白。是给定一个p*q的棋盘，要求计算出是否存在可能性使得骑士走遍整个棋盘，并要求按照字典序排列。这个字典序真的是要我的命，直接导致挂了很多次，还傻傻地去群里面问这道题是不是Special Judge= =。\n","tags":null,"title":"POJ 2488 A Knight's Journey","url":"/2014/07/12/poj-2488-a-knights-journey/"},{"categories":"Code","date":1405170389,"kind":"page","lang":"zh-hans","objectID":"/2014/07/12/poj-1018-communication-system/","permalink":"https://xuanwo.io/2014/07/12/poj-1018-communication-system/","publishdate":"2014-07-12T13:06:29Z","relpermalink":"/2014/07/12/poj-1018-communication-system/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1018\n理解 题意比较清晰，就是找出最大的B/sum(P)，要求网络设备的性价比最高。采用枚举的方法，把所有情况都列出来，然后有些明显不需要考虑的情况，可以直接舍去。\n","tags":null,"title":"POJ 1018 Communication System","url":"/2014/07/12/poj-1018-communication-system/"},{"categories":"Code","date":1405123200,"kind":"page","lang":"zh-hans","objectID":"/2014/07/12/poj-1753-flip-game/","permalink":"https://xuanwo.io/2014/07/12/poj-1753-flip-game/","publishdate":"2014-07-12T00:00:00Z","relpermalink":"/2014/07/12/poj-1753-flip-game/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1753\n理解 我一开始的思路是错误的，企图通过正面的方法来找出从当前情况达到全白和全黑的方法，多次尝试之后，发现很难找到一条通用的方法，只能找出几个比较简单的特例。后来才明白过来，应当从全黑或者全白的情况出发，再来判断给定的图是不是其中的一个子集。因为是一个4X4的格子，不难看出，总共的情况只有2^16种。只要一一枚举即可。最后的步数就是这颗树的深度，使用DFS即可实现。\n","tags":null,"title":"POJ 1753 Flip Game","url":"/2014/07/12/poj-1753-flip-game/"},{"categories":"Code","date":1405108178,"kind":"page","lang":"zh-hans","objectID":"/2014/07/11/poj-2739-sum-of-consecutive-prime-numbers/","permalink":"https://xuanwo.io/2014/07/11/poj-2739-sum-of-consecutive-prime-numbers/","publishdate":"2014-07-11T19:49:38Z","relpermalink":"/2014/07/11/poj-2739-sum-of-consecutive-prime-numbers/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2739\n理解 跑偏了= =。An output line includes the number of representations for the input integer as the sum of one or more consecutive prime numbers.居然理解成输出用于表示的质数的个数了，卡了很久。\n","tags":null,"title":"POJ 2739 Sum of Consecutive Prime Numbers","url":"/2014/07/11/poj-2739-sum-of-consecutive-prime-numbers/"},{"categories":"Code","date":1405085404,"kind":"page","lang":"zh-hans","objectID":"/2014/07/11/poj-2159-ancient-cipher/","permalink":"https://xuanwo.io/2014/07/11/poj-2159-ancient-cipher/","publishdate":"2014-07-11T13:30:04Z","relpermalink":"/2014/07/11/poj-2159-ancient-cipher/","summary":"题目 源地址：\nhttp://poj.org/problem?id=2159\n理解 一开始的理解是按照题目的意思，先进行一次置换加密再进行一次排列加密。置换只要按照规律一个一个替换就OK，排列加密则用到了next_permutation函数。两重for循环，模拟出去全部的加密方法。Coding出来之后提交，WA。然后才开始审视另外的可能性：谁说置换就一定要按照规律来？事实上，的确如此，按照题意，只需要明文和密文字符形成唯一映射就OK。如果还是按照原来的思路，这道水题还真的不水。其实，在加密过程中，有一样东西是不变的，就是各个字符（对应）出现的频率。这样想的话，就简单了，只要统计出每个字符出现的概率，sort排序后，判断两个数组是否完全一致就好～\n","tags":null,"title":"POJ 2159 Ancient Cipher","url":"/2014/07/11/poj-2159-ancient-cipher/"},{"categories":"Code","date":1405034066,"kind":"page","lang":"zh-hans","objectID":"/2014/07/10/poj-3299-humidex/","permalink":"https://xuanwo.io/2014/07/10/poj-3299-humidex/","publishdate":"2014-07-10T23:14:26Z","relpermalink":"/2014/07/10/poj-3299-humidex/","summary":"题目 源地址：\nhttp://poj.org/problem?id=3299\n理解 我的理解有误。主要是看input里面都是给定T，D求H的情况，便以为这道题就是用一下公式。没想到这道题还有其他的两种情况。说明不管在怎样的条件下，看题都是至关重要的一步。还有就是在输入输出上，%s和%c的区别，值得注意。\n","tags":null,"title":"POJ 3299 Humidex","url":"/2014/07/10/poj-3299-humidex/"},{"categories":"Code","date":1405011339,"kind":"page","lang":"zh-hans","objectID":"/2014/07/10/poj-1207-the-3n+1-problem/","permalink":"https://xuanwo.io/2014/07/10/poj-1207-the-3n+1-problem/","publishdate":"2014-07-10T16:55:39Z","relpermalink":"/2014/07/10/poj-1207-the-3n+1-problem/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1207\n理解 额，题意很清楚。就是一道关于3n+1的规律题，要求找出给定的i和j之间最长的循环数列。但是我坑了很久，因为错误的使用了A?B:C这样的三元运算符，被学姐学长痛批一顿之后，果断修改了。AC之余，提醒自己一下，良好的代码规范的重要性。\n","tags":null,"title":"POJ 1207 The 3n + 1 problem","url":"/2014/07/10/poj-1207-the-3n+1-problem/"},{"categories":"Code","date":1405002164,"kind":"page","lang":"zh-hans","objectID":"/2014/07/10/poj-1013-counterfeit-dollar/","permalink":"https://xuanwo.io/2014/07/10/poj-1013-counterfeit-dollar/","publishdate":"2014-07-10T14:22:44Z","relpermalink":"/2014/07/10/poj-1013-counterfeit-dollar/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1013\n理解 总共有12枚银币，里面有一枚是假货。要求通过三次称量，找出那枚假币，并说出是重了还是轻了。题目中明确指出，三次称量必定能找出那枚假货，使得问题简化了很多。一开始的想法是完全模拟出来，但写到代码的时候感觉过于蛋疼，然后想能不能用一些由计算机来推导的方法。在具体的实现中，发现我很难把问题抽象成计算机可以处理的问题。在一份解题报告的启发下，想到了使用一个数值来度量每个银币可能为假币的可能性的方法。\n","tags":null,"title":"POJ 1013 Counterfeit Dollar","url":"/2014/07/10/poj-1013-counterfeit-dollar/"},{"categories":"Code","date":1404774248,"kind":"page","lang":"zh-hans","objectID":"/2014/07/07/poj-1008-maya-calendar/","permalink":"https://xuanwo.io/2014/07/07/poj-1008-maya-calendar/","publishdate":"2014-07-07T23:04:08Z","relpermalink":"/2014/07/07/poj-1008-maya-calendar/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1008\n理解 两种纪年法的转换，另外设一个days的变量保存总天数，然后以它为基准进行变换，没有什么难度。但是在具体的方法上，还是有些优化的余地。比如我不用写那么多长长的if判断语句，使用一个string数组就可以轻松搞定了，这是我不机智的地方。此外，应当注意到，两种纪年法的第一天分别是0和1，要小心。\n","tags":null,"title":"POJ 1008 Maya Calendar","url":"/2014/07/07/poj-1008-maya-calendar/"},{"categories":"Code","date":1404742162,"kind":"page","lang":"zh-hans","objectID":"/2014/07/07/poj-1007-dna-sorting/","permalink":"https://xuanwo.io/2014/07/07/poj-1007-dna-sorting/","publishdate":"2014-07-07T14:09:22Z","relpermalink":"/2014/07/07/poj-1007-dna-sorting/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1007\n理解 我再一次把问题想的太复杂了，其实就是一个计算逆序数并且排序的一个过程。\n","tags":null,"title":"POJ 1007 DNA Sorting","url":"/2014/07/07/poj-1007-dna-sorting/"},{"categories":"Code","date":1404693489,"kind":"page","lang":"zh-hans","objectID":"/2014/07/07/use-hexo-to-bulid-project-wiki/","permalink":"https://xuanwo.io/2014/07/07/use-hexo-to-bulid-project-wiki/","publishdate":"2014-07-07T00:38:09Z","relpermalink":"/2014/07/07/use-hexo-to-bulid-project-wiki/","summary":"七七事件前一天，我有幸加入了本校OJ2.0项目组。非常高兴能够为我们学校自己的OJ开源项目做出一份贡献，虽然只是一份整理Wiki的小活儿，但是这是我第一次真正的参与一个源项目。经过谨慎考虑之后，我决定项目的Wiki使用Github Pages来构建。\n","tags":["Blog","Software","Windows","Github-Pages","Wiki"],"title":"使用Hexo构建项目Wiki","url":"/2014/07/07/use-hexo-to-bulid-project-wiki/"},{"categories":"Code","date":1404675041,"kind":"page","lang":"zh-hans","objectID":"/2014/07/06/poj-1006-biorhythms/","permalink":"https://xuanwo.io/2014/07/06/poj-1006-biorhythms/","publishdate":"2014-07-06T19:30:41Z","relpermalink":"/2014/07/06/poj-1006-biorhythms/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1006\n理解 基本上就是孙子兵法，求那个最小的公倍数。记得华罗庚先生也写过同余式的相关著作。恩，找出规律之后，轻松水掉。\n","tags":null,"title":"POJ 1006 Biorhythms","url":"/2014/07/06/poj-1006-biorhythms/"},{"categories":"Code","date":1404673448,"kind":"page","lang":"zh-hans","objectID":"/2014/07/06/poj-1005-i-think-i-need-a-houseboat/","permalink":"https://xuanwo.io/2014/07/06/poj-1005-i-think-i-need-a-houseboat/","publishdate":"2014-07-06T19:04:08Z","relpermalink":"/2014/07/06/poj-1005-i-think-i-need-a-houseboat/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1005\n理解 一块地按照50 square miles each year的速度被腐蚀，给定一个坐标要求计算到第几年的时候被腐蚀。自然是一道大水题：计算出给定坐标到原点的距离，取这个距离为半径求出实际的半圆面积，然后跟已经被腐蚀的面积比较一下即可。\n","tags":null,"title":"POJ 1005 I Think I Need a Houseboat","url":"/2014/07/06/poj-1005-i-think-i-need-a-houseboat/"},{"categories":"Code","date":1404499310,"kind":"page","lang":"zh-hans","objectID":"/2014/07/04/poj-1004-financial-management/","permalink":"https://xuanwo.io/2014/07/04/poj-1004-financial-management/","publishdate":"2014-07-04T18:41:50Z","relpermalink":"/2014/07/04/poj-1004-financial-management/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1004\n理解 额，就是求解12个数的平均数。不过据说POJ不能用lf，还要我没有遇到这样的问题，交了一个float水过。\n","tags":null,"title":"POJ 1004 Financial Management","url":"/2014/07/04/poj-1004-financial-management/"},{"categories":"Code","date":1404459235,"kind":"page","lang":"zh-hans","objectID":"/2014/07/04/poj-1003-hangover/","permalink":"https://xuanwo.io/2014/07/04/poj-1003-hangover/","publishdate":"2014-07-04T07:33:55Z","relpermalink":"/2014/07/04/poj-1003-hangover/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1003\n理解 嗯哼，一道水题，用模拟水过。唯一自认为值得注意的地方是精度的问题，在比较的时候使用了两者之差小于0.001来判断他们是否相等。\n","tags":null,"title":"POJ 1003 Hangover","url":"/2014/07/04/poj-1003-hangover/"},{"categories":"Code","date":1404429692,"kind":"page","lang":"zh-hans","objectID":"/2014/07/03/poj-1002-487-3279/","permalink":"https://xuanwo.io/2014/07/03/poj-1002-487-3279/","publishdate":"2014-07-03T23:21:32Z","relpermalink":"/2014/07/03/poj-1002-487-3279/","summary":"题目 源地址：\nhttp://poj.org/problem?id=1002\n理解 简单一看就是一道关于字典的题目，将ABC等字符转化为对应的数字，从而求出这个字符串所对应的电话号码。 然后就是我不机智的地方了。我求出的电话号码依然是使用char数组类型保存的，比较的时候使用了strcmp函数，为了降低复杂度，还使用了各种标记，最后就是一团乱麻。在点拨之后才发现，直接转化为int型，然后sort排序，轻松搞定。\n","tags":null,"title":"POJ 1002 487-3279","url":"/2014/07/03/poj-1002-487-3279/"},{"categories":"Daily","date":1404417863,"kind":"page","lang":"zh-hans","objectID":"/2014/07/03/summer-training-plan/","permalink":"https://xuanwo.io/2014/07/03/summer-training-plan/","publishdate":"2014-07-03T20:04:23Z","relpermalink":"/2014/07/03/summer-training-plan/","summary":"我很喜欢Coding，也很喜欢AC那一刻的快感。为了追求这样的快感，我参加校赛，并且幸运的拿到了金牌，加入了CUGBACM的团体。 但加入之后，我迷茫了。从学长学姐的口中，我知道我们学校的ACM并不是很强，甚至算得上弱校。参加了这么多年的比赛，我们从来没有出线过。每一年，我们都只能围观World Final的赛场，我们不停地刷新着List，不停地点评着清华为什么卡题卡这么久，不停地吐槽着CLJ拿到奖牌时的郁闷表情。心中其实一直有一个问题：为什么WF上，不能出现CUGB的队伍呢？这个问题真的很简单，我们太水。\n","tags":null,"title":"暑期刷题计划","url":"/2014/07/03/summer-training-plan/"},{"categories":"Code","date":1402675200,"kind":"page","lang":"zh-hans","objectID":"/2014/06/13/why-i-choose-onedrive/","permalink":"https://xuanwo.io/2014/06/13/why-i-choose-onedrive/","publishdate":"2014-06-13T16:00:00Z","relpermalink":"/2014/06/13/why-i-choose-onedrive/","summary":"我从很早开始就接受了网盘这个概念，大概是七年之前，我还在上小学六年级的时候吧= =。好像是2006年的《电脑报》合刊，在上面看到了关于QQ的网络硬盘的介绍，现在还清晰的记得，容量是16M，只有会员才能扩大，囧。然后就一直在寻找适合我用的给力的网盘。\n","tags":["Software"],"title":"为什么我最后选择了OneDrive","url":"/2014/06/13/why-i-choose-onedrive/"},{"categories":"Daily","date":1402585200,"kind":"page","lang":"zh-hans","objectID":"/2014/06/12/acm-teammates-blog/","permalink":"https://xuanwo.io/2014/06/12/acm-teammates-blog/","publishdate":"2014-06-12T15:00:00Z","relpermalink":"/2014/06/12/acm-teammates-blog/","summary":"2009级 JoinHands http://blog.csdn.net/wsniyufang 2010级 Alan http://blog.csdn.net/cugb1004101218 maddoctor http://blog.csdn.net/sdj222555 walk_upon http://blog.csdn.net/walk_upon 2011级 kdqzzxxcc http://blog.csdn.net/just_water 止于至善 http://blog.csdn.net/qq415200973 2012级 聂小白 http://blog.csdn.net/q295657451 FreeMeepo http://www.freemeepo.com/acm/ 昊天 http://blog.csdn.net/ooooooooe 潇洒走一回 http://blog.csdn.net/u011466175 SIO__Five http://SIOFive.github.io/ 2013级 康逗 http://blog.csdn.net/zxk422/ Isco http://blog.csdn.net/chenyuwen666 浮沉独步 http://blog.csdn.net/u013588639 Peter http://blog.csdn.net/userluoxuan Fly in the s http://blog.csdn.net/mjoinir Every Day http://blog.csdn.net/u013044116","tags":null,"title":"ACM队友们的博客","url":"/2014/06/12/acm-teammates-blog/"},{"categories":"Code","date":1402495200,"kind":"page","lang":"zh-hans","objectID":"/2014/06/11/new-way-blog-spring/","permalink":"https://xuanwo.io/2014/06/11/new-way-blog-spring/","publishdate":"2014-06-11T14:00:00Z","relpermalink":"/2014/06/11/new-way-blog-spring/","summary":"很久之前就有了想要有一个自己的博客的想法，一直没有付诸于实施。整个初中到高中基本上就是在使用一个半死不活的CSDN博客，更新不多，质量不高，还有点嫌弃它丑陋，定制性不佳的界面。 前两天队长要求我们每个人都必须开通一个博客，于是，我终于开始腾出精力和时间去寻找一个合适的地方来做我的博客。现有的一些博客提供商都被否决了，网易搜狐腾讯之类的并不是适合一个程序猿，文章写出来也得不到反馈与交流，失去了它的意义。随着搜索的进行，Github Pages开始频繁的出现在页面上。之前一直在用Github，但是对它的Pages业务并不了解。根据一些教程（感谢阮一峰先生的博客），我先后使用了Hexo，Jekyll，Octopress等生成网站。网站的风格我很喜欢，只是不停地纠结于怎样的配置更好的问题，反而加重了我自己的负担。 无意之间，我看到了@zhaoda的博客，使用自己开发的Spring项目，通过抓取项目的issues来撰写博客，效果出奇的好。使用Github自带的lables进行标签管理，issues的评论功能直接可以当做文章的评论区，操作简单，无需复杂配置，完全符合我的要求。\n","tags":["Blog","JavaScript","Github-Pages"],"title":"使用Github Pages做博客的新思路——Spring","url":"/2014/06/11/new-way-blog-spring/"},{"categories":"Code","date":1401926400,"kind":"page","lang":"zh-hans","objectID":"/2014/06/05/sublime-text-3-ide/","permalink":"https://xuanwo.io/2014/06/05/sublime-text-3-ide/","publishdate":"2014-06-05T00:00:00Z","relpermalink":"/2014/06/05/sublime-text-3-ide/","summary":"我是一只有着小小的强迫症的苦逼菜鸟，敲代码追求一个爽快。原来一直在用Code::Blocks，虽然说是用C++开发的，效率很高，但是每次启动的时候总是要盯着它不怎么样的启动页看很久，不开心= =。这两天开始接触Sublime Text，顿时被迷住了，不管不顾的决定把它改造成一个狂霸酷拽屌的IDE，所以，走你～～\n","tags":["Software","C"],"title":"Sublime Text 3 化身为高大上的C/C++ IDE","url":"/2014/06/05/sublime-text-3-ide/"}]