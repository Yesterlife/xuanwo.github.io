<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hcl on Xuanwo's Blog</title><link>https://xuanwo.io/en-us/tags/hcl/</link><description>Recent content in hcl on Xuanwo's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Mon, 13 Apr 2020 01:00:00 +0000</lastBuildDate><atom:link href="https://xuanwo.io/en-us/tags/hcl/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Started with HCL2</title><link>https://xuanwo.io/2020/04/13/get-started-with-hcl2/</link><pubDate>Mon, 13 Apr 2020 01:00:00 +0000</pubDate><guid>https://xuanwo.io/2020/04/13/get-started-with-hcl2/</guid><description>&lt;p>&lt;a href="https://github.com/hashicorp/hcl/tree/hcl2">HCL&lt;/a> 2 is the most promising configuration language I have ever met, but the lack of document makes it hard to use, especially for developers who want to build applications using HCL 2 as config format. This article will show how to use and fully appreciate the benefits of HCL 2.&lt;/p>
&lt;blockquote>
&lt;p>In the following content, &lt;code>HCL&lt;/code> means &lt;code>HCL v2&lt;/code>, please don&amp;rsquo;t confuse with &lt;code>HCL v1&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>To fully understand the following content, you may need the following prerequisites:&lt;/p>
&lt;ul>
&lt;li>Basic golang development experience&lt;/li>
&lt;li>Familiar with other configuration languages: &lt;code>YAML&lt;/code>, &lt;code>JSON&lt;/code> and so on&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;blockquote>
&lt;p>HCL is a toolkit for creating structured configuration languages that are both human- and machine-friendly, for use with command-line tools. Although intended to be generally useful, it is primarily targeted towards devops tools, servers, etc.&lt;/p>
&lt;/blockquote>
&lt;p>HCL has been widely used in all &lt;a href="https://www.hashicorp.com/">hashicorp&lt;/a> products: &lt;a href="https://www.hashicorp.com/products/terraform/">terraform&lt;/a>, &lt;a href="https://www.hashicorp.com/products/vault/">vault&lt;/a>, &lt;a href="https://www.hashicorp.com/products/consul/">consul&lt;/a>, &lt;a href="https://www.hashicorp.com/products/nomad/">nomad&lt;/a>, &lt;a href="https://www.vagrantup.com/">vagrant&lt;/a> and &lt;a href="https://www.packer.io/">packer&lt;/a>. Users can configure them like following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-hcl" data-lang="hcl">io_mode &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;async&amp;#34;&lt;/span>
&lt;span style="color:#007020;font-weight:bold">service&lt;/span> &lt;span style="color:#4070a0">&amp;#34;http&amp;#34; &amp;#34;web_proxy&amp;#34;&lt;/span> {
listen_addr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;127.0.0.1:8080&amp;#34;&lt;/span>
&lt;span style="color:#007020;font-weight:bold">process&lt;/span> &lt;span style="color:#4070a0">&amp;#34;main&amp;#34;&lt;/span> {
command &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;/usr/local/bin/awesome-app&amp;#34;, &amp;#34;server&amp;#34;&lt;/span>]
}
&lt;span style="color:#007020;font-weight:bold">process&lt;/span> &lt;span style="color:#4070a0">&amp;#34;mgmt&amp;#34;&lt;/span> {
command &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;/usr/local/bin/awesome-app&amp;#34;, &amp;#34;mgmt&amp;#34;&lt;/span>]
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>instead of&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#062873;font-weight:bold">&amp;#34;io_mode&amp;#34;&lt;/span>: &lt;span style="color:#4070a0">&amp;#34;async&amp;#34;&lt;/span>,
&lt;span style="color:#062873;font-weight:bold">&amp;#34;service&amp;#34;&lt;/span>: {
&lt;span style="color:#062873;font-weight:bold">&amp;#34;http&amp;#34;&lt;/span>: {
&lt;span style="color:#062873;font-weight:bold">&amp;#34;web_proxy&amp;#34;&lt;/span>: {
&lt;span style="color:#062873;font-weight:bold">&amp;#34;listen_addr&amp;#34;&lt;/span>: &lt;span style="color:#4070a0">&amp;#34;127.0.0.1:8080&amp;#34;&lt;/span>,
&lt;span style="color:#062873;font-weight:bold">&amp;#34;process&amp;#34;&lt;/span>: {
&lt;span style="color:#062873;font-weight:bold">&amp;#34;main&amp;#34;&lt;/span>: {
&lt;span style="color:#062873;font-weight:bold">&amp;#34;command&amp;#34;&lt;/span>: [&lt;span style="color:#4070a0">&amp;#34;/usr/local/bin/awesome-app&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;server&amp;#34;&lt;/span>]
},
&lt;span style="color:#062873;font-weight:bold">&amp;#34;mgmt&amp;#34;&lt;/span>: {
&lt;span style="color:#062873;font-weight:bold">&amp;#34;command&amp;#34;&lt;/span>: [&lt;span style="color:#4070a0">&amp;#34;/usr/local/bin/awesome-app&amp;#34;&lt;/span>, &lt;span style="color:#4070a0">&amp;#34;mgmt&amp;#34;&lt;/span>]
}
}
}
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#007020;font-weight:bold">id_mode&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#4070a0">&amp;#34;async&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#007020;font-weight:bold">service&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">http&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">web_proxy&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">listen_addr&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#4070a0">&amp;#34;127.0.0.1:8080&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">process&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#007020;font-weight:bold">main&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">command&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#4070a0">&amp;#34;/usr/local/bin/awesome-app&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#4070a0">&amp;#34;server&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#007020;font-weight:bold">mgmt&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#007020;font-weight:bold">command&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#4070a0">&amp;#34;/usr/local/bin/awesome-app&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#4070a0">&amp;#34;mgmt&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/hashicorp/hcl/tree/hcl2">HCL&lt;/a> v2 combines HCL 1.0 and &lt;a href="https://github.com/hashicorp/hil">HIL&lt;/a>, so that we can interpolate values directly:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-hcl" data-lang="hcl">&lt;span style="color:#60a0b0;font-style:italic"># Arithmetic with literals and application-provided variables
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>sum &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1&lt;/span> &lt;span style="">+&lt;/span> &lt;span style="color:#007020;font-weight:bold">addend&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic"># String interpolation and templates
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>message &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Hello, ${name}!&amp;#34;&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic"># Application-provided functions
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>shouty_message &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">upper&lt;/span>(&lt;span style="color:#007020;font-weight:bold">message&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/hashicorp/hcl/tree/hcl2">HCL&lt;/a> is both user and developer-friendly, not registered or missing block will be warned, so the developer doesn&amp;rsquo;t need to guess the reason why config parse failed:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">TestParse: config_test.&lt;span style="color:#007020;font-weight:bold">go&lt;/span>:&lt;span style="color:#40a070">45&lt;/span>: test.hcl:&lt;span style="color:#40a070">1&lt;/span>,&lt;span style="color:#40a070">1&lt;/span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">1&lt;/span>: Missing required argument; The argument &lt;span style="color:#4070a0">&amp;#34;name&amp;#34;&lt;/span> is required, but no definition was found., and &lt;span style="color:#40a070">1&lt;/span> other &lt;span style="color:#06287e">diagnostic&lt;/span>(s)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;p>To get started quickly, we will not cover every syntax in &lt;a href="https://github.com/hashicorp/hcl/blob/hcl2/hclsyntax/spec.md">HCL Native Syntax Specification&lt;/a>. Instead, we focused on the most used subset of &lt;em>structural&lt;/em> language.&lt;/p>
&lt;h3 id="attributes-and-blocks">Attributes and Blocks&lt;/h3>
&lt;p>HCL is built around two constructs: attributes and blocks.&lt;/p>
&lt;p>An &lt;code>attribute&lt;/code> means to assign a value to a name.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-hcl" data-lang="hcl">io_mode &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;async&amp;#34;&lt;/span>
debug &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#902000">false&lt;/span>
max_size &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">1024&lt;/span> &lt;span style="">*&lt;/span> &lt;span style="color:#40a070">1024&lt;/span>
ratio &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>.&lt;span style="color:#40a070">7&lt;/span>
placehold &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">null&lt;/span>
command &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;/usr/local/bin/awesome-app&amp;#34;, &amp;#34;server&amp;#34;&lt;/span>]
rules &lt;span style="color:#666">=&lt;/span> {
&lt;span style="color:#007020;font-weight:bold">mainland&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;mainland&amp;#34;&lt;/span>,
&lt;span style="color:#007020;font-weight:bold">default&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;oversea&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>identifier&lt;/code> before the equals sign is the &lt;code>attribute&lt;/code> name, and the &lt;code>expression&lt;/code> after the equals sign is the &lt;code>attribute&lt;/code>'s value.&lt;/p>
&lt;p>A block creates a child body annotated by a type and optional labels, and block&amp;rsquo;s content consists of a collection of attributes and blocks.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-hcl" data-lang="hcl">&lt;span style="color:#007020;font-weight:bold">service&lt;/span> &lt;span style="color:#4070a0">&amp;#34;http&amp;#34; &amp;#34;web_proxy&amp;#34;&lt;/span> {
listen_addr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;127.0.0.1:8080&amp;#34;&lt;/span>
&lt;span style="color:#007020;font-weight:bold">process&lt;/span> {
command &lt;span style="color:#666">=&lt;/span> [&lt;span style="color:#4070a0">&amp;#34;/usr/local/bin/awesome-app&amp;#34;, &amp;#34;server&amp;#34;&lt;/span>]
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>service&lt;/code> here defines a type with two required labels: every &lt;code>service&lt;/code> following should have two &lt;code>labels&lt;/code>. A particular block type may have any number of required labels, or it may require none as with the nested &lt;code>process&lt;/code> block type.&lt;/p>
&lt;p>A block&amp;rsquo;s body content is delimited by &lt;code>{&lt;/code> and &lt;code>}&lt;/code>. Within the block body, further &lt;code>attributes&lt;/code> and &lt;code>blocks&lt;/code> may be nested, creating a hierarchy of blocks and their associated attributes.&lt;/p>
&lt;h3 id="identifiers">Identifiers&lt;/h3>
&lt;p>&lt;code>identifier&lt;/code> is the name for &lt;code>attribute&lt;/code> and &lt;code>block&lt;/code> types.&lt;/p>
&lt;p>Identifiers can contain letters, digits, underscores (&lt;code>_&lt;/code>), and hyphens (&lt;code>-&lt;/code>). The first character of an identifier must not be a digit, to avoid ambiguity with literal numbers.&lt;/p>
&lt;h3 id="comments">Comments&lt;/h3>
&lt;ul>
&lt;li>&lt;code>#&lt;/code> begins a single-line comment, ending at the end of the line.&lt;/li>
&lt;li>&lt;code>//&lt;/code> also begins a single-line comment, as an alternative to #.&lt;/li>
&lt;li>&lt;code>/*&lt;/code> and &lt;code>*/&lt;/code> start and end delimiters for a comment that might span over multiple lines.&lt;/li>
&lt;/ul>
&lt;h3 id="other-tips">Other tips&lt;/h3>
&lt;ul>
&lt;li>MUST be UTF-8 encoding&lt;/li>
&lt;li>Invalid or non-normalized UTF-8 encoding is always a parse error&lt;/li>
&lt;li>No limit for line endings, but prefer &lt;code>LF&lt;/code> for most case&lt;/li>
&lt;/ul>
&lt;h2 id="using-in-a-project">Using in a project&lt;/h2>
&lt;p>In this section, we will use &lt;code>hcl&lt;/code> in a project. This project is designed to route DNS requests to different upstream via rules, different upstream could have different config.&lt;/p>
&lt;blockquote>
&lt;p>All example code is in &lt;code>github.com/Xuanwo/hcl2-example&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="config-design">Config design&lt;/h3>
&lt;p>The config format we desired could be:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-hcl" data-lang="hcl">listen &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;127.0.0.1:53&amp;#34;&lt;/span>
&lt;span style="color:#007020;font-weight:bold">upstream&lt;/span> &lt;span style="color:#4070a0">&amp;#34;oversea&amp;#34;&lt;/span> {
type &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;dot&amp;#34;&lt;/span>
addr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;185.222.222.222:853&amp;#34;&lt;/span>
tls_server_name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;public-dns-a.dns.sb&amp;#34;&lt;/span>
}
&lt;span style="color:#007020;font-weight:bold">upstream&lt;/span> &lt;span style="color:#4070a0">&amp;#34;mainland&amp;#34;&lt;/span> {
type &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;udp&amp;#34;&lt;/span>
addr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;114.114.114.114:53&amp;#34;&lt;/span>
}
rules &lt;span style="color:#666">=&lt;/span> {
&lt;span style="color:#007020;font-weight:bold">to_mainland&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;mainland&amp;#34;&lt;/span>,
&lt;span style="color:#007020;font-weight:bold">default&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;oversea&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="implementation">Implementation&lt;/h3>
&lt;p>Firstly, we need to declare our config struct:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#007020;font-weight:bold">type&lt;/span> Config &lt;span style="color:#007020;font-weight:bold">struct&lt;/span> {
Listen &lt;span style="color:#902000">string&lt;/span> &lt;span style="color:#4070a0">`hcl:&amp;#34;listen&amp;#34;`&lt;/span>
Upstreams []&lt;span style="color:#666">*&lt;/span>Upstream &lt;span style="color:#4070a0">`hcl:&amp;#34;upstream,block&amp;#34;`&lt;/span>
Rules &lt;span style="color:#007020;font-weight:bold">map&lt;/span>[&lt;span style="color:#902000">string&lt;/span>]&lt;span style="color:#902000">string&lt;/span> &lt;span style="color:#4070a0">`hcl:&amp;#34;rules&amp;#34;`&lt;/span>
}
&lt;span style="color:#007020;font-weight:bold">type&lt;/span> Upstream &lt;span style="color:#007020;font-weight:bold">struct&lt;/span> {
Name &lt;span style="color:#902000">string&lt;/span> &lt;span style="color:#4070a0">`hcl:&amp;#34;,label&amp;#34;`&lt;/span>
Type &lt;span style="color:#902000">string&lt;/span> &lt;span style="color:#4070a0">`hcl:&amp;#34;type&amp;#34;`&lt;/span>
Addr &lt;span style="color:#902000">string&lt;/span> &lt;span style="color:#4070a0">`hcl:&amp;#34;addr&amp;#34;`&lt;/span>
Options hcl.Body &lt;span style="color:#4070a0">`hcl:&amp;#34;,remain&amp;#34;`&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The tags are formatted as in the following example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">ThingType &lt;span style="color:#902000">string&lt;/span> &lt;span style="color:#4070a0">`hcl:&amp;#34;thing_type,attr&amp;#34;`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first is the name of the corresponding construct in configuration, while the second is a keyword giving the kind of construct expected. &lt;code>gohcl&lt;/code> supports the following keywords:&lt;/p>
&lt;ul>
&lt;li>&lt;code>attr&lt;/code>: default if empty, indicates that the value is to be populated from an attribute&lt;/li>
&lt;li>&lt;code>block&lt;/code>: indicates that the value is to populated from a block&lt;/li>
&lt;li>&lt;code>label&lt;/code>: indicates that the value is to populated from a block label&lt;/li>
&lt;li>&lt;code>optional&lt;/code>: is the same as attr, but the field is optional&lt;/li>
&lt;li>&lt;code>remain&lt;/code>: indicates that the value is to be populated from the remaining body after populating other fields&lt;/li>
&lt;/ul>
&lt;p>More tips:&lt;/p>
&lt;ul>
&lt;li>&lt;code>remain&lt;/code>'s corresponding type should be &lt;code>hcl.Body&lt;/code> or &lt;code>hcl.Attributes&lt;/code>&lt;/li>
&lt;li>If there is no &lt;code>remain&lt;/code> field, any attributes or blocks not matched will cause an error&lt;/li>
&lt;li>All fields are required as default except they have an &lt;code>optional&lt;/code> keyword&lt;/li>
&lt;/ul>
&lt;p>Secondly, we need to parse the config to get a &lt;code>hcl.Body&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#007020;font-weight:bold">var&lt;/span> diags hcl.Diagnostics
file, diags &lt;span style="color:#666">:=&lt;/span> hclsyntax.&lt;span style="color:#06287e">ParseConfig&lt;/span>(src, filename, hcl.Pos{Line: &lt;span style="color:#40a070">1&lt;/span>, Column: &lt;span style="color:#40a070">1&lt;/span>})
&lt;span style="color:#007020;font-weight:bold">if&lt;/span> diags.&lt;span style="color:#06287e">HasErrors&lt;/span>() {
&lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">nil&lt;/span>, fmt.&lt;span style="color:#06287e">Errorf&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;config parse: %w&amp;#34;&lt;/span>, diags)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>src&lt;/code> is the config file&amp;rsquo;s content in &lt;code>[]byte&lt;/code> slice&lt;/li>
&lt;li>&lt;code>filename&lt;/code> is used for debugging&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Diagnostic&lt;/code> is the struct used by &lt;code>hcl&lt;/code> for representing information to be presented to a user about an error or anomaly in parsing or evaluating configuration, and &lt;code>Diagnostics&lt;/code> is a slice of &lt;code>Diagnostic&lt;/code>. All &lt;code>hcl&lt;/code> functions will return &lt;code>Diagnostics&lt;/code> instead of &lt;code>error&lt;/code>, developers should check error by &lt;code>diags.HasErrors()&lt;/code> instead of &lt;code>err != nil&lt;/code>.&lt;/p>
&lt;p>Finally, we can decode body into a struct:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">c = &lt;span style="color:#666">&amp;amp;&lt;/span>Config{}
diags = gohcl.&lt;span style="color:#06287e">DecodeBody&lt;/span>(file.Body, &lt;span style="color:#007020;font-weight:bold">nil&lt;/span>, c)
&lt;span style="color:#007020;font-weight:bold">if&lt;/span> diags.&lt;span style="color:#06287e">HasErrors&lt;/span>() {
&lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">nil&lt;/span>, fmt.&lt;span style="color:#06287e">Errorf&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;config parse: %w&amp;#34;&lt;/span>, diags)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To support different upstream type, we may want to delay the &lt;code>hcl.Body&lt;/code> parse so that we can get strongly typed config struct:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#007020;font-weight:bold">type&lt;/span> client &lt;span style="color:#007020;font-weight:bold">struct&lt;/span> {
cfg &lt;span style="color:#666">*&lt;/span>Upstream
&lt;span style="color:#60a0b0;font-style:italic">// DoT related config
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> TLSServerName &lt;span style="color:#902000">string&lt;/span> &lt;span style="color:#4070a0">`hcl:&amp;#34;tls_server_name,optional&amp;#34;`&lt;/span>
}
&lt;span style="color:#007020;font-weight:bold">func&lt;/span> &lt;span style="color:#06287e">NewClient&lt;/span>(cfg &lt;span style="color:#666">*&lt;/span>Upstream) (&lt;span style="color:#666">*&lt;/span>client, &lt;span style="color:#902000">error&lt;/span>) {
c &lt;span style="color:#666">:=&lt;/span> &lt;span style="color:#666">&amp;amp;&lt;/span>client{cfg: cfg}
&lt;span style="color:#007020;font-weight:bold">var&lt;/span> diags hcl.Diagnostics
diags = gohcl.&lt;span style="color:#06287e">DecodeBody&lt;/span>(cfg.Options, &lt;span style="color:#007020;font-weight:bold">nil&lt;/span>, c)
&lt;span style="color:#007020;font-weight:bold">if&lt;/span> diags.&lt;span style="color:#06287e">HasErrors&lt;/span>() {
&lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">nil&lt;/span>, fmt.&lt;span style="color:#06287e">Errorf&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;new domain list: %w&amp;#34;&lt;/span>, diags)
}
&lt;span style="color:#007020;font-weight:bold">return&lt;/span> c, &lt;span style="color:#007020;font-weight:bold">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>One great feature for hcl is the clear error message, take the &lt;code>TestParseMissingField&lt;/code> as an example, we are missing a &lt;code>addr&lt;/code> here:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#666">==&lt;/span>= RUN TestParseMissingField
TestParseMissingField: main_test.&lt;span style="color:#007020;font-weight:bold">go&lt;/span>:&lt;span style="color:#40a070">35&lt;/span>: config parse: testdata&lt;span style="color:#666">/&lt;/span>&lt;span style="color:#40a070">2.&lt;/span>hcl:&lt;span style="color:#40a070">9&lt;/span>,&lt;span style="color:#40a070">20&lt;/span>&lt;span style="color:#666">-&lt;/span>&lt;span style="color:#40a070">20&lt;/span>: Missing required argument; The argument &lt;span style="color:#4070a0">&amp;#34;addr&amp;#34;&lt;/span> is required, but no definition was found.
&lt;span style="color:#666">---&lt;/span> FAIL: &lt;span style="color:#06287e">TestParseMissingField&lt;/span> (&lt;span style="color:#40a070">0.00&lt;/span>s)
FAIL
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>&lt;a href="https://github.com/hashicorp/hcl/tree/hcl2">HCL&lt;/a> is a &lt;strong>strong type&lt;/strong>, &lt;strong>strictly restricted&lt;/strong>, &lt;strong>human readable&lt;/strong>, &lt;strong>developer friendly&lt;/strong> configuration language which suitable for rich configuration application.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>Terraform&amp;rsquo;s &lt;a href="https://www.terraform.io/docs/configuration/syntax.html">Configuration Syntax&lt;/a> introduce (partial contents and structure copied here for no more web pages)&lt;/li>
&lt;li>&lt;a href="https://github.com/hashicorp/hcl/blob/hcl2/hclsyntax/spec.md">HCL Native Syntax Specification&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>My Solution for DNS Poisoning by AtomDNS</title><link>https://xuanwo.io/2020/04/05/my-solution-for-dns-poisoning-by-atomdns/</link><pubDate>Sun, 05 Apr 2020 01:00:00 +0000</pubDate><guid>https://xuanwo.io/2020/04/05/my-solution-for-dns-poisoning-by-atomdns/</guid><description>&lt;p>I used to be a big fan of &lt;a href="https://github.com/coredns/coredns">coredns&lt;/a>: I use it on my laptop, in our team&amp;rsquo;s internal infrastructure and maintain the package for &lt;a href="https://github.com/archlinuxcn/repo">archlinuxcn&lt;/a>. Until one day, I want to solve the DNS Pollution problem by &lt;a href="https://github.com/coredns/coredns">coredns&lt;/a>. But&amp;hellip;&lt;/p>
&lt;h2 id="coredns-is-not-for-dns-pollution">CoreDNS is not for DNS Pollution&lt;/h2>
&lt;p>It&amp;rsquo;s obvious that I&amp;rsquo;m not the only fan of &lt;a href="https://github.com/coredns/coredns">coredns&lt;/a>, there are mainly two solutions via coredns:&lt;/p>
&lt;ul>
&lt;li>Generate Corefile: as &lt;a href="https://minidump.info/blog/2019/07/coredns-no-dns-poisoning/">https://minidump.info/blog/2019/07/coredns-no-dns-poisoning/&lt;/a> does&lt;/li>
&lt;li>Write coredns plugin: like &lt;a href="https://github.com/blahgeek/coredns-chinadns">coredns-chinadns&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="why-not-generate-corefile">Why not generate corefile?&lt;/h3>
&lt;p>First of all, it&amp;rsquo;s ugly and not suitable for updates automatically. We have to generate the whole &lt;code>Corefile&lt;/code> every time domain list updated and make it hard to apply custom updates. For example, I need to forward some internal domains to a DNS server in a VPN. I need to add them in corefile build scripts or build another system to build corefile.&lt;/p>
&lt;p>Then, coredns forward except is not designed for large domains input. forward will read all zone in a slice, and check them one by one:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#60a0b0;font-style:italic">// Read all domains
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">func&lt;/span> &lt;span style="color:#06287e">parseBlock&lt;/span>(c &lt;span style="color:#666">*&lt;/span>caddy.Controller, f &lt;span style="color:#666">*&lt;/span>Forward) &lt;span style="color:#902000">error&lt;/span> {
&lt;span style="color:#007020;font-weight:bold">switch&lt;/span> c.&lt;span style="color:#06287e">Val&lt;/span>() {
&lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#4070a0">&amp;#34;except&amp;#34;&lt;/span>:
ignore &lt;span style="color:#666">:=&lt;/span> c.&lt;span style="color:#06287e">RemainingArgs&lt;/span>()
&lt;span style="color:#007020;font-weight:bold">if&lt;/span> &lt;span style="color:#007020">len&lt;/span>(ignore) &lt;span style="color:#666">==&lt;/span> &lt;span style="color:#40a070">0&lt;/span> {
&lt;span style="color:#007020;font-weight:bold">return&lt;/span> c.&lt;span style="color:#06287e">ArgErr&lt;/span>()
}
&lt;span style="color:#007020;font-weight:bold">for&lt;/span> i &lt;span style="color:#666">:=&lt;/span> &lt;span style="color:#40a070">0&lt;/span>; i &amp;lt; &lt;span style="color:#007020">len&lt;/span>(ignore); i&lt;span style="color:#666">++&lt;/span> {
ignore[i] = plugin.&lt;span style="color:#06287e">Host&lt;/span>(ignore[i]).&lt;span style="color:#06287e">Normalize&lt;/span>()
}
f.ignored = ignore
&lt;span style="color:#666">...&lt;/span>
}
&lt;span style="color:#60a0b0;font-style:italic">// Check one by one
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">func&lt;/span> (f &lt;span style="color:#666">*&lt;/span>Forward) &lt;span style="color:#06287e">isAllowedDomain&lt;/span>(name &lt;span style="color:#902000">string&lt;/span>) &lt;span style="color:#902000">bool&lt;/span> {
&lt;span style="color:#007020;font-weight:bold">if&lt;/span> dns.&lt;span style="color:#06287e">Name&lt;/span>(name) &lt;span style="color:#666">==&lt;/span> dns.&lt;span style="color:#06287e">Name&lt;/span>(f.from) {
&lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">true&lt;/span>
}
&lt;span style="color:#007020;font-weight:bold">for&lt;/span> _, ignore &lt;span style="color:#666">:=&lt;/span> &lt;span style="color:#007020;font-weight:bold">range&lt;/span> f.ignored {
&lt;span style="color:#007020;font-weight:bold">if&lt;/span> plugin.&lt;span style="color:#06287e">Name&lt;/span>(ignore).&lt;span style="color:#06287e">Matches&lt;/span>(name) {
&lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">false&lt;/span>
}
}
&lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#007020;font-weight:bold">true&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can use the builtin zone support for better performance:&lt;/p>
&lt;pre>&lt;code class="language-caddyfile" data-lang="caddyfile">. {
log
cache
forward . 8.8.8.8
}
abc.com def.com {
log
cache
forward . 114.114.114.114
}
&lt;/code>&lt;/pre>&lt;p>But we still need to maintain a huge corefile.&lt;/p>
&lt;h3 id="why-not-write-a-plugin">Why not write a plugin?&lt;/h3>
&lt;p>So, why not write a plugin to read domains from a file and forward it to different upstreams? Yes, I tried, and I found &lt;a href="https://github.com/coredns/coredns">coredns&lt;/a>&amp;rsquo;s plugin system is a mess.&lt;/p>
&lt;p>&lt;a href="https://github.com/coredns/coredns">coredns&lt;/a> is chain based, all dns query will be split via zones, so we can&amp;rsquo;t filter and forward them by domains. To handle all domains, we have to design a plugin under root:&lt;/p>
&lt;pre>&lt;code class="language-caddyfile" data-lang="caddyfile">. {
filter xxxxx
}
&lt;/code>&lt;/pre>&lt;p>Then, we need to design a config that matches something and forward to somewhere, maybe like the following:&lt;/p>
&lt;pre>&lt;code class="language-caddyfile" data-lang="caddyfile">. {
filter {
condition domain_in_file xxxxxxxxxx
action forward xxxxxxx
}
filter {
condition domain_not_in_file xxxxxxxxxx
action forward xxxxxx
}
}
&lt;/code>&lt;/pre>&lt;p>Looks perfect for now, let&amp;rsquo;s implement it. Ooooops, we need forward here, why not use the builtin forward? Sorry, we can&amp;rsquo;t. Plugin in coredns doesn&amp;rsquo;t been designed for run standalone or embedded, we can&amp;rsquo;t call other plugins or pass the query to other plugins conveniently. As I described in RFC &lt;a href="https://github.com/coredns/rfc/issues/6">embeddable plugin&lt;/a>, many plugins have to implement the same feature.&lt;/p>
&lt;p>So, don&amp;rsquo;t dig deeper, let&amp;rsquo;s jump out of the chaos.&lt;/p>
&lt;h2 id="so-what-am-i-need">So, what am I need?&lt;/h2>
&lt;p>After talking so much, what am I need?&lt;/p>
&lt;ul>
&lt;li>Forward DNS query to upstreams depends on conditions&lt;/li>
&lt;li>Human-readable config&lt;/li>
&lt;li>Simple deployment, no extra build needed&lt;/li>
&lt;li>No so bad performance&lt;/li>
&lt;/ul>
&lt;p>Although there are other good DNS servers like &lt;a href="https://github.com/shawn1m/overture">overture&lt;/a> and &lt;a href="https://github.com/pymumu/smartdns">smartdns&lt;/a>, let&amp;rsquo;s build a DNS server for ourselves.&lt;/p>
&lt;h2 id="say-hi-to-atomdns">Say Hi to AtomDNS!&lt;/h2>
&lt;p>With &lt;a href="https://github.com/miekg/dns">dns&lt;/a> package support, write a DNS server by go is so simple that we can build one in a half-day: &lt;a href="https://github.com/Xuanwo/atomdns">atomdns&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://github.com/Xuanwo/atomdns">atomdns&lt;/a> is built by three-part: &lt;code>upstream&lt;/code>, &lt;code>match&lt;/code> and &lt;code>rules&lt;/code>. &lt;code>upstream&lt;/code> means a set of DNS servers that dns been forwarded to. &lt;code>match&lt;/code> is the match policy, and we support &lt;code>in_domain_list&lt;/code> type for now. &lt;code>rules&lt;/code> will specify when match policy matched, this query should be forwarded to which &lt;code>upstream&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://github.com/Xuanwo/atomdns">atomdns&lt;/a>&amp;rsquo;s config is powered by &lt;a href="https://github.com/hashicorp/hcl/tree/hcl2">hcl2&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-hcl" data-lang="hcl">listen &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;127.0.0.1:53&amp;#34;&lt;/span>
&lt;span style="color:#007020;font-weight:bold">upstream&lt;/span> &lt;span style="color:#4070a0">&amp;#34;oversea&amp;#34;&lt;/span> {
type &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;dot&amp;#34;&lt;/span>
addr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;185.222.222.222:853&amp;#34;&lt;/span>
tls_server_name &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;public-dns-a.dns.sb&amp;#34;&lt;/span>
}
&lt;span style="color:#007020;font-weight:bold">upstream&lt;/span> &lt;span style="color:#4070a0">&amp;#34;mainland&amp;#34;&lt;/span> {
type &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;udp&amp;#34;&lt;/span>
addr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;114.114.114.114:53&amp;#34;&lt;/span>
}
&lt;span style="color:#007020;font-weight:bold">match&lt;/span> &lt;span style="color:#4070a0">&amp;#34;to_mainland&amp;#34;&lt;/span> {
type &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;in_domain_list&amp;#34;&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic"> # get this file from https://github.com/felixonmars/dnsmasq-china-list
&lt;/span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span> path &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;/etc/atomdns/accelerated-domains.china.raw.txt&amp;#34;&lt;/span>
}
rules &lt;span style="color:#666">=&lt;/span> {
&lt;span style="color:#007020;font-weight:bold">to_mainland&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;mainland&amp;#34;&lt;/span>,
&lt;span style="color:#007020;font-weight:bold">default&lt;/span>&lt;span style="">:&lt;/span> &lt;span style="color:#4070a0">&amp;#34;oversea&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have two &lt;code>upstream&lt;/code> here, and one names &lt;code>oversea&lt;/code>, the other names &lt;code>mainland&lt;/code>. When &lt;code>to_mainland&lt;/code> matched which is in the domain list we specify here, we will forward it to &lt;code>mainland&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">atomdns[164688]: 2020/04/06 22:09:13 [{wx1.qq.com. 1 1}]
atomdns[164688]: 2020/04/06 22:09:13 rule to_mainland matched, served via mainland
atomdns[164688]: 2020/04/06 22:12:18 [{github.githubassets.com. 1 1}]
atomdns[164688]: 2020/04/06 22:12:18 no rules matched, served via oversea
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple, but works.&lt;/p></description></item><item><title>About me</title><link>https://xuanwo.io/en-us/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xuanwo.io/en-us/about/</guid><description>&lt;h2 id="area">Area&lt;/h2>
&lt;ul>
&lt;li>[A]utomation&lt;/li>
&lt;li>[B]ackend Services&lt;/li>
&lt;li>[C]LI Tools&lt;/li>
&lt;li>[D]istributed Systems&lt;/li>
&lt;/ul>
&lt;h2 id="coding">Coding&lt;/h2>
&lt;p>Coding &lt;a href="https://github.com/Xuanwo">@github&lt;/a>&lt;/p>
&lt;h2 id="working">Working&lt;/h2>
&lt;p>Working &lt;a href="https://www.qingcloud.com/">@qingcloud&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.qingcloud.com/">QingCloud&lt;/a> Marketing, automate scripts and tools develop, community operation&lt;/li>
&lt;li>&lt;a href="https://www.qingcloud.com/">QingCloud&lt;/a> Object Storage R&amp;amp;D, responsible for object storage SDK and peripheral tool development&lt;/li>
&lt;li>&lt;a href="https://www.qingcloud.com/">QingCloud&lt;/a> Enterprise network disk R&amp;amp;D, responsible for back-end development&lt;/li>
&lt;li>&lt;a href="https://www.qingcloud.com/">QingCloud&lt;/a> Storage Department Efficiency Engineering R&amp;amp;D, responsible for internal R&amp;amp;D efficiency improvement&lt;/li>
&lt;/ul>
&lt;h2 id="social">Social&lt;/h2>
&lt;ul>
&lt;li>Telegram: &lt;a href="https://t.me/xuanwo">https://t.me/xuanwo&lt;/a>&lt;/li>
&lt;li>Twitter: &lt;a href="https://twitter.com/OnlyXuanwo">https://twitter.com/OnlyXuanwo&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Archives</title><link>https://xuanwo.io/en-us/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xuanwo.io/en-us/archives/</guid><description/></item><item><title>Links</title><link>https://xuanwo.io/en-us/blogroll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xuanwo.io/en-us/blogroll/</guid><description/></item></channel></rss>